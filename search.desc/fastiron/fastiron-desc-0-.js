searchState.loadedDescShard("fastiron", 0, "A Rust port of the Monte-Carlo particle transport …\nHardcoded constants used by the simulation\nData structures\nMesh &amp; modelling-related structures$\nInitialization code for the problem\nSuper-structure used to store the problem’s data\nParameters-related code\nParticle modelling code\nComputation &amp; simulation-related code\nUtilities used both to set up and run the simulation.\nCustom trait for floating point number\nAssociated reference value used for compute approximation.\nThreshold upper-value for decimal number.\nPi value.\nThreshold low-ish-value for decimal number.\nThreshold lower-value for decimal number.\nCustom alias for readability.\nCustom alias for readability.\nThreshold upper-value for decimal number.\nSimulation-related constants\nThreshold low-ish-value for decimal number.\nThreshold lower-value for decimal number.\nNumber of particle species\nNumber of timers, i.e. numbers of section we keep track of\nFraction of the target number of particles to spawn at …\nDiscrete energy spectrum\nMaterial-related data and modelling\n3D vectors\nNuclear-related data and modelling\nCode for simulation-related statistics\nStructure used to represent the energy spectrum of the …\nPopulation of the energy groups i.e. count of particle in …\nName of the output file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor.\nPrint the spectrum. This function does nothing if no …\nStructure used to represent an isotope of a material.\nStructure used to store a material’s information.\nTop level structure used to store each material’s …\nAdds an Isotope to the internal list.\nAdds a Material to the internal list.\nAtomic fraction of the isotope in the material. Not to be …\nReturns the index of the material passed as argument. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlobal identifier of the isotope in NuclearData.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of the isotopes making up the material.\nMass of the material in grams.\nList of materials.\nName of the material.\nCustom type for vector representation.\nReturn the vector product with the specified vector.\nReturn the distance from this vector to another point, …\nReturn the scalar product with the specified vector.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the vectors are almost equal. This method …\nReturns true if the vector is almost the zero element. …\nReturn the vector’s Euclidean norm.\nx axis coordinate.\ny axis coordinate.\nz axis coordinate.\nValue for an absorption reaction.\nValue for a fission reaction.\nTop level structure used to handle all things related to …\nStructure used to store reactions for a given isotope.\nLowest-level structure to represent a reaction.\nStructure used to hold a list of reactions.\nStructure used to represent a polynomial function.\nEnum used to represent a reaction type.\nValue for a scattering reaction.\nLeading coefficient of the polynomial function.\nAdds an isotope to the internal list.\nBuilds a reaction and adds it to the internal list.\nDegree 3 coefficient of the polynomial function.\nDegree 2 coefficient of the polynomial function.\nCross-section of the reaction, i.e. the discretization of …\nDegree 1 coefficient of the polynomial function.\nDegree 0 coefficient of the polynomial function.\nDiscrete value of the energy spectrum.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the energy group a specific energy belongs to by …\nReturns the total cross-section for a given energy group.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIsotope-sorted reaction list.\nConstructor.\nConstructor.\nStatistical offset. This value is used when sampling for …\nTotal number of energy groups.\nType of the reaction.\nList of reactions.\nReturns the value of the polynomial function in <code>xx</code>.\nStructure used to keep track of the number of event in the …\nValue for a census event.\nValue for a collision event.\nValue for a facet crossing event resulting in a cell exit …\nValue for a facet crossing event resulting in an escape …\nValue for a facet crossing event resulting in a reflection …\nValue for a facet crossing event resulting in a cell exit.\nDomain-sorted fluence-data-holding sub-structure.\nEnum representing a tally event.\nDomain-sorted <em>scalar-flux-data-holding</em> sub-structure.\nSuper-structure holding all recorded data besides time …\nAdd another Balance’s value to its own.\nCyclic balances.\nPrint stats of the current cycle and update the cumulative …\nArray used to store tallied event. See TalliedEvent for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPrepare the tallies for use.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor.\nPrints summarized data recorded by the tallies.\nReset fields to their default value i.e. <code>0</code>.\nReset fields to their default value i.e. <code>0</code>.\nTop-level structure holding scalar flux data.\nComputes the global scalar flux value of the problem.\nOffsets of the intersection points of a cell.\nOffsets of the faces of a cell.\nNumber of faces defining a cell.\nNumber of facets of a cell facing outward i.e. constituting\nNumber of points defining a cell.\nNumber of points per tetrahedron facet.\nFacet modelling &amp; related computation\nCode used to build and navigate the basis of the mesh\nCode used to locate vectors in the grid\nContains code to represent a cell’s current state.\nCode used for the domain separation model\nCode used to associate a location to a particle\nCode used to build and model the mesh of the problem\nDefault value. This will generate error at runtime if not …\nValue corresponding to an escape event. The facet is …\nValue corresponding to a reflection event. The facet is …\nStructure for adjacent facet representation.\nStructure encompassing all adjacent facet to a cell.\nList of planes associated with the outward-facing facets …\nStructure representing a plane of equation …\nStructure used to represent the nearest facet to a …\nEnum used to categorize the event a particle undergo when …\nSub-structure for adjacent facet representation.\nValue corresponding to an intra-problem crossing event. …\nValue corresponding to an intra-problem crossing event. …\nx axis coefficient.\nNeighboring location.\ny axis coefficient.\nz axis coefficient.\nCurrent location.\noffset coefficient.\nDistance between facet and particle.\nDot product between facet and direction vector.\nEvent associated with the facet junction.\nIndex of the facet the particle is the closest to.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNeighbor foreman.\nNeighbor domain global identifier.\nNeighbor index.\nConstructor. This creates an object corresponding to the …\nPoint indexes for this facet. The points are defined in a …\nAdjacency data.\nStructure representing the spatial grid of the problem.\nReturns the coordinate of the center of the given cell.\nConverts a cell index to a coordinate tuple.\nConverts a cell coordinate tuple to an index.\nSize of a mesh cell along the x-axis (cm).\nSize of a mesh cell along the y-axis (cm).\nSize of a mesh cell along the z-axis (cm).\nReturns the argument unchanged.\nReturns the global identifiers of the faces of the …\nReturns the global identifiers of the nodes of the …\nCalls <code>U::from(self)</code>.\nSize of the problem along the x-axis (cm).\nSize of the problem along the y-axis (cm).\nSize of the problem along the z-axis (cm).\nConstructor.\nReturns a node’s coordinate from its index.\nReturns a node’s coordinate from its tuple.\nConverts a node index to a coordinate tuple.\nConverts a node coordinate tuple to an index.\nNumber of cells along the x-axis.\nNumber of cells along the y-axis.\nNumber of cells along the z-axis.\nAdjust the tuple value according to bounds.\nReturns the index of the cell the coordinates belong to.\nStructure used to locate vectors, i.e. coordinates, in the …\nList of centers.\nList of corners.\nSize of a mesh cell along the x-axis (cm).\nSize of a mesh cell along the y-axis (cm).\nSize of a mesh cell along the z-axis (cm).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the closest center to a given coordinate. This is …\nConstructor.\nNumber of cells along the x-axis.\nNumber of cells along the y-axis.\nNumber of cells along the z-axis.\nStructure used to represent a cell’s state, i.e. …\nDensity of the material in the cell?\nReturns the argument unchanged.\nCell identifier.\nCalls <code>U::from(self)</code>.\nGlobal id of the material the cell is made of.\nLocal tally counting particles spawned in this cell.\nCell volume in cm³.\nStructure used to hold information related a cell’s face.\nStructure used to manage a domain, i.e. a spatial region …\nStructure that manages a data set on a mesh-like geometry.\nList of connectivity between cells of the mesh.\nList of the cells of the mesh.\nCurrent cell’s data.\nList of cells and their state. See MCCellState for more …\nGlobal identifier associated of the domain.\nEvent associated to the crossing of the face.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGlobal domain identifier.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMesh of the domain.\nGlobal identifiers of the neighboring domains.\nIndex of the domain of the neighboring cell.\nRanks of the neighboring domains.\nConstructor.\nConstructor.\nList of nodes defining the mesh’s geometry.\nStructure used to model a location in the problem.\nIndex of the cell the particle belongs to.\nIndex of the domain the particle belongs to.\nIndex of the facet associated to the particle. A value of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStructure used to hold cell information.\nStructure used to represent the mesh partition of the …\nBuilds the mesh partition. This method needs to be called …\nCell index\nMap linking cell global identifier to their CellInfo …\nDomain global identifier\nDomain global identifier.\nDomain index\nForeman identifier\nForeman identifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of neighboring domain identifiers.\nConstructor. The structure is <strong>not</strong> ready to be used …\nPrints cross-section data of the problem.\nCheck the consistency of the domain list passed as …\nCreates a MonteCarloData object using the specified …\nCreates &amp; initialize the correct number of Monte-Carlo …\nCreates the correct number of particle containers for …\nInitialize the structure used to keep track &amp; process …\nSuper-structure used to contain all the problem’s data.\nStructure used to hold final results of the simulation. …\nSuper-structure used to contain unit-specific data of the …\nStructure used to lazily compute cross-sections during …\nBalance used for cumulative and centralized statistics.\nEnum used to adapt additional checks after simulation.\nFlattened cache for cross-section storage. The structure …\nClear the cross-section cache for each domain.\nList of spatial domains.\nObject storing data related to the processor and execution …\nObject storing all tallies of the simulation.\nTop-level structure used to compute fluence data.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCurrent total number of particles in the simulation. This …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nObject storing all data related to materials.\nConstructor.\nConstructor.\nObject storing all data related to particles.\nNumber of energy groups in the discrete spectrum. Used to …\nParameters of the problem.\nWeight of a particle to be spawned. This is a constant in …\nEnergy spectrum of the problem.\nObject storing all tallies of the simulation.\nWeight of the particles at creation in a source zone.\nUpdate the energy spectrum by going over all the currently …\nUpdate internal structure from data tallied during the …\nStructure used to lazily compute cross-sections.\nEnum used to run additional tests according to the input …\nAlias for a <code>&lt;String, String&gt;</code> <code>FxHashMap</code>. See here for …\nBrick-shaped geometry, i.e. a rectangular cuboid.\nFirst configuration for the additional tests.\nSecond configuration for the additional tests.\nStructure used to describe a cross-section, i.e. a …\nStructure used to describe a geometry, i.e. a physical …\nStruct used to describe a material, i.e. its name and …\nThere is a missing reference to a cross-section; The string\nThere is a missing reference to a material; The string …\nThere are no specified geometries in the problem.\nEnum used to categorize inconsistencies within parameters\nStructure holding all the problem’s parameters.\nEnum used to describe a geometry’s shape\nStructure holding all simulation parameters.\nSphere-shaped geometry.\nNo additional tests are executed. This is the default mode.\nDefault value. Will result in errors if any geometries …\nA GeometryParameters object has an undefined Shape.\nLeading coefficient of the polynomial function.\nAbsorption reaction cross-section ratio i.e. its relative …\nAbsorption reaction cross-section name.\nAdd a new CrossSectionParameters object to the internal …\nAdd a new GeometryParameters object to the internal list.\nAdd a new MaterialParameters object to the internal map.\nDegree 3 coefficient of the polynomial function.\nSwitch used to bind rayon threads to physical cores.\nBoundary conditions of the problem. Mesh is initialized …\nDegree 2 coefficient of the polynomial function.\nVerify that the Parameters object passed as argument allows\nSize of the chunks used when executing in parallel.\nBenchmark type of the input problem. See BenchType for …\nMap of cross-sections. See CrossSectionParameters for more.\nName of the output file the cross-sections may be saved to.\nSwitch to enable writing of tallies &amp; timers data in <code>csv</code> …\nDegree 1 coefficient of the polynomial function.\nSwitch used to print thread-debugging information. …\nValue of the time step in seconds.\nEnergy value of the highest energy group.\nEnergy value of the lowest energy group.\nDegree 0 coefficient of the polynomial function.\nName of the output file the energy spectrum may be saved …\nFission reaction cross-section name.\nFission reaction cross-section ratio i.e. its relative …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a GeometryParameters object using the Block passed …\nCreates a MaterialParameters object using the Block passed …\nCreates a CrossSectionParameters object using the Block …\nInitialize a SimulationParameters object using a Cli …\nList of geometries. See GeometryParameters for more.\nUse the cli arguments to initialize parameters of the …\nPath to the input file, it can be relative or absolute.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSwitch to enable or disable load balancing during …\nLow statistical weight cutoff used for population control.\nSize of the simulation along the x-axis.\nSize of the simulation along the y-axis.\nSize of the simulation along the z-axis.\nMass of the material in grams.\nName of the material the geometry is made of.\nMap of materials. See MaterialParameters for more.\nNumber of energy groups to build a spectrum.\nNumber of isotopes.\nTarget number of particle for the simulation. Population …\nNumber of threads that should be used to run the …\nNumber of reactions.\nNumber of steps simulated by the program.\nNumber of units that should be used to run the simulation.\nName of the material.\nName of the cross-section.\nNormalization value?\nNumber of cells along the x-axis.\nNumber of cells along the y-axis.\nNumber of cells along the z-axis.\nRadius of a sphere-shaped geometry.\nScattering reaction cross-section name.\nScattering reaction cross-section ratio i.e. its relative …\nRandom number seed for the PRNG used by the simulation.\nShape of the material. Note that this value defines which …\nObject used to store simulation parameters\nRate of particle sourcing.\nSupply default parameters for the simulation if needed. …\nTotal value of the cross-section.\nUpdate the object’s SimulationParameters field using the …\nx-coordinate of the center of a sphere-shaped geometry.\nUpper bound on the x-axis of a brick-shaped geometry.\nLower bound on the x-axis of a brick-shaped geometry.\ny-coordinate of the center of a sphere-shaped geometry.\nUpper bound on the y-axis of a brick-shaped geometry.\nLower bound on the y-axis of a brick-shaped geometry.\nz-coordinate of the center of a sphere-shaped geometry.\nUpper bound on the z-axis of a brick-shaped geometry.\nLower bound on the z-axis of a brick-shaped geometry.\nExtended code for particles\nData structure used to hold particles\nData structure used to hold particles\nValid value. Quicksilver only supported one particle type.\nStructure used to hold all data of a particle.\nCustom enum used to model a particle’s species.\nInvalid value.\nAge.\nCurrent cell in the current domain.\nCurrent position.\nDirection of the particle as a normalized <code>(x, y, z)</code> vector.\nCurrent domain in the spatial grid.\nCurrent energy group the particle belong to.\nNearest facet.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn the starting cross-section for reaction sampling.\nComputes the particle speed from its energy. Note that …\nUnique ID used to identify and track individual particles.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKinetic energy.\nLast event this particle underwent.\nPlay russian-roulette with particle of low statistical …\nDistance to a collision.\nUpdate the particle’s field to model its movement along …\nNormal dot product value kept when crossing a facet.\nNumber of mean free paths to a collision.\nNumber of segments the particle travelled.\nPlay russian-roulette with the particle, returning true if …\nRandom number seed for the rng for this particle.\nRotates a 3D vector that is defined by the angles Theta …\nUses a PRNG to sample new energy &amp; angle after a reaction.\nSample a random direction for the particle to face.\nSample the number of mean free paths to a collision.\nDistance this particle travels in a segment.\nSpecies of the particle.\nTime remaining before this particle hit census.\nCache-ing the current total cross-section.\nReturns an iterator over particles created from a split of …\nUpdate the particle’s trajectory with new energy &amp; angle.\nWeight.\nCustom immutable iterator structure.\nCustom mutable iterator structure.\nCustom data structure used to implement rayon’s iterator.\nCustom immutable producer for the iterator to use.\nCustom mutable producer for the iterator to use.\nPropagating method.\nPropagating method.\nPropagating method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPropagating method.\nPropagating method.\nPropagating method.\nPropagating method.\nPropagating method.\nPropagating method.\nStructure used as a container for all particles.\nAdds back to the processing storage the extra particles.\nContainer for extra particles. This is used for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if there are no more particles to process, i.e:\nConstructor. The appropriate capacity is computed …\nTrack particles and transfer them to the processed storage …\nContainer for already processed particles.\nContainer for particles that have yet to be processed.\nRandomly delete particles to reach the desired number of …\nSort the processing particles according to where they …\nSplit particles to reach the desired number of particles …\nSwap the processing and processed particle lists. This …\nEvent-specific code for particles colliding\nCore of the particle tracking algorithm used by the …\nCode for cross-section computation a.k.a. probability …\nEvent-specific code for particles crossing a cell’s facet\nCode for segment outcome computation, i.e. whichever event …\nCode for spatial computations of the simulation\nCode regulating the number of particles in the simulation\nTransforms a given particle according to an internally …\nMain steps of the <code>CycleTracking</code> section.\nComputes the number-density-weighted macroscopic …\nComputes and transform accordingly a MCParticle object …\nValue for census, i.e. no event.\nValue for collision event.\nStructure used to handle all distance related data &amp; …\nValue for facet crossing event.\nEnum representing the outcome of the current segment.\nDistance to census.\nDistance to collision.\nDistance to facet crossing.\nUpdate the structure to force a collision\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCurrent minimum distance.\nComputes the outcome of the current segment for a given …\nCurrent outcome.\nUpdate the distance to a given outcome with the provided …\nReturns a coordinate that represents the “center” of …\nGenerates a random coordinate inside a polyhedral cell.\nComputes which facet of the specified cell is nearest to …\nReflects a particle off a reflection-type boundary.\nRoutine used to compute a split factor, value used to …\nSimulates the sources according to the problem’s …\nCode used for coordinated initialization of domains &amp; …\nCode used to run additional tests when benchmarking\nCode originally used to allocate domains to MPI ranks\nCode used to manage I/O\nCode used for built-in timers &amp; execution speed gauging\nCode used to fetch and hold execution information\nCode for a PRNG\nStructure used to hold a global mapping of MeshPartition …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor.\nTest Balance Tallies for equality in number of facet …\nTest Balance Tallies for relative correctness.\nRuns additional tests according to the BenchType.\nTest that the scalar flux is homogenous across cells for …\nTest for lost particles during the simulation.\nObject used to record which domains belongs to which rank.\nGlobal identifiers of the assigned domains.\nReturns the argument unchanged.\nLocal indexes of the all domains.\nCalls <code>U::from(self)</code>.\nConstructor\nRanks of all the domains\nFastiron, a Rust port of the Quicksilver proxy-app\nEnum used to categorize error related to the input of the …\nbind rayon threads to physical cores – can improve …\nsize of the chunks when executing in parallel – if …\nname of cross-section output file\nwrite tallies &amp; timer data into csv files if present\nenable thread debugging if present\ntime step in seconds\nname of energy spectrum output file\nReturns the argument unchanged.\nReturns the argument unchanged.\nname of input file\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nenable load balancing if present\nx-size of simulation in cm\ny-size of simulation in cm\nz-size of simulation in cm\ntotal number of particles\nnumber of rayon threads that should be used to run the …\nnumber of steps simulated\nnumber of units that should be used to run the simulation\nnumber of mesh elements along x\nnumber of mesh elements along y\nnumber of mesh elements along z\nUpdates the Parameters structure passed as argument using …\nrandom number seed\nenable single-precision float type usage if present\n<code>cycle_sync()</code> execution time.\n<code>cycle_tracking()</code> execution time.\nProcessing phase of <code>cycle_tracking()</code> execution time.\nSorting phase of <code>cycle_tracking()</code> execution time.\nStructure used to represent a single timer.\nStructure used as a container for the 6 timers used through\nFull execution time.\n<code>cycle_init()</code> execution time.\nEnum used to identify sections and their corresponding …\nAverage duration of each timer.\nUpdate statistics and clear the timers for the next cycle.\nValue of the total duration in microseconds.\nPrints the cumulative report at the end of execution. The …\nClock value at the start of the timer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the duration of the last cycle of the specified …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValue of the last duration in microseconds.\nLongest duration of each timer.\nShortest duration of each timer.\nCurrent number of value used for average computation. Used …\nNumber of call to the timer i.e. number of measurement …\nStart the specified timer.\nClock value at the start of the timer.\nStop the specified timer and record internally the …\nTimer container.\nTotal duration of each timer. This is the value that …\nUpdate the statistics of the main timer.\nEnum used to represent the execution mode of the …\nStructure holding execution information of a given run.\nDefault value. Sequential execution.\nSwitch to bind rayon threads to physical cores.\nSize of the chunks used by rayon.\nExecution mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of processors of the machine. Currently useless.\nNumber of thread(s) used for execution.\nNumber of unit(s) used for (distributed) execution.\nConstructor. The structure is initialized using parameters …\nReturns the pseudo-random number produced by a call to a …\nGenerates a new random number seed from the parent seed …")