<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="79246"><g><title>__sincos (25 samples, 0.03%)</title><rect x="0.0050%" y="565" width="0.0315%" height="15" fill="rgb(227,0,7)" fg:x="4" fg:w="25"/><text x="0.2550%" y="575.50"></text></g><g><title>[[heap]] (141 samples, 0.18%)</title><rect x="0.0000%" y="581" width="0.1779%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="141"/><text x="0.2500%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (112 samples, 0.14%)</title><rect x="0.0366%" y="565" width="0.1413%" height="15" fill="rgb(221,193,54)" fg:x="29" fg:w="112"/><text x="0.2866%" y="575.50"></text></g><g><title>__GI___libc_free (75 samples, 0.09%)</title><rect x="0.1817%" y="565" width="0.0946%" height="15" fill="rgb(248,212,6)" fg:x="144" fg:w="75"/><text x="0.4317%" y="575.50"></text></g><g><title>__GI___libc_malloc (40 samples, 0.05%)</title><rect x="0.2764%" y="565" width="0.0505%" height="15" fill="rgb(208,68,35)" fg:x="219" fg:w="40"/><text x="0.5264%" y="575.50"></text></g><g><title>__sincos (16 samples, 0.02%)</title><rect x="0.3306%" y="565" width="0.0202%" height="15" fill="rgb(232,128,0)" fg:x="262" fg:w="16"/><text x="0.5806%" y="575.50"></text></g><g><title>_int_free (42 samples, 0.05%)</title><rect x="0.3508%" y="565" width="0.0530%" height="15" fill="rgb(207,160,47)" fg:x="278" fg:w="42"/><text x="0.6008%" y="575.50"></text></g><g><title>_int_malloc (11 samples, 0.01%)</title><rect x="0.4038%" y="565" width="0.0139%" height="15" fill="rgb(228,23,34)" fg:x="320" fg:w="11"/><text x="0.6538%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (28 samples, 0.04%)</title><rect x="0.4177%" y="565" width="0.0353%" height="15" fill="rgb(218,30,26)" fg:x="331" fg:w="28"/><text x="0.6677%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (44 samples, 0.06%)</title><rect x="0.4530%" y="565" width="0.0555%" height="15" fill="rgb(220,122,19)" fg:x="359" fg:w="44"/><text x="0.7030%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (25 samples, 0.03%)</title><rect x="0.5085%" y="453" width="0.0315%" height="15" fill="rgb(250,228,42)" fg:x="403" fg:w="25"/><text x="0.7585%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (25 samples, 0.03%)</title><rect x="0.5085%" y="437" width="0.0315%" height="15" fill="rgb(240,193,28)" fg:x="403" fg:w="25"/><text x="0.7585%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (25 samples, 0.03%)</title><rect x="0.5085%" y="421" width="0.0315%" height="15" fill="rgb(216,20,37)" fg:x="403" fg:w="25"/><text x="0.7585%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (25 samples, 0.03%)</title><rect x="0.5085%" y="405" width="0.0315%" height="15" fill="rgb(206,188,39)" fg:x="403" fg:w="25"/><text x="0.7585%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (25 samples, 0.03%)</title><rect x="0.5085%" y="389" width="0.0315%" height="15" fill="rgb(217,207,13)" fg:x="403" fg:w="25"/><text x="0.7585%" y="399.50"></text></g><g><title>__rdl_dealloc (25 samples, 0.03%)</title><rect x="0.5085%" y="373" width="0.0315%" height="15" fill="rgb(231,73,38)" fg:x="403" fg:w="25"/><text x="0.7585%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (25 samples, 0.03%)</title><rect x="0.5085%" y="357" width="0.0315%" height="15" fill="rgb(225,20,46)" fg:x="403" fg:w="25"/><text x="0.7585%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (19 samples, 0.02%)</title><rect x="0.5439%" y="437" width="0.0240%" height="15" fill="rgb(210,31,41)" fg:x="431" fg:w="19"/><text x="0.7939%" y="447.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearDataReaction&lt;T&gt;::sample_collision (26 samples, 0.03%)</title><rect x="0.5401%" y="453" width="0.0328%" height="15" fill="rgb(221,200,47)" fg:x="428" fg:w="26"/><text x="0.7901%" y="463.50"></text></g><g><title>fastiron::simulation::collision_event::collision_event (65 samples, 0.08%)</title><rect x="0.5085%" y="469" width="0.0820%" height="15" fill="rgb(226,26,5)" fg:x="403" fg:w="65"/><text x="0.7585%" y="479.50"></text></g><g><title>fastiron::simulation::collision_event::update_trajectory (14 samples, 0.02%)</title><rect x="0.5729%" y="453" width="0.0177%" height="15" fill="rgb(249,33,26)" fg:x="454" fg:w="14"/><text x="0.8229%" y="463.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::sin (12 samples, 0.02%)</title><rect x="0.5754%" y="437" width="0.0151%" height="15" fill="rgb(235,183,28)" fg:x="456" fg:w="12"/><text x="0.8254%" y="447.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sin (12 samples, 0.02%)</title><rect x="0.5754%" y="421" width="0.0151%" height="15" fill="rgb(221,5,38)" fg:x="456" fg:w="12"/><text x="0.8254%" y="431.50"></text></g><g><title>fastiron::cycle_tracking (69 samples, 0.09%)</title><rect x="0.5085%" y="549" width="0.0871%" height="15" fill="rgb(247,18,42)" fg:x="403" fg:w="69"/><text x="0.7585%" y="559.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (69 samples, 0.09%)</title><rect x="0.5085%" y="533" width="0.0871%" height="15" fill="rgb(241,131,45)" fg:x="403" fg:w="69"/><text x="0.7585%" y="543.50"></text></g><g><title>fastiron::cycle_tracking::{{closure}} (69 samples, 0.09%)</title><rect x="0.5085%" y="517" width="0.0871%" height="15" fill="rgb(249,31,29)" fg:x="403" fg:w="69"/><text x="0.7585%" y="527.50"></text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_guts (69 samples, 0.09%)</title><rect x="0.5085%" y="501" width="0.0871%" height="15" fill="rgb(225,111,53)" fg:x="403" fg:w="69"/><text x="0.7585%" y="511.50"></text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_function (69 samples, 0.09%)</title><rect x="0.5085%" y="485" width="0.0871%" height="15" fill="rgb(238,160,17)" fg:x="403" fg:w="69"/><text x="0.7585%" y="495.50"></text></g><g><title>[unknown] (345 samples, 0.44%)</title><rect x="0.1817%" y="581" width="0.4354%" height="15" fill="rgb(214,148,48)" fg:x="144" fg:w="345"/><text x="0.4317%" y="591.50"></text></g><g><title>fastiron::main (86 samples, 0.11%)</title><rect x="0.5085%" y="565" width="0.1085%" height="15" fill="rgb(232,36,49)" fg:x="403" fg:w="86"/><text x="0.7585%" y="575.50"></text></g><g><title>fastiron::init::init_mc (17 samples, 0.02%)</title><rect x="0.5956%" y="549" width="0.0215%" height="15" fill="rgb(209,103,24)" fg:x="472" fg:w="17"/><text x="0.8456%" y="559.50"></text></g><g><title>fastiron::init::init_mesh (17 samples, 0.02%)</title><rect x="0.5956%" y="533" width="0.0215%" height="15" fill="rgb(229,88,8)" fg:x="472" fg:w="17"/><text x="0.8456%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (17 samples, 0.02%)</title><rect x="0.5956%" y="517" width="0.0215%" height="15" fill="rgb(213,181,19)" fg:x="472" fg:w="17"/><text x="0.8456%" y="527.50"></text></g><g><title>fastiron::init::init_mesh::{{closure}} (17 samples, 0.02%)</title><rect x="0.5956%" y="501" width="0.0215%" height="15" fill="rgb(254,191,54)" fg:x="472" fg:w="17"/><text x="0.8456%" y="511.50"></text></g><g><title>fastiron::geometry::mc_domain::MCDomain&lt;T&gt;::new (17 samples, 0.02%)</title><rect x="0.5956%" y="485" width="0.0215%" height="15" fill="rgb(241,83,37)" fg:x="472" fg:w="17"/><text x="0.8456%" y="495.50"></text></g><g><title>fastiron::geometry::mc_domain::MCMeshDomain&lt;T&gt;::new (12 samples, 0.02%)</title><rect x="0.6019%" y="469" width="0.0151%" height="15" fill="rgb(233,36,39)" fg:x="477" fg:w="12"/><text x="0.8519%" y="479.50"></text></g><g><title>_int_free (27 samples, 0.03%)</title><rect x="0.6183%" y="565" width="0.0341%" height="15" fill="rgb(226,3,54)" fg:x="490" fg:w="27"/><text x="0.8683%" y="575.50"></text></g><g><title>__do_global_dtors_aux_fini_array_entry (43 samples, 0.05%)</title><rect x="0.6183%" y="581" width="0.0543%" height="15" fill="rgb(245,192,40)" fg:x="490" fg:w="43"/><text x="0.8683%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (15 samples, 0.02%)</title><rect x="0.6537%" y="565" width="0.0189%" height="15" fill="rgb(238,167,29)" fg:x="518" fg:w="15"/><text x="0.9037%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (15 samples, 0.02%)</title><rect x="0.6537%" y="549" width="0.0189%" height="15" fill="rgb(232,182,51)" fg:x="518" fg:w="15"/><text x="0.9037%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (15 samples, 0.02%)</title><rect x="0.6537%" y="533" width="0.0189%" height="15" fill="rgb(231,60,39)" fg:x="518" fg:w="15"/><text x="0.9037%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (15 samples, 0.02%)</title><rect x="0.6537%" y="517" width="0.0189%" height="15" fill="rgb(208,69,12)" fg:x="518" fg:w="15"/><text x="0.9037%" y="527.50"></text></g><g><title>fastiron::data::tallies::FluenceDomain&lt;T&gt;::compute (22 samples, 0.03%)</title><rect x="0.6814%" y="373" width="0.0278%" height="15" fill="rgb(235,93,37)" fg:x="540" fg:w="22"/><text x="0.9314%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (22 samples, 0.03%)</title><rect x="0.6814%" y="357" width="0.0278%" height="15" fill="rgb(213,116,39)" fg:x="540" fg:w="22"/><text x="0.9314%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (22 samples, 0.03%)</title><rect x="0.6814%" y="341" width="0.0278%" height="15" fill="rgb(222,207,29)" fg:x="540" fg:w="22"/><text x="0.9314%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (22 samples, 0.03%)</title><rect x="0.6814%" y="325" width="0.0278%" height="15" fill="rgb(206,96,30)" fg:x="540" fg:w="22"/><text x="0.9314%" y="335.50"></text></g><g><title>fastiron::data::tallies::FluenceDomain&lt;T&gt;::compute::{{closure}} (22 samples, 0.03%)</title><rect x="0.6814%" y="309" width="0.0278%" height="15" fill="rgb(218,138,4)" fg:x="540" fg:w="22"/><text x="0.9314%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (22 samples, 0.03%)</title><rect x="0.6814%" y="293" width="0.0278%" height="15" fill="rgb(250,191,14)" fg:x="540" fg:w="22"/><text x="0.9314%" y="303.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (22 samples, 0.03%)</title><rect x="0.6814%" y="277" width="0.0278%" height="15" fill="rgb(239,60,40)" fg:x="540" fg:w="22"/><text x="0.9314%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 0.03%)</title><rect x="0.6814%" y="261" width="0.0278%" height="15" fill="rgb(206,27,48)" fg:x="540" fg:w="22"/><text x="0.9314%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (22 samples, 0.03%)</title><rect x="0.6814%" y="245" width="0.0278%" height="15" fill="rgb(225,35,8)" fg:x="540" fg:w="22"/><text x="0.9314%" y="255.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::{{closure}} (20 samples, 0.03%)</title><rect x="0.6839%" y="229" width="0.0252%" height="15" fill="rgb(250,213,24)" fg:x="542" fg:w="20"/><text x="0.9339%" y="239.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (20 samples, 0.03%)</title><rect x="0.6839%" y="213" width="0.0252%" height="15" fill="rgb(247,123,22)" fg:x="542" fg:w="20"/><text x="0.9339%" y="223.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::cycle_finalize (37 samples, 0.05%)</title><rect x="0.6814%" y="453" width="0.0467%" height="15" fill="rgb(231,138,38)" fg:x="540" fg:w="37"/><text x="0.9314%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (37 samples, 0.05%)</title><rect x="0.6814%" y="437" width="0.0467%" height="15" fill="rgb(231,145,46)" fg:x="540" fg:w="37"/><text x="0.9314%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (37 samples, 0.05%)</title><rect x="0.6814%" y="421" width="0.0467%" height="15" fill="rgb(251,118,11)" fg:x="540" fg:w="37"/><text x="0.9314%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (37 samples, 0.05%)</title><rect x="0.6814%" y="405" width="0.0467%" height="15" fill="rgb(217,147,25)" fg:x="540" fg:w="37"/><text x="0.9314%" y="415.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::cycle_finalize::{{closure}} (37 samples, 0.05%)</title><rect x="0.6814%" y="389" width="0.0467%" height="15" fill="rgb(247,81,37)" fg:x="540" fg:w="37"/><text x="0.9314%" y="399.50"></text></g><g><title>fastiron::data::tallies::ScalarFluxDomain&lt;T&gt;::reset (15 samples, 0.02%)</title><rect x="0.7092%" y="373" width="0.0189%" height="15" fill="rgb(209,12,38)" fg:x="562" fg:w="15"/><text x="0.9592%" y="383.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (15 samples, 0.02%)</title><rect x="0.7092%" y="357" width="0.0189%" height="15" fill="rgb(227,1,9)" fg:x="562" fg:w="15"/><text x="0.9592%" y="367.50"></text></g><g><title>fastiron::data::tallies::ScalarFluxDomain&lt;T&gt;::reset::{{closure}} (15 samples, 0.02%)</title><rect x="0.7092%" y="341" width="0.0189%" height="15" fill="rgb(248,47,43)" fg:x="562" fg:w="15"/><text x="0.9592%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (15 samples, 0.02%)</title><rect x="0.7092%" y="325" width="0.0189%" height="15" fill="rgb(221,10,30)" fg:x="562" fg:w="15"/><text x="0.9592%" y="335.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (15 samples, 0.02%)</title><rect x="0.7092%" y="309" width="0.0189%" height="15" fill="rgb(210,229,1)" fg:x="562" fg:w="15"/><text x="0.9592%" y="319.50"></text></g><g><title>fastiron::cycle_finalize (59 samples, 0.07%)</title><rect x="0.6814%" y="469" width="0.0745%" height="15" fill="rgb(222,148,37)" fg:x="540" fg:w="59"/><text x="0.9314%" y="479.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::print_summary (22 samples, 0.03%)</title><rect x="0.7281%" y="453" width="0.0278%" height="15" fill="rgb(234,67,33)" fg:x="577" fg:w="22"/><text x="0.9781%" y="463.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::scalar_flux_sum (22 samples, 0.03%)</title><rect x="0.7281%" y="437" width="0.0278%" height="15" fill="rgb(247,98,35)" fg:x="577" fg:w="22"/><text x="0.9781%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (22 samples, 0.03%)</title><rect x="0.7281%" y="421" width="0.0278%" height="15" fill="rgb(247,138,52)" fg:x="577" fg:w="22"/><text x="0.9781%" y="431.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (22 samples, 0.03%)</title><rect x="0.7281%" y="405" width="0.0278%" height="15" fill="rgb(213,79,30)" fg:x="577" fg:w="22"/><text x="0.9781%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 0.03%)</title><rect x="0.7281%" y="389" width="0.0278%" height="15" fill="rgb(246,177,23)" fg:x="577" fg:w="22"/><text x="0.9781%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (22 samples, 0.03%)</title><rect x="0.7281%" y="373" width="0.0278%" height="15" fill="rgb(230,62,27)" fg:x="577" fg:w="22"/><text x="0.9781%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (22 samples, 0.03%)</title><rect x="0.7281%" y="357" width="0.0278%" height="15" fill="rgb(216,154,8)" fg:x="577" fg:w="22"/><text x="0.9781%" y="367.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::scalar_flux_sum::{{closure}} (22 samples, 0.03%)</title><rect x="0.7281%" y="341" width="0.0278%" height="15" fill="rgb(244,35,45)" fg:x="577" fg:w="22"/><text x="0.9781%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (22 samples, 0.03%)</title><rect x="0.7281%" y="325" width="0.0278%" height="15" fill="rgb(251,115,12)" fg:x="577" fg:w="22"/><text x="0.9781%" y="335.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (22 samples, 0.03%)</title><rect x="0.7281%" y="309" width="0.0278%" height="15" fill="rgb(240,54,50)" fg:x="577" fg:w="22"/><text x="0.9781%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 0.03%)</title><rect x="0.7281%" y="293" width="0.0278%" height="15" fill="rgb(233,84,52)" fg:x="577" fg:w="22"/><text x="0.9781%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (22 samples, 0.03%)</title><rect x="0.7281%" y="277" width="0.0278%" height="15" fill="rgb(207,117,47)" fg:x="577" fg:w="22"/><text x="0.9781%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (22 samples, 0.03%)</title><rect x="0.7281%" y="261" width="0.0278%" height="15" fill="rgb(249,43,39)" fg:x="577" fg:w="22"/><text x="0.9781%" y="271.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::scalar_flux_sum::{{closure}}::{{closure}} (22 samples, 0.03%)</title><rect x="0.7281%" y="245" width="0.0278%" height="15" fill="rgb(209,38,44)" fg:x="577" fg:w="22"/><text x="0.9781%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (22 samples, 0.03%)</title><rect x="0.7281%" y="229" width="0.0278%" height="15" fill="rgb(236,212,23)" fg:x="577" fg:w="22"/><text x="0.9781%" y="239.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (22 samples, 0.03%)</title><rect x="0.7281%" y="213" width="0.0278%" height="15" fill="rgb(242,79,21)" fg:x="577" fg:w="22"/><text x="0.9781%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22 samples, 0.03%)</title><rect x="0.7281%" y="197" width="0.0278%" height="15" fill="rgb(211,96,35)" fg:x="577" fg:w="22"/><text x="0.9781%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (22 samples, 0.03%)</title><rect x="0.7281%" y="181" width="0.0278%" height="15" fill="rgb(253,215,40)" fg:x="577" fg:w="22"/><text x="0.9781%" y="191.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::{{closure}} (21 samples, 0.03%)</title><rect x="0.7294%" y="165" width="0.0265%" height="15" fill="rgb(211,81,21)" fg:x="578" fg:w="21"/><text x="0.9794%" y="175.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (21 samples, 0.03%)</title><rect x="0.7294%" y="149" width="0.0265%" height="15" fill="rgb(208,190,38)" fg:x="578" fg:w="21"/><text x="0.9794%" y="159.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (23 samples, 0.03%)</title><rect x="0.7584%" y="341" width="0.0290%" height="15" fill="rgb(235,213,38)" fg:x="601" fg:w="23"/><text x="1.0084%" y="351.50"></text></g><g><title>fastiron::montecarlo::MonteCarlo&lt;T&gt;::clear_cross_section_cache (26 samples, 0.03%)</title><rect x="0.7559%" y="453" width="0.0328%" height="15" fill="rgb(237,122,38)" fg:x="599" fg:w="26"/><text x="1.0059%" y="463.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (26 samples, 0.03%)</title><rect x="0.7559%" y="437" width="0.0328%" height="15" fill="rgb(244,218,35)" fg:x="599" fg:w="26"/><text x="1.0059%" y="447.50"></text></g><g><title>fastiron::montecarlo::MonteCarlo&lt;T&gt;::clear_cross_section_cache::{{closure}} (26 samples, 0.03%)</title><rect x="0.7559%" y="421" width="0.0328%" height="15" fill="rgb(240,68,47)" fg:x="599" fg:w="26"/><text x="1.0059%" y="431.50"></text></g><g><title>fastiron::geometry::mc_domain::MCDomain&lt;T&gt;::clear_cross_section_cache (26 samples, 0.03%)</title><rect x="0.7559%" y="405" width="0.0328%" height="15" fill="rgb(210,16,53)" fg:x="599" fg:w="26"/><text x="1.0059%" y="415.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (26 samples, 0.03%)</title><rect x="0.7559%" y="389" width="0.0328%" height="15" fill="rgb(235,124,12)" fg:x="599" fg:w="26"/><text x="1.0059%" y="399.50"></text></g><g><title>fastiron::geometry::mc_domain::MCDomain&lt;T&gt;::clear_cross_section_cache::{{closure}} (24 samples, 0.03%)</title><rect x="0.7584%" y="373" width="0.0303%" height="15" fill="rgb(224,169,11)" fg:x="601" fg:w="24"/><text x="1.0084%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (24 samples, 0.03%)</title><rect x="0.7584%" y="357" width="0.0303%" height="15" fill="rgb(250,166,2)" fg:x="601" fg:w="24"/><text x="1.0084%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (9 samples, 0.01%)</title><rect x="0.7887%" y="373" width="0.0114%" height="15" fill="rgb(242,216,29)" fg:x="625" fg:w="9"/><text x="1.0387%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (9 samples, 0.01%)</title><rect x="0.7887%" y="357" width="0.0114%" height="15" fill="rgb(230,116,27)" fg:x="625" fg:w="9"/><text x="1.0387%" y="367.50"></text></g><g><title>fastiron::simulation::population_control::population_control_guts::{{closure}}::{{closure}} (8 samples, 0.01%)</title><rect x="0.7899%" y="341" width="0.0101%" height="15" fill="rgb(228,99,48)" fg:x="626" fg:w="8"/><text x="1.0399%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (8 samples, 0.01%)</title><rect x="0.7899%" y="325" width="0.0101%" height="15" fill="rgb(253,11,6)" fg:x="626" fg:w="8"/><text x="1.0399%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10 samples, 0.01%)</title><rect x="0.7887%" y="389" width="0.0126%" height="15" fill="rgb(247,143,39)" fg:x="625" fg:w="10"/><text x="1.0387%" y="399.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (11 samples, 0.01%)</title><rect x="0.7887%" y="421" width="0.0139%" height="15" fill="rgb(236,97,10)" fg:x="625" fg:w="11"/><text x="1.0387%" y="431.50"></text></g><g><title>fastiron::simulation::population_control::population_control_guts::{{closure}} (11 samples, 0.01%)</title><rect x="0.7887%" y="405" width="0.0139%" height="15" fill="rgb(233,208,19)" fg:x="625" fg:w="11"/><text x="1.0387%" y="415.50"></text></g><g><title>fastiron::simulation::population_control::population_control (29 samples, 0.04%)</title><rect x="0.7887%" y="453" width="0.0366%" height="15" fill="rgb(216,164,2)" fg:x="625" fg:w="29"/><text x="1.0387%" y="463.50"></text></g><g><title>fastiron::simulation::population_control::population_control_guts (29 samples, 0.04%)</title><rect x="0.7887%" y="437" width="0.0366%" height="15" fill="rgb(220,129,5)" fg:x="625" fg:w="29"/><text x="1.0387%" y="447.50"></text></g><g><title>fastiron::particles::particle_container::ParticleContainer&lt;T&gt;::clean_extra_vaults (16 samples, 0.02%)</title><rect x="0.8051%" y="421" width="0.0202%" height="15" fill="rgb(242,17,10)" fg:x="638" fg:w="16"/><text x="1.0551%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (16 samples, 0.02%)</title><rect x="0.8051%" y="405" width="0.0202%" height="15" fill="rgb(242,107,0)" fg:x="638" fg:w="16"/><text x="1.0551%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (16 samples, 0.02%)</title><rect x="0.8051%" y="389" width="0.0202%" height="15" fill="rgb(251,28,31)" fg:x="638" fg:w="16"/><text x="1.0551%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (16 samples, 0.02%)</title><rect x="0.8051%" y="373" width="0.0202%" height="15" fill="rgb(233,223,10)" fg:x="638" fg:w="16"/><text x="1.0551%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (16 samples, 0.02%)</title><rect x="0.8051%" y="357" width="0.0202%" height="15" fill="rgb(215,21,27)" fg:x="638" fg:w="16"/><text x="1.0551%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.01%)</title><rect x="0.8253%" y="405" width="0.0114%" height="15" fill="rgb(232,23,21)" fg:x="654" fg:w="9"/><text x="1.0753%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (9 samples, 0.01%)</title><rect x="0.8253%" y="389" width="0.0114%" height="15" fill="rgb(244,5,23)" fg:x="654" fg:w="9"/><text x="1.0753%" y="399.50"></text></g><g><title>fastiron::simulation::population_control::roulette_low_weight_particles (15 samples, 0.02%)</title><rect x="0.8253%" y="453" width="0.0189%" height="15" fill="rgb(226,81,46)" fg:x="654" fg:w="15"/><text x="1.0753%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (15 samples, 0.02%)</title><rect x="0.8253%" y="437" width="0.0189%" height="15" fill="rgb(247,70,30)" fg:x="654" fg:w="15"/><text x="1.0753%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (15 samples, 0.02%)</title><rect x="0.8253%" y="421" width="0.0189%" height="15" fill="rgb(212,68,19)" fg:x="654" fg:w="15"/><text x="1.0753%" y="431.50"></text></g><g><title>fastiron::simulation::mct::cell_position_3dg (12 samples, 0.02%)</title><rect x="0.8657%" y="101" width="0.0151%" height="15" fill="rgb(240,187,13)" fg:x="686" fg:w="12"/><text x="1.1157%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (12 samples, 0.02%)</title><rect x="0.8657%" y="85" width="0.0151%" height="15" fill="rgb(223,113,26)" fg:x="686" fg:w="12"/><text x="1.1157%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (12 samples, 0.02%)</title><rect x="0.8657%" y="69" width="0.0151%" height="15" fill="rgb(206,192,2)" fg:x="686" fg:w="12"/><text x="1.1157%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (12 samples, 0.02%)</title><rect x="0.8657%" y="53" width="0.0151%" height="15" fill="rgb(241,108,4)" fg:x="686" fg:w="12"/><text x="1.1157%" y="63.50"></text></g><g><title>fastiron::simulation::mct::cell_position_3dg::{{closure}} (12 samples, 0.02%)</title><rect x="0.8657%" y="37" width="0.0151%" height="15" fill="rgb(247,173,49)" fg:x="686" fg:w="12"/><text x="1.1157%" y="47.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::cross (10 samples, 0.01%)</title><rect x="0.8808%" y="85" width="0.0126%" height="15" fill="rgb(224,114,35)" fg:x="698" fg:w="10"/><text x="1.1308%" y="95.50"></text></g><g><title>fastiron::simulation::mct::mct_cell_volume_3dg_vector_tetdet (19 samples, 0.02%)</title><rect x="0.8808%" y="101" width="0.0240%" height="15" fill="rgb(245,159,27)" fg:x="698" fg:w="19"/><text x="1.1308%" y="111.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::dot (9 samples, 0.01%)</title><rect x="0.8934%" y="85" width="0.0114%" height="15" fill="rgb(245,172,44)" fg:x="708" fg:w="9"/><text x="1.1434%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (52 samples, 0.07%)</title><rect x="0.8442%" y="245" width="0.0656%" height="15" fill="rgb(236,23,11)" fg:x="669" fg:w="52"/><text x="1.0942%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (52 samples, 0.07%)</title><rect x="0.8442%" y="229" width="0.0656%" height="15" fill="rgb(205,117,38)" fg:x="669" fg:w="52"/><text x="1.0942%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (52 samples, 0.07%)</title><rect x="0.8442%" y="213" width="0.0656%" height="15" fill="rgb(237,72,25)" fg:x="669" fg:w="52"/><text x="1.0942%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (52 samples, 0.07%)</title><rect x="0.8442%" y="197" width="0.0656%" height="15" fill="rgb(244,70,9)" fg:x="669" fg:w="52"/><text x="1.0942%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (52 samples, 0.07%)</title><rect x="0.8442%" y="181" width="0.0656%" height="15" fill="rgb(217,125,39)" fg:x="669" fg:w="52"/><text x="1.0942%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (52 samples, 0.07%)</title><rect x="0.8442%" y="165" width="0.0656%" height="15" fill="rgb(235,36,10)" fg:x="669" fg:w="52"/><text x="1.0942%" y="175.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (52 samples, 0.07%)</title><rect x="0.8442%" y="149" width="0.0656%" height="15" fill="rgb(251,123,47)" fg:x="669" fg:w="52"/><text x="1.0942%" y="159.50"></text></g><g><title>fastiron::simulation::population_control::source_now::{{closure}}::{{closure}}::{{closure}} (49 samples, 0.06%)</title><rect x="0.8480%" y="133" width="0.0618%" height="15" fill="rgb(221,13,13)" fg:x="672" fg:w="49"/><text x="1.0980%" y="143.50"></text></g><g><title>fastiron::simulation::mct::generate_coordinate_3dg (43 samples, 0.05%)</title><rect x="0.8556%" y="117" width="0.0543%" height="15" fill="rgb(238,131,9)" fg:x="678" fg:w="43"/><text x="1.1056%" y="127.50"></text></g><g><title>fastiron::cycle_init (123 samples, 0.16%)</title><rect x="0.7559%" y="469" width="0.1552%" height="15" fill="rgb(211,50,8)" fg:x="599" fg:w="123"/><text x="1.0059%" y="479.50"></text></g><g><title>fastiron::simulation::population_control::source_now (53 samples, 0.07%)</title><rect x="0.8442%" y="453" width="0.0669%" height="15" fill="rgb(245,182,24)" fg:x="669" fg:w="53"/><text x="1.0942%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (53 samples, 0.07%)</title><rect x="0.8442%" y="437" width="0.0669%" height="15" fill="rgb(242,14,37)" fg:x="669" fg:w="53"/><text x="1.0942%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (53 samples, 0.07%)</title><rect x="0.8442%" y="421" width="0.0669%" height="15" fill="rgb(246,228,12)" fg:x="669" fg:w="53"/><text x="1.0942%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (53 samples, 0.07%)</title><rect x="0.8442%" y="405" width="0.0669%" height="15" fill="rgb(213,55,15)" fg:x="669" fg:w="53"/><text x="1.0942%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (53 samples, 0.07%)</title><rect x="0.8442%" y="389" width="0.0669%" height="15" fill="rgb(209,9,3)" fg:x="669" fg:w="53"/><text x="1.0942%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (53 samples, 0.07%)</title><rect x="0.8442%" y="373" width="0.0669%" height="15" fill="rgb(230,59,30)" fg:x="669" fg:w="53"/><text x="1.0942%" y="383.50"></text></g><g><title>fastiron::simulation::population_control::source_now::{{closure}} (53 samples, 0.07%)</title><rect x="0.8442%" y="357" width="0.0669%" height="15" fill="rgb(209,121,21)" fg:x="669" fg:w="53"/><text x="1.0942%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (53 samples, 0.07%)</title><rect x="0.8442%" y="341" width="0.0669%" height="15" fill="rgb(220,109,13)" fg:x="669" fg:w="53"/><text x="1.0942%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (53 samples, 0.07%)</title><rect x="0.8442%" y="325" width="0.0669%" height="15" fill="rgb(232,18,1)" fg:x="669" fg:w="53"/><text x="1.0942%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (53 samples, 0.07%)</title><rect x="0.8442%" y="309" width="0.0669%" height="15" fill="rgb(215,41,42)" fg:x="669" fg:w="53"/><text x="1.0942%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (53 samples, 0.07%)</title><rect x="0.8442%" y="293" width="0.0669%" height="15" fill="rgb(224,123,36)" fg:x="669" fg:w="53"/><text x="1.0942%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (53 samples, 0.07%)</title><rect x="0.8442%" y="277" width="0.0669%" height="15" fill="rgb(240,125,3)" fg:x="669" fg:w="53"/><text x="1.0942%" y="287.50"></text></g><g><title>fastiron::simulation::population_control::source_now::{{closure}}::{{closure}} (53 samples, 0.07%)</title><rect x="0.8442%" y="261" width="0.0669%" height="15" fill="rgb(205,98,50)" fg:x="669" fg:w="53"/><text x="1.0942%" y="271.50"></text></g><g><title>fastiron::main (213 samples, 0.27%)</title><rect x="0.9174%" y="421" width="0.2688%" height="15" fill="rgb(205,185,37)" fg:x="727" fg:w="213"/><text x="1.1674%" y="431.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_energy_groups (90 samples, 0.11%)</title><rect x="1.2455%" y="405" width="0.1136%" height="15" fill="rgb(238,207,15)" fg:x="987" fg:w="90"/><text x="1.4955%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (10 samples, 0.01%)</title><rect x="1.3464%" y="389" width="0.0126%" height="15" fill="rgb(213,199,42)" fg:x="1067" fg:w="10"/><text x="1.5964%" y="399.50"></text></g><g><title>fastiron::main (134 samples, 0.17%)</title><rect x="1.3591%" y="405" width="0.1691%" height="15" fill="rgb(235,201,11)" fg:x="1077" fg:w="134"/><text x="1.6091%" y="415.50"></text></g><g><title>fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt;::new (22 samples, 0.03%)</title><rect x="1.5282%" y="405" width="0.0278%" height="15" fill="rgb(207,46,11)" fg:x="1211" fg:w="22"/><text x="1.7782%" y="415.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt; as core::clone::Clone&gt;::clone (22 samples, 0.03%)</title><rect x="1.5282%" y="389" width="0.0278%" height="15" fill="rgb(241,35,35)" fg:x="1211" fg:w="22"/><text x="1.7782%" y="399.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::clone::Clone&gt;::clone (19 samples, 0.02%)</title><rect x="1.5319%" y="373" width="0.0240%" height="15" fill="rgb(243,32,47)" fg:x="1214" fg:w="19"/><text x="1.7819%" y="383.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::Species as core::clone::Clone&gt;::clone (163 samples, 0.21%)</title><rect x="1.5950%" y="373" width="0.2057%" height="15" fill="rgb(247,202,23)" fg:x="1264" fg:w="163"/><text x="1.8450%" y="383.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt; as core::clone::Clone&gt;::clone (183 samples, 0.23%)</title><rect x="1.5786%" y="389" width="0.2309%" height="15" fill="rgb(219,102,11)" fg:x="1251" fg:w="183"/><text x="1.8286%" y="399.50"></text></g><g><title>fastiron::particles::mc_particle::MCParticle&lt;T&gt;::new (228 samples, 0.29%)</title><rect x="1.5559%" y="405" width="0.2877%" height="15" fill="rgb(243,110,44)" fg:x="1233" fg:w="228"/><text x="1.8059%" y="415.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::length (27 samples, 0.03%)</title><rect x="1.8096%" y="389" width="0.0341%" height="15" fill="rgb(222,74,54)" fg:x="1434" fg:w="27"/><text x="2.0596%" y="399.50"></text></g><g><title>fastiron::main (787 samples, 0.99%)</title><rect x="1.8726%" y="389" width="0.9931%" height="15" fill="rgb(216,99,12)" fg:x="1484" fg:w="787"/><text x="2.1226%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (160 samples, 0.20%)</title><rect x="4.9403%" y="373" width="0.2019%" height="15" fill="rgb(226,22,26)" fg:x="3915" fg:w="160"/><text x="5.1903%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (160 samples, 0.20%)</title><rect x="4.9403%" y="357" width="0.2019%" height="15" fill="rgb(217,163,10)" fg:x="3915" fg:w="160"/><text x="5.1903%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (160 samples, 0.20%)</title><rect x="4.9403%" y="341" width="0.2019%" height="15" fill="rgb(213,25,53)" fg:x="3915" fg:w="160"/><text x="5.1903%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::SubAssign&gt;::sub_assign (2,996 samples, 3.78%)</title><rect x="5.1473%" y="373" width="3.7806%" height="15" fill="rgb(252,105,26)" fg:x="4079" fg:w="2996"/><text x="5.3973%" y="383.50">&lt;f64..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (40 samples, 0.05%)</title><rect x="8.9342%" y="373" width="0.0505%" height="15" fill="rgb(220,39,43)" fg:x="7080" fg:w="40"/><text x="9.1842%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (24 samples, 0.03%)</title><rect x="8.9847%" y="373" width="0.0303%" height="15" fill="rgb(229,68,48)" fg:x="7120" fg:w="24"/><text x="9.2347%" y="383.50"></text></g><g><title>core::ptr::write (20 samples, 0.03%)</title><rect x="8.9897%" y="357" width="0.0252%" height="15" fill="rgb(252,8,32)" fg:x="7124" fg:w="20"/><text x="9.2397%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (859 samples, 1.08%)</title><rect x="9.0150%" y="373" width="1.0840%" height="15" fill="rgb(223,20,43)" fg:x="7144" fg:w="859"/><text x="9.2650%" y="383.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (329 samples, 0.42%)</title><rect x="10.1015%" y="341" width="0.4152%" height="15" fill="rgb(229,81,49)" fg:x="8005" fg:w="329"/><text x="10.3515%" y="351.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (329 samples, 0.42%)</title><rect x="10.1015%" y="325" width="0.4152%" height="15" fill="rgb(236,28,36)" fg:x="8005" fg:w="329"/><text x="10.3515%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (357 samples, 0.45%)</title><rect x="10.0989%" y="373" width="0.4505%" height="15" fill="rgb(249,185,26)" fg:x="8003" fg:w="357"/><text x="10.3489%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (357 samples, 0.45%)</title><rect x="10.0989%" y="357" width="0.4505%" height="15" fill="rgb(249,174,33)" fg:x="8003" fg:w="357"/><text x="10.3489%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (26 samples, 0.03%)</title><rect x="10.5166%" y="341" width="0.0328%" height="15" fill="rgb(233,201,37)" fg:x="8334" fg:w="26"/><text x="10.7666%" y="351.50"></text></g><g><title>_int_free (348 samples, 0.44%)</title><rect x="10.8649%" y="245" width="0.4391%" height="15" fill="rgb(221,78,26)" fg:x="8610" fg:w="348"/><text x="11.1149%" y="255.50"></text></g><g><title>tcache_put (98 samples, 0.12%)</title><rect x="11.1804%" y="229" width="0.1237%" height="15" fill="rgb(250,127,30)" fg:x="8860" fg:w="98"/><text x="11.4304%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (607 samples, 0.77%)</title><rect x="10.5494%" y="325" width="0.7660%" height="15" fill="rgb(230,49,44)" fg:x="8360" fg:w="607"/><text x="10.7994%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (607 samples, 0.77%)</title><rect x="10.5494%" y="309" width="0.7660%" height="15" fill="rgb(229,67,23)" fg:x="8360" fg:w="607"/><text x="10.7994%" y="319.50"></text></g><g><title>__rdl_dealloc (607 samples, 0.77%)</title><rect x="10.5494%" y="293" width="0.7660%" height="15" fill="rgb(249,83,47)" fg:x="8360" fg:w="607"/><text x="10.7994%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (607 samples, 0.77%)</title><rect x="10.5494%" y="277" width="0.7660%" height="15" fill="rgb(215,43,3)" fg:x="8360" fg:w="607"/><text x="10.7994%" y="287.50"></text></g><g><title>__GI___libc_free (607 samples, 0.77%)</title><rect x="10.5494%" y="261" width="0.7660%" height="15" fill="rgb(238,154,13)" fg:x="8360" fg:w="607"/><text x="10.7994%" y="271.50"></text></g><g><title>arena_for_chunk (9 samples, 0.01%)</title><rect x="11.3040%" y="245" width="0.0114%" height="15" fill="rgb(219,56,2)" fg:x="8958" fg:w="9"/><text x="11.5540%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (629 samples, 0.79%)</title><rect x="10.5494%" y="341" width="0.7937%" height="15" fill="rgb(233,0,4)" fg:x="8360" fg:w="629"/><text x="10.7994%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (22 samples, 0.03%)</title><rect x="11.3154%" y="325" width="0.0278%" height="15" fill="rgb(235,30,7)" fg:x="8967" fg:w="22"/><text x="11.5654%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (638 samples, 0.81%)</title><rect x="10.5494%" y="373" width="0.8051%" height="15" fill="rgb(250,79,13)" fg:x="8360" fg:w="638"/><text x="10.7994%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (638 samples, 0.81%)</title><rect x="10.5494%" y="357" width="0.8051%" height="15" fill="rgb(211,146,34)" fg:x="8360" fg:w="638"/><text x="10.7994%" y="367.50"></text></g><g><title>fastiron::main (9 samples, 0.01%)</title><rect x="11.3432%" y="341" width="0.0114%" height="15" fill="rgb(228,22,38)" fg:x="8989" fg:w="9"/><text x="11.5932%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (153 samples, 0.19%)</title><rect x="11.8265%" y="357" width="0.1931%" height="15" fill="rgb(235,168,5)" fg:x="9372" fg:w="153"/><text x="12.0765%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (153 samples, 0.19%)</title><rect x="11.8265%" y="341" width="0.1931%" height="15" fill="rgb(221,155,16)" fg:x="9372" fg:w="153"/><text x="12.0765%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (153 samples, 0.19%)</title><rect x="11.8265%" y="325" width="0.1931%" height="15" fill="rgb(215,215,53)" fg:x="9372" fg:w="153"/><text x="12.0765%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::le (9 samples, 0.01%)</title><rect x="12.0208%" y="357" width="0.0114%" height="15" fill="rgb(223,4,10)" fg:x="9526" fg:w="9"/><text x="12.2708%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (126 samples, 0.16%)</title><rect x="12.0322%" y="357" width="0.1590%" height="15" fill="rgb(234,103,6)" fg:x="9535" fg:w="126"/><text x="12.2822%" y="367.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_energy_groups (667 samples, 0.84%)</title><rect x="11.3545%" y="373" width="0.8417%" height="15" fill="rgb(227,97,0)" fg:x="8998" fg:w="667"/><text x="11.6045%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (161 samples, 0.20%)</title><rect x="12.2113%" y="357" width="0.2032%" height="15" fill="rgb(234,150,53)" fg:x="9677" fg:w="161"/><text x="12.4613%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (161 samples, 0.20%)</title><rect x="12.2113%" y="341" width="0.2032%" height="15" fill="rgb(228,201,54)" fg:x="9677" fg:w="161"/><text x="12.4613%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (161 samples, 0.20%)</title><rect x="12.2113%" y="325" width="0.2032%" height="15" fill="rgb(222,22,37)" fg:x="9677" fg:w="161"/><text x="12.4613%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (131 samples, 0.17%)</title><rect x="12.4145%" y="357" width="0.1653%" height="15" fill="rgb(237,53,32)" fg:x="9838" fg:w="131"/><text x="12.6645%" y="367.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_number_reactions (314 samples, 0.40%)</title><rect x="12.1962%" y="373" width="0.3962%" height="15" fill="rgb(233,25,53)" fg:x="9665" fg:w="314"/><text x="12.4462%" y="383.50"></text></g><g><title>fastiron::main (10 samples, 0.01%)</title><rect x="12.5798%" y="357" width="0.0126%" height="15" fill="rgb(210,40,34)" fg:x="9969" fg:w="10"/><text x="12.8298%" y="367.50"></text></g><g><title>__GI___libc_malloc (34 samples, 0.04%)</title><rect x="12.6896%" y="229" width="0.0429%" height="15" fill="rgb(241,220,44)" fg:x="10056" fg:w="34"/><text x="12.9396%" y="239.50"></text></g><g><title>tcache_get (13 samples, 0.02%)</title><rect x="12.7161%" y="213" width="0.0164%" height="15" fill="rgb(235,28,35)" fg:x="10077" fg:w="13"/><text x="12.9661%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (39 samples, 0.05%)</title><rect x="12.6846%" y="245" width="0.0492%" height="15" fill="rgb(210,56,17)" fg:x="10052" fg:w="39"/><text x="12.9346%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (53 samples, 0.07%)</title><rect x="12.6757%" y="309" width="0.0669%" height="15" fill="rgb(224,130,29)" fg:x="10045" fg:w="53"/><text x="12.9257%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (53 samples, 0.07%)</title><rect x="12.6757%" y="293" width="0.0669%" height="15" fill="rgb(235,212,8)" fg:x="10045" fg:w="53"/><text x="12.9257%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (51 samples, 0.06%)</title><rect x="12.6782%" y="277" width="0.0644%" height="15" fill="rgb(223,33,50)" fg:x="10047" fg:w="51"/><text x="12.9282%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (51 samples, 0.06%)</title><rect x="12.6782%" y="261" width="0.0644%" height="15" fill="rgb(219,149,13)" fg:x="10047" fg:w="51"/><text x="12.9282%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (64 samples, 0.08%)</title><rect x="12.6757%" y="357" width="0.0808%" height="15" fill="rgb(250,156,29)" fg:x="10045" fg:w="64"/><text x="12.9257%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (64 samples, 0.08%)</title><rect x="12.6757%" y="341" width="0.0808%" height="15" fill="rgb(216,193,19)" fg:x="10045" fg:w="64"/><text x="12.9257%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (64 samples, 0.08%)</title><rect x="12.6757%" y="325" width="0.0808%" height="15" fill="rgb(216,135,14)" fg:x="10045" fg:w="64"/><text x="12.9257%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.01%)</title><rect x="12.7426%" y="309" width="0.0139%" height="15" fill="rgb(241,47,5)" fg:x="10098" fg:w="11"/><text x="12.9926%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned_erms (11 samples, 0.01%)</title><rect x="12.7426%" y="293" width="0.0139%" height="15" fill="rgb(233,42,35)" fg:x="10098" fg:w="11"/><text x="12.9926%" y="303.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (22 samples, 0.03%)</title><rect x="12.7628%" y="357" width="0.0278%" height="15" fill="rgb(231,13,6)" fg:x="10114" fg:w="22"/><text x="13.0128%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (24 samples, 0.03%)</title><rect x="12.7906%" y="357" width="0.0303%" height="15" fill="rgb(207,181,40)" fg:x="10136" fg:w="24"/><text x="13.0406%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (31 samples, 0.04%)</title><rect x="12.8208%" y="357" width="0.0391%" height="15" fill="rgb(254,173,49)" fg:x="10160" fg:w="31"/><text x="13.0708%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (22 samples, 0.03%)</title><rect x="12.9104%" y="309" width="0.0278%" height="15" fill="rgb(221,1,38)" fg:x="10231" fg:w="22"/><text x="13.1604%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.03%)</title><rect x="13.0114%" y="293" width="0.0278%" height="15" fill="rgb(206,124,46)" fg:x="10311" fg:w="22"/><text x="13.2614%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.03%)</title><rect x="13.0114%" y="277" width="0.0278%" height="15" fill="rgb(249,21,11)" fg:x="10311" fg:w="22"/><text x="13.2614%" y="287.50"></text></g><g><title>alloc::alloc::alloc (19 samples, 0.02%)</title><rect x="13.0152%" y="261" width="0.0240%" height="15" fill="rgb(222,201,40)" fg:x="10314" fg:w="19"/><text x="13.2652%" y="271.50"></text></g><g><title>__rdl_alloc (19 samples, 0.02%)</title><rect x="13.0152%" y="245" width="0.0240%" height="15" fill="rgb(235,61,29)" fg:x="10314" fg:w="19"/><text x="13.2652%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (19 samples, 0.02%)</title><rect x="13.0152%" y="229" width="0.0240%" height="15" fill="rgb(219,207,3)" fg:x="10314" fg:w="19"/><text x="13.2652%" y="239.50"></text></g><g><title>checked_request2size (14 samples, 0.02%)</title><rect x="13.5641%" y="277" width="0.0177%" height="15" fill="rgb(222,56,46)" fg:x="10749" fg:w="14"/><text x="13.8141%" y="287.50"></text></g><g><title>__GI___libc_malloc (585 samples, 0.74%)</title><rect x="13.0391%" y="293" width="0.7382%" height="15" fill="rgb(239,76,54)" fg:x="10333" fg:w="585"/><text x="13.2891%" y="303.50"></text></g><g><title>tcache_get (155 samples, 0.20%)</title><rect x="13.5818%" y="277" width="0.1956%" height="15" fill="rgb(231,124,27)" fg:x="10763" fg:w="155"/><text x="13.8318%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (682 samples, 0.86%)</title><rect x="12.9483%" y="309" width="0.8606%" height="15" fill="rgb(249,195,6)" fg:x="10261" fg:w="682"/><text x="13.1983%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (25 samples, 0.03%)</title><rect x="13.7774%" y="293" width="0.0315%" height="15" fill="rgb(237,174,47)" fg:x="10918" fg:w="25"/><text x="14.0274%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::array (22 samples, 0.03%)</title><rect x="13.8089%" y="309" width="0.0278%" height="15" fill="rgb(206,201,31)" fg:x="10943" fg:w="22"/><text x="14.0589%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (22 samples, 0.03%)</title><rect x="13.8089%" y="293" width="0.0278%" height="15" fill="rgb(231,57,52)" fg:x="10943" fg:w="22"/><text x="14.0589%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (804 samples, 1.01%)</title><rect x="12.8865%" y="325" width="1.0146%" height="15" fill="rgb(248,177,22)" fg:x="10212" fg:w="804"/><text x="13.1365%" y="335.50"></text></g><g><title>core::cmp::max (51 samples, 0.06%)</title><rect x="13.8367%" y="309" width="0.0644%" height="15" fill="rgb(215,211,37)" fg:x="10965" fg:w="51"/><text x="14.0867%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (51 samples, 0.06%)</title><rect x="13.8367%" y="293" width="0.0644%" height="15" fill="rgb(241,128,51)" fg:x="10965" fg:w="51"/><text x="14.0867%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (829 samples, 1.05%)</title><rect x="12.8865%" y="341" width="1.0461%" height="15" fill="rgb(227,165,31)" fg:x="10212" fg:w="829"/><text x="13.1365%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (25 samples, 0.03%)</title><rect x="13.9010%" y="325" width="0.0315%" height="15" fill="rgb(228,167,24)" fg:x="11016" fg:w="25"/><text x="14.1510%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (853 samples, 1.08%)</title><rect x="12.8650%" y="357" width="1.0764%" height="15" fill="rgb(228,143,12)" fg:x="10195" fg:w="853"/><text x="13.1150%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (25 samples, 0.03%)</title><rect x="13.9414%" y="357" width="0.0315%" height="15" fill="rgb(249,149,8)" fg:x="11048" fg:w="25"/><text x="14.1914%" y="367.50"></text></g><g><title>_int_malloc (45 samples, 0.06%)</title><rect x="14.0411%" y="197" width="0.0568%" height="15" fill="rgb(243,35,44)" fg:x="11127" fg:w="45"/><text x="14.2911%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (102 samples, 0.13%)</title><rect x="13.9729%" y="309" width="0.1287%" height="15" fill="rgb(246,89,9)" fg:x="11073" fg:w="102"/><text x="14.2229%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (102 samples, 0.13%)</title><rect x="13.9729%" y="293" width="0.1287%" height="15" fill="rgb(233,213,13)" fg:x="11073" fg:w="102"/><text x="14.2229%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (102 samples, 0.13%)</title><rect x="13.9729%" y="277" width="0.1287%" height="15" fill="rgb(233,141,41)" fg:x="11073" fg:w="102"/><text x="14.2229%" y="287.50"></text></g><g><title>alloc::alloc::alloc_zeroed (102 samples, 0.13%)</title><rect x="13.9729%" y="261" width="0.1287%" height="15" fill="rgb(239,167,4)" fg:x="11073" fg:w="102"/><text x="14.2229%" y="271.50"></text></g><g><title>__rdl_alloc_zeroed (102 samples, 0.13%)</title><rect x="13.9729%" y="245" width="0.1287%" height="15" fill="rgb(209,217,16)" fg:x="11073" fg:w="102"/><text x="14.2229%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (102 samples, 0.13%)</title><rect x="13.9729%" y="229" width="0.1287%" height="15" fill="rgb(219,88,35)" fg:x="11073" fg:w="102"/><text x="14.2229%" y="239.50"></text></g><g><title>__libc_calloc (99 samples, 0.12%)</title><rect x="13.9767%" y="213" width="0.1249%" height="15" fill="rgb(220,193,23)" fg:x="11076" fg:w="99"/><text x="14.2267%" y="223.50"></text></g><g><title>alloc::vec::from_elem (104 samples, 0.13%)</title><rect x="13.9729%" y="357" width="0.1312%" height="15" fill="rgb(230,90,52)" fg:x="11073" fg:w="104"/><text x="14.2229%" y="367.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (104 samples, 0.13%)</title><rect x="13.9729%" y="341" width="0.1312%" height="15" fill="rgb(252,106,19)" fg:x="11073" fg:w="104"/><text x="14.2229%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (104 samples, 0.13%)</title><rect x="13.9729%" y="325" width="0.1312%" height="15" fill="rgb(206,74,20)" fg:x="11073" fg:w="104"/><text x="14.2229%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (14 samples, 0.02%)</title><rect x="14.1118%" y="293" width="0.0177%" height="15" fill="rgb(230,138,44)" fg:x="11183" fg:w="14"/><text x="14.3618%" y="303.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (18 samples, 0.02%)</title><rect x="14.1294%" y="293" width="0.0227%" height="15" fill="rgb(235,182,43)" fg:x="11197" fg:w="18"/><text x="14.3794%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (62 samples, 0.08%)</title><rect x="14.1042%" y="357" width="0.0782%" height="15" fill="rgb(242,16,51)" fg:x="11177" fg:w="62"/><text x="14.3542%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (62 samples, 0.08%)</title><rect x="14.1042%" y="341" width="0.0782%" height="15" fill="rgb(248,9,4)" fg:x="11177" fg:w="62"/><text x="14.3542%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (61 samples, 0.08%)</title><rect x="14.1054%" y="325" width="0.0770%" height="15" fill="rgb(210,31,22)" fg:x="11178" fg:w="61"/><text x="14.3554%" y="335.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearDataReaction&lt;T&gt;::sample_collision::{{closure}} (61 samples, 0.08%)</title><rect x="14.1054%" y="309" width="0.0770%" height="15" fill="rgb(239,54,39)" fg:x="11178" fg:w="61"/><text x="14.3554%" y="319.50"></text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (21 samples, 0.03%)</title><rect x="14.1559%" y="293" width="0.0265%" height="15" fill="rgb(230,99,41)" fg:x="11218" fg:w="21"/><text x="14.4059%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (37 samples, 0.05%)</title><rect x="14.1837%" y="357" width="0.0467%" height="15" fill="rgb(253,106,12)" fg:x="11240" fg:w="37"/><text x="14.4337%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (37 samples, 0.05%)</title><rect x="14.1837%" y="341" width="0.0467%" height="15" fill="rgb(213,46,41)" fg:x="11240" fg:w="37"/><text x="14.4337%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (37 samples, 0.05%)</title><rect x="14.1837%" y="325" width="0.0467%" height="15" fill="rgb(215,133,35)" fg:x="11240" fg:w="37"/><text x="14.4337%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (37 samples, 0.05%)</title><rect x="14.1837%" y="309" width="0.0467%" height="15" fill="rgb(213,28,5)" fg:x="11240" fg:w="37"/><text x="14.4337%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (37 samples, 0.05%)</title><rect x="14.1837%" y="293" width="0.0467%" height="15" fill="rgb(215,77,49)" fg:x="11240" fg:w="37"/><text x="14.4337%" y="303.50"></text></g><g><title>__rdl_dealloc (37 samples, 0.05%)</title><rect x="14.1837%" y="277" width="0.0467%" height="15" fill="rgb(248,100,22)" fg:x="11240" fg:w="37"/><text x="14.4337%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (35 samples, 0.04%)</title><rect x="14.1862%" y="261" width="0.0442%" height="15" fill="rgb(208,67,9)" fg:x="11242" fg:w="35"/><text x="14.4362%" y="271.50"></text></g><g><title>__GI___libc_free (32 samples, 0.04%)</title><rect x="14.1900%" y="245" width="0.0404%" height="15" fill="rgb(219,133,21)" fg:x="11245" fg:w="32"/><text x="14.4400%" y="255.50"></text></g><g><title>_int_free (27 samples, 0.03%)</title><rect x="14.1963%" y="229" width="0.0341%" height="15" fill="rgb(246,46,29)" fg:x="11250" fg:w="27"/><text x="14.4463%" y="239.50"></text></g><g><title>fastiron::main (29 samples, 0.04%)</title><rect x="14.2304%" y="357" width="0.0366%" height="15" fill="rgb(246,185,52)" fg:x="11277" fg:w="29"/><text x="14.4804%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (10 samples, 0.01%)</title><rect x="14.3338%" y="341" width="0.0126%" height="15" fill="rgb(252,136,11)" fg:x="11359" fg:w="10"/><text x="14.5838%" y="351.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearDataReaction&lt;T&gt;::sample_collision (1,394 samples, 1.76%)</title><rect x="12.5924%" y="373" width="1.7591%" height="15" fill="rgb(219,138,53)" fg:x="9979" fg:w="1394"/><text x="12.8424%" y="383.50"></text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (67 samples, 0.08%)</title><rect x="14.2670%" y="357" width="0.0845%" height="15" fill="rgb(211,51,23)" fg:x="11306" fg:w="67"/><text x="14.5170%" y="367.50"></text></g><g><title>fastiron::main (822 samples, 1.04%)</title><rect x="14.3515%" y="373" width="1.0373%" height="15" fill="rgb(247,221,28)" fg:x="11373" fg:w="822"/><text x="14.6015%" y="383.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt; as core::clone::Clone&gt;::clone (39 samples, 0.05%)</title><rect x="15.3888%" y="357" width="0.0492%" height="15" fill="rgb(251,222,45)" fg:x="12195" fg:w="39"/><text x="15.6388%" y="367.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::clone::Clone&gt;::clone (28 samples, 0.04%)</title><rect x="15.4027%" y="341" width="0.0353%" height="15" fill="rgb(217,162,53)" fg:x="12206" fg:w="28"/><text x="15.6527%" y="351.50"></text></g><g><title>fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt;::new (42 samples, 0.05%)</title><rect x="15.3888%" y="373" width="0.0530%" height="15" fill="rgb(229,93,14)" fg:x="12195" fg:w="42"/><text x="15.6388%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (14 samples, 0.02%)</title><rect x="15.4632%" y="357" width="0.0177%" height="15" fill="rgb(209,67,49)" fg:x="12254" fg:w="14"/><text x="15.7132%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (58 samples, 0.07%)</title><rect x="15.4809%" y="357" width="0.0732%" height="15" fill="rgb(213,87,29)" fg:x="12268" fg:w="58"/><text x="15.7309%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (9 samples, 0.01%)</title><rect x="15.5541%" y="357" width="0.0114%" height="15" fill="rgb(205,151,52)" fg:x="12326" fg:w="9"/><text x="15.8041%" y="367.50"></text></g><g><title>[libm.so.6] (12 samples, 0.02%)</title><rect x="15.5655%" y="293" width="0.0151%" height="15" fill="rgb(253,215,39)" fg:x="12335" fg:w="12"/><text x="15.8155%" y="303.50"></text></g><g><title>__ieee754_log_fma (439 samples, 0.55%)</title><rect x="15.5806%" y="293" width="0.5540%" height="15" fill="rgb(221,220,41)" fg:x="12347" fg:w="439"/><text x="15.8306%" y="303.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::ln (470 samples, 0.59%)</title><rect x="15.5655%" y="357" width="0.5931%" height="15" fill="rgb(218,133,21)" fg:x="12335" fg:w="470"/><text x="15.8155%" y="367.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln (470 samples, 0.59%)</title><rect x="15.5655%" y="341" width="0.5931%" height="15" fill="rgb(221,193,43)" fg:x="12335" fg:w="470"/><text x="15.8155%" y="351.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::log_wrapper (470 samples, 0.59%)</title><rect x="15.5655%" y="325" width="0.5931%" height="15" fill="rgb(240,128,52)" fg:x="12335" fg:w="470"/><text x="15.8155%" y="335.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln::{{closure}} (470 samples, 0.59%)</title><rect x="15.5655%" y="309" width="0.5931%" height="15" fill="rgb(253,114,12)" fg:x="12335" fg:w="470"/><text x="15.8155%" y="319.50"></text></g><g><title>__log (19 samples, 0.02%)</title><rect x="16.1346%" y="293" width="0.0240%" height="15" fill="rgb(215,223,47)" fg:x="12786" fg:w="19"/><text x="16.3846%" y="303.50"></text></g><g><title>fastiron::main (10 samples, 0.01%)</title><rect x="16.1585%" y="341" width="0.0126%" height="15" fill="rgb(248,225,23)" fg:x="12805" fg:w="10"/><text x="16.4085%" y="351.50"></text></g><g><title>do_cos (320 samples, 0.40%)</title><rect x="16.4526%" y="309" width="0.4038%" height="15" fill="rgb(250,108,0)" fg:x="13038" fg:w="320"/><text x="16.7026%" y="319.50"></text></g><g><title>do_sin (723 samples, 0.91%)</title><rect x="16.8564%" y="309" width="0.9123%" height="15" fill="rgb(228,208,7)" fg:x="13358" fg:w="723"/><text x="17.1064%" y="319.50"></text></g><g><title>libc_feholdsetround_sse_ctx (23 samples, 0.03%)</title><rect x="17.7687%" y="309" width="0.0290%" height="15" fill="rgb(244,45,10)" fg:x="14081" fg:w="23"/><text x="18.0187%" y="319.50"></text></g><g><title>libc_feresetround_sse_ctx (14 samples, 0.02%)</title><rect x="17.7977%" y="309" width="0.0177%" height="15" fill="rgb(207,125,25)" fg:x="14104" fg:w="14"/><text x="18.0477%" y="319.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::sin (1,566 samples, 1.98%)</title><rect x="16.1585%" y="357" width="1.9761%" height="15" fill="rgb(210,195,18)" fg:x="12805" fg:w="1566"/><text x="16.4085%" y="367.50">&lt;..</text></g><g><title>std::f64::&lt;impl f64&gt;::sin (1,556 samples, 1.96%)</title><rect x="16.1712%" y="341" width="1.9635%" height="15" fill="rgb(249,80,12)" fg:x="12815" fg:w="1556"/><text x="16.4212%" y="351.50">s..</text></g><g><title>__sincos (1,556 samples, 1.96%)</title><rect x="16.1712%" y="325" width="1.9635%" height="15" fill="rgb(221,65,9)" fg:x="12815" fg:w="1556"/><text x="16.4212%" y="335.50">_..</text></g><g><title>reduce_sincos (253 samples, 0.32%)</title><rect x="17.8154%" y="309" width="0.3193%" height="15" fill="rgb(235,49,36)" fg:x="14118" fg:w="253"/><text x="18.0654%" y="319.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::sqrt (91 samples, 0.11%)</title><rect x="18.1347%" y="357" width="0.1148%" height="15" fill="rgb(225,32,20)" fg:x="14371" fg:w="91"/><text x="18.3847%" y="367.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (85 samples, 0.11%)</title><rect x="18.1422%" y="341" width="0.1073%" height="15" fill="rgb(215,141,46)" fg:x="14377" fg:w="85"/><text x="18.3922%" y="351.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (45 samples, 0.06%)</title><rect x="18.2495%" y="357" width="0.0568%" height="15" fill="rgb(250,160,47)" fg:x="14462" fg:w="45"/><text x="18.4995%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (45 samples, 0.06%)</title><rect x="18.2495%" y="341" width="0.0568%" height="15" fill="rgb(216,222,40)" fg:x="14462" fg:w="45"/><text x="18.4995%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (54 samples, 0.07%)</title><rect x="18.3429%" y="341" width="0.0681%" height="15" fill="rgb(234,217,39)" fg:x="14536" fg:w="54"/><text x="18.5929%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (82 samples, 0.10%)</title><rect x="18.4110%" y="341" width="0.1035%" height="15" fill="rgb(207,178,40)" fg:x="14590" fg:w="82"/><text x="18.6610%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (30 samples, 0.04%)</title><rect x="18.5145%" y="341" width="0.0379%" height="15" fill="rgb(221,136,13)" fg:x="14672" fg:w="30"/><text x="18.7645%" y="351.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::sqrt (11 samples, 0.01%)</title><rect x="18.5524%" y="341" width="0.0139%" height="15" fill="rgb(249,199,10)" fg:x="14702" fg:w="11"/><text x="18.8024%" y="351.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (11 samples, 0.01%)</title><rect x="18.5524%" y="325" width="0.0139%" height="15" fill="rgb(249,222,13)" fg:x="14702" fg:w="11"/><text x="18.8024%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (11 samples, 0.01%)</title><rect x="18.5662%" y="341" width="0.0139%" height="15" fill="rgb(244,185,38)" fg:x="14713" fg:w="11"/><text x="18.8162%" y="351.50"></text></g><g><title>fastiron::data::direction_cosine::DirectionCosine&lt;T&gt;::rotate_3d_vector (218 samples, 0.28%)</title><rect x="18.3063%" y="357" width="0.2751%" height="15" fill="rgb(236,202,9)" fg:x="14507" fg:w="218"/><text x="18.5563%" y="367.50"></text></g><g><title>fastiron::main (19 samples, 0.02%)</title><rect x="18.5814%" y="357" width="0.0240%" height="15" fill="rgb(250,229,37)" fg:x="14725" fg:w="19"/><text x="18.8314%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (14 samples, 0.02%)</title><rect x="18.6987%" y="341" width="0.0177%" height="15" fill="rgb(206,174,23)" fg:x="14818" fg:w="14"/><text x="18.9487%" y="351.50"></text></g><g><title>fastiron::simulation::collision_event::update_trajectory (2,610 samples, 3.29%)</title><rect x="15.4418%" y="373" width="3.2935%" height="15" fill="rgb(211,33,43)" fg:x="12237" fg:w="2610"/><text x="15.6918%" y="383.50">fas..</text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (103 samples, 0.13%)</title><rect x="18.6054%" y="357" width="0.1300%" height="15" fill="rgb(245,58,50)" fg:x="14744" fg:w="103"/><text x="18.8554%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_mul (15 samples, 0.02%)</title><rect x="18.7164%" y="341" width="0.0189%" height="15" fill="rgb(244,68,36)" fg:x="14832" fg:w="15"/><text x="18.9664%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (426 samples, 0.54%)</title><rect x="24.2549%" y="357" width="0.5376%" height="15" fill="rgb(232,229,15)" fg:x="19221" fg:w="426"/><text x="24.5049%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (426 samples, 0.54%)</title><rect x="24.2549%" y="341" width="0.5376%" height="15" fill="rgb(254,30,23)" fg:x="19221" fg:w="426"/><text x="24.5049%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (426 samples, 0.54%)</title><rect x="24.2549%" y="325" width="0.5376%" height="15" fill="rgb(235,160,14)" fg:x="19221" fg:w="426"/><text x="24.5049%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (6,107 samples, 7.71%)</title><rect x="24.7924%" y="357" width="7.7064%" height="15" fill="rgb(212,155,44)" fg:x="19647" fg:w="6107"/><text x="25.0424%" y="367.50">&lt;f64 as cor..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f64&gt;::eq (11 samples, 0.01%)</title><rect x="32.4988%" y="357" width="0.0139%" height="15" fill="rgb(226,2,50)" fg:x="25754" fg:w="11"/><text x="32.7488%" y="367.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_reaction_cross_section (4,171 samples, 5.26%)</title><rect x="32.5127%" y="357" width="5.2634%" height="15" fill="rgb(234,177,6)" fg:x="25765" fg:w="4171"/><text x="32.7627%" y="367.50">fastir..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,600 samples, 3.28%)</title><rect x="34.4951%" y="341" width="3.2809%" height="15" fill="rgb(217,24,9)" fg:x="27336" fg:w="2600"/><text x="34.7451%" y="351.50">&lt;al..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,600 samples, 3.28%)</title><rect x="34.4951%" y="325" width="3.2809%" height="15" fill="rgb(220,13,46)" fg:x="27336" fg:w="2600"/><text x="34.7451%" y="335.50">cor..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,600 samples, 3.28%)</title><rect x="34.4951%" y="309" width="3.2809%" height="15" fill="rgb(239,221,27)" fg:x="27336" fg:w="2600"/><text x="34.7451%" y="319.50">&lt;us..</text></g><g><title>fastiron::simulation::macro_cross_section::macroscopic_cross_section (16,282 samples, 20.55%)</title><rect x="18.7353%" y="373" width="20.5461%" height="15" fill="rgb(222,198,25)" fg:x="14847" fg:w="16282"/><text x="18.9853%" y="383.50">fastiron::simulation::macro_cros..</text></g><g><title>fastiron::main (1,193 samples, 1.51%)</title><rect x="37.7760%" y="357" width="1.5054%" height="15" fill="rgb(211,99,13)" fg:x="29936" fg:w="1193"/><text x="38.0260%" y="367.50"></text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (21 samples, 0.03%)</title><rect x="39.2815%" y="373" width="0.0265%" height="15" fill="rgb(232,111,31)" fg:x="31129" fg:w="21"/><text x="39.5315%" y="383.50"></text></g><g><title>fastiron::utils::mc_rng_state::pseudo_des (11 samples, 0.01%)</title><rect x="39.3092%" y="341" width="0.0139%" height="15" fill="rgb(245,82,37)" fg:x="31151" fg:w="11"/><text x="39.5592%" y="351.50"></text></g><g><title>fastiron::simulation::collision_event::collision_event (28,893 samples, 36.46%)</title><rect x="2.8658%" y="389" width="36.4599%" height="15" fill="rgb(227,149,46)" fg:x="2271" fg:w="28893"/><text x="3.1158%" y="399.50">fastiron::simulation::collision_event::collision_event</text></g><g><title>fastiron::utils::mc_rng_state::spawn_rn_seed (14 samples, 0.02%)</title><rect x="39.3080%" y="373" width="0.0177%" height="15" fill="rgb(218,36,50)" fg:x="31150" fg:w="14"/><text x="39.5580%" y="383.50"></text></g><g><title>fastiron::utils::mc_rng_state::hash_state (14 samples, 0.02%)</title><rect x="39.3080%" y="357" width="0.0177%" height="15" fill="rgb(226,80,48)" fg:x="31150" fg:w="14"/><text x="39.5580%" y="367.50"></text></g><g><title>fastiron::simulation::mc_facet_crossing_event::facet_crossing_event (134 samples, 0.17%)</title><rect x="39.3256%" y="389" width="0.1691%" height="15" fill="rgb(238,224,15)" fg:x="31164" fg:w="134"/><text x="39.5756%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (77 samples, 0.10%)</title><rect x="39.3976%" y="373" width="0.0972%" height="15" fill="rgb(241,136,10)" fg:x="31221" fg:w="77"/><text x="39.6476%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (29 samples, 0.04%)</title><rect x="41.2551%" y="373" width="0.0366%" height="15" fill="rgb(208,32,45)" fg:x="32693" fg:w="29"/><text x="41.5051%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (29 samples, 0.04%)</title><rect x="41.2551%" y="357" width="0.0366%" height="15" fill="rgb(207,135,9)" fg:x="32693" fg:w="29"/><text x="41.5051%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (29 samples, 0.04%)</title><rect x="41.2551%" y="341" width="0.0366%" height="15" fill="rgb(206,86,44)" fg:x="32693" fg:w="29"/><text x="41.5051%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (4,395 samples, 5.55%)</title><rect x="41.2917%" y="373" width="5.5460%" height="15" fill="rgb(245,177,15)" fg:x="32722" fg:w="4395"/><text x="41.5417%" y="383.50">&lt;f64 as..</text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (374 samples, 0.47%)</title><rect x="46.8377%" y="373" width="0.4719%" height="15" fill="rgb(206,64,50)" fg:x="37117" fg:w="374"/><text x="47.0877%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (9 samples, 0.01%)</title><rect x="47.3096%" y="373" width="0.0114%" height="15" fill="rgb(234,36,40)" fg:x="37491" fg:w="9"/><text x="47.5596%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::SubAssign&gt;::sub_assign (228 samples, 0.29%)</title><rect x="47.3210%" y="373" width="0.2877%" height="15" fill="rgb(213,64,8)" fg:x="37500" fg:w="228"/><text x="47.5710%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f64&gt;::eq (30 samples, 0.04%)</title><rect x="47.6087%" y="373" width="0.0379%" height="15" fill="rgb(210,75,36)" fg:x="37728" fg:w="30"/><text x="47.8587%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (131 samples, 0.17%)</title><rect x="47.6466%" y="373" width="0.1653%" height="15" fill="rgb(229,88,21)" fg:x="37758" fg:w="131"/><text x="47.8966%" y="383.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::length (33 samples, 0.04%)</title><rect x="47.8119%" y="373" width="0.0416%" height="15" fill="rgb(252,204,47)" fg:x="37889" fg:w="33"/><text x="48.0619%" y="383.50"></text></g><g><title>fastiron::main (52 samples, 0.07%)</title><rect x="47.8535%" y="373" width="0.0656%" height="15" fill="rgb(208,77,27)" fg:x="37922" fg:w="52"/><text x="48.1035%" y="383.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::AddAssign&gt;::add_assign (120 samples, 0.15%)</title><rect x="47.9191%" y="357" width="0.1514%" height="15" fill="rgb(221,76,26)" fg:x="37974" fg:w="120"/><text x="48.1691%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (120 samples, 0.15%)</title><rect x="47.9191%" y="341" width="0.1514%" height="15" fill="rgb(225,139,18)" fg:x="37974" fg:w="120"/><text x="48.1691%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (47 samples, 0.06%)</title><rect x="48.0706%" y="341" width="0.0593%" height="15" fill="rgb(230,137,11)" fg:x="38094" fg:w="47"/><text x="48.3206%" y="351.50"></text></g><g><title>fastiron::particles::mc_particle::MCParticle&lt;T&gt;::move_particle (182 samples, 0.23%)</title><rect x="47.9191%" y="373" width="0.2297%" height="15" fill="rgb(212,28,1)" fg:x="37974" fg:w="182"/><text x="48.1691%" y="383.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (62 samples, 0.08%)</title><rect x="48.0706%" y="357" width="0.0782%" height="15" fill="rgb(248,164,17)" fg:x="38094" fg:w="62"/><text x="48.3206%" y="367.50"></text></g><g><title>fastiron::main (15 samples, 0.02%)</title><rect x="48.1299%" y="341" width="0.0189%" height="15" fill="rgb(222,171,42)" fg:x="38141" fg:w="15"/><text x="48.3799%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (56 samples, 0.07%)</title><rect x="52.9049%" y="357" width="0.0707%" height="15" fill="rgb(243,84,45)" fg:x="41925" fg:w="56"/><text x="53.1549%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (56 samples, 0.07%)</title><rect x="52.9049%" y="341" width="0.0707%" height="15" fill="rgb(252,49,23)" fg:x="41925" fg:w="56"/><text x="53.1549%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (56 samples, 0.07%)</title><rect x="52.9049%" y="325" width="0.0707%" height="15" fill="rgb(215,19,7)" fg:x="41925" fg:w="56"/><text x="53.1549%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::gt (56 samples, 0.07%)</title><rect x="52.9844%" y="357" width="0.0707%" height="15" fill="rgb(238,81,41)" fg:x="41988" fg:w="56"/><text x="53.2344%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (173 samples, 0.22%)</title><rect x="53.0588%" y="293" width="0.2183%" height="15" fill="rgb(210,199,37)" fg:x="42047" fg:w="173"/><text x="53.3088%" y="303.50"></text></g><g><title>fastiron::main (51 samples, 0.06%)</title><rect x="53.2771%" y="293" width="0.0644%" height="15" fill="rgb(244,192,49)" fg:x="42220" fg:w="51"/><text x="53.5271%" y="303.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (167 samples, 0.21%)</title><rect x="53.4614%" y="277" width="0.2107%" height="15" fill="rgb(226,211,11)" fg:x="42366" fg:w="167"/><text x="53.7114%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f64&gt;::eq (56 samples, 0.07%)</title><rect x="53.6721%" y="277" width="0.0707%" height="15" fill="rgb(236,162,54)" fg:x="42533" fg:w="56"/><text x="53.9221%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (54 samples, 0.07%)</title><rect x="53.7428%" y="261" width="0.0681%" height="15" fill="rgb(220,229,9)" fg:x="42589" fg:w="54"/><text x="53.9928%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (54 samples, 0.07%)</title><rect x="53.7428%" y="245" width="0.0681%" height="15" fill="rgb(250,87,22)" fg:x="42589" fg:w="54"/><text x="53.9928%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (54 samples, 0.07%)</title><rect x="53.7428%" y="229" width="0.0681%" height="15" fill="rgb(239,43,17)" fg:x="42589" fg:w="54"/><text x="53.9928%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (53 samples, 0.07%)</title><rect x="53.8109%" y="261" width="0.0669%" height="15" fill="rgb(231,177,25)" fg:x="42643" fg:w="53"/><text x="54.0609%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (121 samples, 0.15%)</title><rect x="53.8778%" y="229" width="0.1527%" height="15" fill="rgb(219,179,1)" fg:x="42696" fg:w="121"/><text x="54.1278%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (121 samples, 0.15%)</title><rect x="53.8778%" y="213" width="0.1527%" height="15" fill="rgb(238,219,53)" fg:x="42696" fg:w="121"/><text x="54.1278%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (112 samples, 0.14%)</title><rect x="53.8892%" y="197" width="0.1413%" height="15" fill="rgb(232,167,36)" fg:x="42705" fg:w="112"/><text x="54.1392%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (252 samples, 0.32%)</title><rect x="54.2766%" y="197" width="0.3180%" height="15" fill="rgb(244,19,51)" fg:x="43012" fg:w="252"/><text x="54.5266%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (252 samples, 0.32%)</title><rect x="54.2766%" y="181" width="0.3180%" height="15" fill="rgb(224,6,22)" fg:x="43012" fg:w="252"/><text x="54.5266%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (252 samples, 0.32%)</title><rect x="54.2766%" y="165" width="0.3180%" height="15" fill="rgb(224,145,5)" fg:x="43012" fg:w="252"/><text x="54.5266%" y="175.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_total_cross_section::{{closure}} (1,386 samples, 1.75%)</title><rect x="54.0305%" y="213" width="1.7490%" height="15" fill="rgb(234,130,49)" fg:x="42817" fg:w="1386"/><text x="54.2805%" y="223.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (939 samples, 1.18%)</title><rect x="54.5946%" y="197" width="1.1849%" height="15" fill="rgb(254,6,2)" fg:x="43264" fg:w="939"/><text x="54.8446%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,236 samples, 2.82%)</title><rect x="53.0550%" y="341" width="2.8216%" height="15" fill="rgb(208,96,46)" fg:x="42044" fg:w="2236"/><text x="53.3050%" y="351.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2,233 samples, 2.82%)</title><rect x="53.0588%" y="325" width="2.8178%" height="15" fill="rgb(239,3,39)" fg:x="42047" fg:w="2233"/><text x="53.3088%" y="335.50">co..</text></g><g><title>fastiron::simulation::macro_cross_section::weighted_macroscopic_cross_section::{{closure}} (2,233 samples, 2.82%)</title><rect x="53.0588%" y="309" width="2.8178%" height="15" fill="rgb(233,210,1)" fg:x="42047" fg:w="2233"/><text x="53.3088%" y="319.50">fa..</text></g><g><title>fastiron::simulation::macro_cross_section::macroscopic_total_cross_section (2,009 samples, 2.54%)</title><rect x="53.3415%" y="293" width="2.5351%" height="15" fill="rgb(244,137,37)" fg:x="42271" fg:w="2009"/><text x="53.5915%" y="303.50">fa..</text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_total_cross_section (1,691 samples, 2.13%)</title><rect x="53.7428%" y="277" width="2.1339%" height="15" fill="rgb(240,136,2)" fg:x="42589" fg:w="1691"/><text x="53.9928%" y="287.50">f..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1,584 samples, 2.00%)</title><rect x="53.8778%" y="261" width="1.9988%" height="15" fill="rgb(239,18,37)" fg:x="42696" fg:w="1584"/><text x="54.1278%" y="271.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (1,584 samples, 2.00%)</title><rect x="53.8778%" y="245" width="1.9988%" height="15" fill="rgb(218,185,22)" fg:x="42696" fg:w="1584"/><text x="54.1278%" y="255.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1,463 samples, 1.85%)</title><rect x="54.0305%" y="229" width="1.8461%" height="15" fill="rgb(225,218,4)" fg:x="42817" fg:w="1463"/><text x="54.2805%" y="239.50">c..</text></g><g><title>fastiron::main (77 samples, 0.10%)</title><rect x="55.7795%" y="213" width="0.0972%" height="15" fill="rgb(230,182,32)" fg:x="44203" fg:w="77"/><text x="56.0295%" y="223.50"></text></g><g><title>fastiron::simulation::macro_cross_section::weighted_macroscopic_cross_section (6,128 samples, 7.73%)</title><rect x="48.1488%" y="373" width="7.7329%" height="15" fill="rgb(242,56,43)" fg:x="38156" fg:w="6128"/><text x="48.3988%" y="383.50">fastiron::s..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,240 samples, 2.83%)</title><rect x="53.0550%" y="357" width="2.8266%" height="15" fill="rgb(233,99,24)" fg:x="42044" fg:w="2240"/><text x="53.3050%" y="367.50">co..</text></g><g><title>fastiron::simulation::mc_segment_outcome::find_min (62 samples, 0.08%)</title><rect x="55.8817%" y="373" width="0.0782%" height="15" fill="rgb(234,209,42)" fg:x="44284" fg:w="62"/><text x="56.1317%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (62 samples, 0.08%)</title><rect x="55.8817%" y="357" width="0.0782%" height="15" fill="rgb(227,7,12)" fg:x="44284" fg:w="62"/><text x="56.1317%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (62 samples, 0.08%)</title><rect x="55.8817%" y="341" width="0.0782%" height="15" fill="rgb(245,203,43)" fg:x="44284" fg:w="62"/><text x="56.1317%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (62 samples, 0.08%)</title><rect x="55.8817%" y="325" width="0.0782%" height="15" fill="rgb(238,205,33)" fg:x="44284" fg:w="62"/><text x="56.1317%" y="335.50"></text></g><g><title>fastiron::simulation::mc_segment_outcome::find_min::{{closure}} (62 samples, 0.08%)</title><rect x="55.8817%" y="309" width="0.0782%" height="15" fill="rgb(231,56,7)" fg:x="44284" fg:w="62"/><text x="56.1317%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (33 samples, 0.04%)</title><rect x="55.9183%" y="293" width="0.0416%" height="15" fill="rgb(244,186,29)" fg:x="44313" fg:w="33"/><text x="56.1683%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (26 samples, 0.03%)</title><rect x="55.9801%" y="357" width="0.0328%" height="15" fill="rgb(234,111,31)" fg:x="44362" fg:w="26"/><text x="56.2301%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (26 samples, 0.03%)</title><rect x="55.9801%" y="341" width="0.0328%" height="15" fill="rgb(241,149,10)" fg:x="44362" fg:w="26"/><text x="56.2301%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (26 samples, 0.03%)</title><rect x="55.9801%" y="325" width="0.0328%" height="15" fill="rgb(249,206,44)" fg:x="44362" fg:w="26"/><text x="56.2301%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::gt (16 samples, 0.02%)</title><rect x="56.0129%" y="357" width="0.0202%" height="15" fill="rgb(251,153,30)" fg:x="44388" fg:w="16"/><text x="56.2629%" y="367.50"></text></g><g><title>fastiron::main (801 samples, 1.01%)</title><rect x="56.0356%" y="357" width="1.0108%" height="15" fill="rgb(239,152,38)" fg:x="44406" fg:w="801"/><text x="56.2856%" y="367.50"></text></g><g><title>__memset_avx2_unaligned_erms (578 samples, 0.73%)</title><rect x="56.3170%" y="341" width="0.7294%" height="15" fill="rgb(249,139,47)" fg:x="44629" fg:w="578"/><text x="56.5670%" y="351.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (757 samples, 0.96%)</title><rect x="57.0464%" y="309" width="0.9553%" height="15" fill="rgb(244,64,35)" fg:x="45207" fg:w="757"/><text x="57.2964%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (757 samples, 0.96%)</title><rect x="57.0464%" y="293" width="0.9553%" height="15" fill="rgb(216,46,15)" fg:x="45207" fg:w="757"/><text x="57.2964%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (753 samples, 0.95%)</title><rect x="57.0515%" y="277" width="0.9502%" height="15" fill="rgb(250,74,19)" fg:x="45211" fg:w="753"/><text x="57.3015%" y="287.50"></text></g><g><title>fastiron::main (3,046 samples, 3.84%)</title><rect x="58.0017%" y="293" width="3.8437%" height="15" fill="rgb(249,42,33)" fg:x="45964" fg:w="3046"/><text x="58.2517%" y="303.50">fast..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (318 samples, 0.40%)</title><rect x="69.0268%" y="277" width="0.4013%" height="15" fill="rgb(242,149,17)" fg:x="54701" fg:w="318"/><text x="69.2768%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (318 samples, 0.40%)</title><rect x="69.0268%" y="261" width="0.4013%" height="15" fill="rgb(244,29,21)" fg:x="54701" fg:w="318"/><text x="69.2768%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (318 samples, 0.40%)</title><rect x="69.0268%" y="245" width="0.4013%" height="15" fill="rgb(220,130,37)" fg:x="54701" fg:w="318"/><text x="69.2768%" y="255.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (1,255 samples, 1.58%)</title><rect x="69.4281%" y="277" width="1.5837%" height="15" fill="rgb(211,67,2)" fg:x="55019" fg:w="1255"/><text x="69.6781%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (893 samples, 1.13%)</title><rect x="71.0118%" y="277" width="1.1269%" height="15" fill="rgb(235,68,52)" fg:x="56274" fg:w="893"/><text x="71.2618%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::le (297 samples, 0.37%)</title><rect x="72.1387%" y="277" width="0.3748%" height="15" fill="rgb(246,142,3)" fg:x="57167" fg:w="297"/><text x="72.3887%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (7,508 samples, 9.47%)</title><rect x="72.5134%" y="277" width="9.4743%" height="15" fill="rgb(241,25,7)" fg:x="57464" fg:w="7508"/><text x="72.7634%" y="287.50">core::option::..</text></g><g><title>fastiron::main (1,044 samples, 1.32%)</title><rect x="81.9877%" y="277" width="1.3174%" height="15" fill="rgb(242,119,39)" fg:x="64972" fg:w="1044"/><text x="82.2377%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (1,014 samples, 1.28%)</title><rect x="88.1231%" y="261" width="1.2796%" height="15" fill="rgb(241,98,45)" fg:x="69834" fg:w="1014"/><text x="88.3731%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (741 samples, 0.94%)</title><rect x="89.4026%" y="261" width="0.9351%" height="15" fill="rgb(254,28,30)" fg:x="70848" fg:w="741"/><text x="89.6526%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (462 samples, 0.58%)</title><rect x="90.3377%" y="261" width="0.5830%" height="15" fill="rgb(241,142,54)" fg:x="71589" fg:w="462"/><text x="90.5877%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Neg&gt;::neg (75 samples, 0.09%)</title><rect x="90.9207%" y="261" width="0.0946%" height="15" fill="rgb(222,85,15)" fg:x="72051" fg:w="75"/><text x="91.1707%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (762 samples, 0.96%)</title><rect x="91.0153%" y="261" width="0.9616%" height="15" fill="rgb(210,85,47)" fg:x="72126" fg:w="762"/><text x="91.2653%" y="271.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::abs (97 samples, 0.12%)</title><rect x="91.9769%" y="261" width="0.1224%" height="15" fill="rgb(224,206,25)" fg:x="72888" fg:w="97"/><text x="92.2269%" y="271.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::abs (97 samples, 0.12%)</title><rect x="91.9769%" y="245" width="0.1224%" height="15" fill="rgb(243,201,19)" fg:x="72888" fg:w="97"/><text x="92.2269%" y="255.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Add&gt;::add (596 samples, 0.75%)</title><rect x="92.0993%" y="261" width="0.7521%" height="15" fill="rgb(236,59,4)" fg:x="72985" fg:w="596"/><text x="92.3493%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (596 samples, 0.75%)</title><rect x="92.0993%" y="245" width="0.7521%" height="15" fill="rgb(254,179,45)" fg:x="72985" fg:w="596"/><text x="92.3493%" y="255.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (631 samples, 0.80%)</title><rect x="92.8514%" y="261" width="0.7963%" height="15" fill="rgb(226,14,10)" fg:x="73581" fg:w="631"/><text x="93.1014%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (631 samples, 0.80%)</title><rect x="92.8514%" y="245" width="0.7963%" height="15" fill="rgb(244,27,41)" fg:x="73581" fg:w="631"/><text x="93.1014%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::gt (129 samples, 0.16%)</title><rect x="93.6476%" y="261" width="0.1628%" height="15" fill="rgb(235,35,32)" fg:x="74212" fg:w="129"/><text x="93.8976%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (756 samples, 0.95%)</title><rect x="93.8104%" y="261" width="0.9540%" height="15" fill="rgb(218,68,31)" fg:x="74341" fg:w="756"/><text x="94.0604%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (30,223 samples, 38.14%)</title><rect x="57.0464%" y="341" width="38.1382%" height="15" fill="rgb(207,120,37)" fg:x="45207" fg:w="30223"/><text x="57.2964%" y="351.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (30,223 samples, 38.14%)</title><rect x="57.0464%" y="325" width="38.1382%" height="15" fill="rgb(227,98,0)" fg:x="45207" fg:w="30223"/><text x="57.2964%" y="335.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (29,466 samples, 37.18%)</title><rect x="58.0017%" y="309" width="37.1829%" height="15" fill="rgb(207,7,3)" fg:x="45964" fg:w="29466"/><text x="58.2517%" y="319.50">core::iter::traits::iterator::Iterator::for_each::call::{{clo..</text></g><g><title>fastiron::simulation::mct::mct_nf_3dg::{{closure}} (26,420 samples, 33.34%)</title><rect x="61.8454%" y="293" width="33.3392%" height="15" fill="rgb(206,98,19)" fg:x="49010" fg:w="26420"/><text x="62.0954%" y="303.50">fastiron::simulation::mct::mct_nf_3dg::{{closure}}</text></g><g><title>fastiron::simulation::mct::mct_nf_3dg_dist_to_segment (9,414 samples, 11.88%)</title><rect x="83.3052%" y="277" width="11.8795%" height="15" fill="rgb(217,5,26)" fg:x="66016" fg:w="9414"/><text x="83.5552%" y="287.50">fastiron::simulati..</text></g><g><title>fastiron::main (333 samples, 0.42%)</title><rect x="94.7644%" y="261" width="0.4202%" height="15" fill="rgb(235,190,38)" fg:x="75097" fg:w="333"/><text x="95.0144%" y="271.50"></text></g><g><title>fastiron::main (88 samples, 0.11%)</title><rect x="95.1846%" y="341" width="0.1110%" height="15" fill="rgb(247,86,24)" fg:x="75430" fg:w="88"/><text x="95.4346%" y="351.50"></text></g><g><title>&lt;fastiron::geometry::facets::MCNearestFacet&lt;T&gt; as core::default::Default&gt;::default (21 samples, 0.03%)</title><rect x="95.6780%" y="309" width="0.0265%" height="15" fill="rgb(205,101,16)" fg:x="75821" fg:w="21"/><text x="95.9280%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f64&gt;::eq (17 samples, 0.02%)</title><rect x="95.7045%" y="309" width="0.0215%" height="15" fill="rgb(246,168,33)" fg:x="75842" fg:w="17"/><text x="95.9545%" y="319.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (72 samples, 0.09%)</title><rect x="95.7701%" y="245" width="0.0909%" height="15" fill="rgb(231,114,1)" fg:x="75894" fg:w="72"/><text x="96.0201%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (72 samples, 0.09%)</title><rect x="95.7701%" y="229" width="0.0909%" height="15" fill="rgb(207,184,53)" fg:x="75894" fg:w="72"/><text x="96.0201%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (568 samples, 0.72%)</title><rect x="95.7260%" y="261" width="0.7168%" height="15" fill="rgb(224,95,51)" fg:x="75859" fg:w="568"/><text x="95.9760%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (461 samples, 0.58%)</title><rect x="95.8610%" y="245" width="0.5817%" height="15" fill="rgb(212,188,45)" fg:x="75966" fg:w="461"/><text x="96.1110%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (723 samples, 0.91%)</title><rect x="95.7260%" y="277" width="0.9123%" height="15" fill="rgb(223,154,38)" fg:x="75859" fg:w="723"/><text x="95.9760%" y="287.50"></text></g><g><title>fastiron::main (155 samples, 0.20%)</title><rect x="96.4427%" y="261" width="0.1956%" height="15" fill="rgb(251,22,52)" fg:x="76427" fg:w="155"/><text x="96.6927%" y="271.50"></text></g><g><title>fastiron::main (338 samples, 0.43%)</title><rect x="96.6383%" y="261" width="0.4265%" height="15" fill="rgb(229,209,22)" fg:x="76582" fg:w="338"/><text x="96.8883%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::gt (692 samples, 0.87%)</title><rect x="98.0794%" y="245" width="0.8732%" height="15" fill="rgb(234,138,34)" fg:x="77724" fg:w="692"/><text x="98.3294%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3,102 samples, 3.91%)</title><rect x="95.7260%" y="293" width="3.9144%" height="15" fill="rgb(212,95,11)" fg:x="75859" fg:w="3102"/><text x="95.9760%" y="303.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2,379 samples, 3.00%)</title><rect x="96.6383%" y="277" width="3.0020%" height="15" fill="rgb(240,179,47)" fg:x="76582" fg:w="2379"/><text x="96.8883%" y="287.50">cor..</text></g><g><title>fastiron::simulation::mct::mct_nf_compute_nearest::{{closure}} (2,041 samples, 2.58%)</title><rect x="97.0648%" y="261" width="2.5755%" height="15" fill="rgb(240,163,11)" fg:x="76920" fg:w="2041"/><text x="97.3148%" y="271.50">fa..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::le (545 samples, 0.69%)</title><rect x="98.9526%" y="245" width="0.6877%" height="15" fill="rgb(236,37,12)" fg:x="78416" fg:w="545"/><text x="99.2026%" y="255.50"></text></g><g><title>fastiron::simulation::mc_segment_outcome::outcome (47,713 samples, 60.21%)</title><rect x="39.4947%" y="389" width="60.2087%" height="15" fill="rgb(232,164,16)" fg:x="31298" fg:w="47713"/><text x="39.7447%" y="399.50">fastiron::simulation::mc_segment_outcome::outcome</text></g><g><title>fastiron::simulation::mct::nearest_facet (34,665 samples, 43.74%)</title><rect x="55.9599%" y="373" width="43.7435%" height="15" fill="rgb(244,205,15)" fg:x="44346" fg:w="34665"/><text x="56.2099%" y="383.50">fastiron::simulation::mct::nearest_facet</text></g><g><title>fastiron::simulation::mct::mct_nf_3dg (33,804 samples, 42.66%)</title><rect x="57.0464%" y="357" width="42.6570%" height="15" fill="rgb(223,117,47)" fg:x="45207" fg:w="33804"/><text x="57.2964%" y="367.50">fastiron::simulation::mct::mct_nf_3dg</text></g><g><title>fastiron::simulation::mct::mct_nf_find_nearest (3,493 samples, 4.41%)</title><rect x="95.2957%" y="341" width="4.4078%" height="15" fill="rgb(244,107,35)" fg:x="75518" fg:w="3493"/><text x="95.5457%" y="351.50">fasti..</text></g><g><title>fastiron::simulation::mct::mct_nf_compute_nearest (3,302 samples, 4.17%)</title><rect x="95.5367%" y="325" width="4.1668%" height="15" fill="rgb(205,140,8)" fg:x="75709" fg:w="3302"/><text x="95.7867%" y="335.50">fasti..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3,152 samples, 3.98%)</title><rect x="95.7260%" y="309" width="3.9775%" height="15" fill="rgb(228,84,46)" fg:x="75859" fg:w="3152"/><text x="95.9760%" y="319.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call (50 samples, 0.06%)</title><rect x="99.6404%" y="293" width="0.0631%" height="15" fill="rgb(254,188,9)" fg:x="78961" fg:w="50"/><text x="99.8904%" y="303.50"></text></g><g><title>&lt;fastiron::data::direction_cosine::DirectionCosine&lt;T&gt; as core::clone::Clone&gt;::clone (9 samples, 0.01%)</title><rect x="99.7224%" y="373" width="0.0114%" height="15" fill="rgb(206,112,54)" fg:x="79026" fg:w="9"/><text x="99.9724%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (10 samples, 0.01%)</title><rect x="99.7729%" y="357" width="0.0126%" height="15" fill="rgb(216,84,49)" fg:x="79066" fg:w="10"/><text x="100.0229%" y="367.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::dot (39 samples, 0.05%)</title><rect x="99.7388%" y="373" width="0.0492%" height="15" fill="rgb(214,194,35)" fg:x="79039" fg:w="39"/><text x="99.9888%" y="383.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (78,357 samples, 98.88%)</title><rect x="0.9111%" y="453" width="98.8782%" height="15" fill="rgb(249,28,3)" fg:x="722" fg:w="78357"/><text x="1.1611%" y="463.50">&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each</text></g><g><title>fastiron::cycle_tracking::{{closure}} (78,355 samples, 98.88%)</title><rect x="0.9136%" y="437" width="98.8757%" height="15" fill="rgb(222,56,52)" fg:x="724" fg:w="78355"/><text x="1.1636%" y="447.50">fastiron::cycle_tracking::{{closure}}</text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_guts (78,139 samples, 98.60%)</title><rect x="1.1862%" y="421" width="98.6031%" height="15" fill="rgb(245,217,50)" fg:x="940" fg:w="78139"/><text x="1.4362%" y="431.50">fastiron::simulation::cycle_tracking::cycle_tracking_guts</text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_function (77,618 samples, 97.95%)</title><rect x="1.8436%" y="405" width="97.9456%" height="15" fill="rgb(213,201,24)" fg:x="1461" fg:w="77618"/><text x="2.0936%" y="415.50">fastiron::simulation::cycle_tracking::cycle_tracking_function</text></g><g><title>fastiron::simulation::mct::reflect_particle (68 samples, 0.09%)</title><rect x="99.7035%" y="389" width="0.0858%" height="15" fill="rgb(248,116,28)" fg:x="79011" fg:w="68"/><text x="99.9535%" y="399.50"></text></g><g><title>fastiron::main (8 samples, 0.01%)</title><rect x="99.7893%" y="453" width="0.0101%" height="15" fill="rgb(219,72,43)" fg:x="79079" fg:w="8"/><text x="100.0393%" y="463.50"></text></g><g><title>fastiron::cycle_tracking (78,480 samples, 99.03%)</title><rect x="0.9111%" y="469" width="99.0334%" height="15" fill="rgb(209,138,14)" fg:x="722" fg:w="78480"/><text x="1.1611%" y="479.50">fastiron::cycle_tracking</text></g><g><title>fastiron::particles::particle_container::ParticleContainer&lt;T&gt;::clean_extra_vaults (115 samples, 0.15%)</title><rect x="99.7994%" y="453" width="0.1451%" height="15" fill="rgb(222,18,33)" fg:x="79087" fg:w="115"/><text x="100.0494%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (115 samples, 0.15%)</title><rect x="99.7994%" y="437" width="0.1451%" height="15" fill="rgb(213,199,7)" fg:x="79087" fg:w="115"/><text x="100.0494%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (115 samples, 0.15%)</title><rect x="99.7994%" y="421" width="0.1451%" height="15" fill="rgb(250,110,10)" fg:x="79087" fg:w="115"/><text x="100.0494%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (115 samples, 0.15%)</title><rect x="99.7994%" y="405" width="0.1451%" height="15" fill="rgb(248,123,6)" fg:x="79087" fg:w="115"/><text x="100.0494%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (115 samples, 0.15%)</title><rect x="99.7994%" y="389" width="0.1451%" height="15" fill="rgb(206,91,31)" fg:x="79087" fg:w="115"/><text x="100.0494%" y="399.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (16 samples, 0.02%)</title><rect x="99.9558%" y="85" width="0.0202%" height="15" fill="rgb(211,154,13)" fg:x="79211" fg:w="16"/><text x="100.2058%" y="95.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (16 samples, 0.02%)</title><rect x="99.9558%" y="69" width="0.0202%" height="15" fill="rgb(225,148,7)" fg:x="79211" fg:w="16"/><text x="100.2058%" y="79.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::assign_cells_to_domain (34 samples, 0.04%)</title><rect x="99.9445%" y="357" width="0.0429%" height="15" fill="rgb(220,160,43)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="367.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood (34 samples, 0.04%)</title><rect x="99.9445%" y="341" width="0.0429%" height="15" fill="rgb(213,52,39)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (34 samples, 0.04%)</title><rect x="99.9445%" y="325" width="0.0429%" height="15" fill="rgb(243,137,7)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (34 samples, 0.04%)</title><rect x="99.9445%" y="309" width="0.0429%" height="15" fill="rgb(230,79,13)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (34 samples, 0.04%)</title><rect x="99.9445%" y="293" width="0.0429%" height="15" fill="rgb(247,105,23)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="303.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood::{{closure}} (34 samples, 0.04%)</title><rect x="99.9445%" y="277" width="0.0429%" height="15" fill="rgb(223,179,41)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (34 samples, 0.04%)</title><rect x="99.9445%" y="261" width="0.0429%" height="15" fill="rgb(218,9,34)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (34 samples, 0.04%)</title><rect x="99.9445%" y="245" width="0.0429%" height="15" fill="rgb(222,106,8)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (34 samples, 0.04%)</title><rect x="99.9445%" y="229" width="0.0429%" height="15" fill="rgb(211,220,0)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="239.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood::{{closure}}::{{closure}} (34 samples, 0.04%)</title><rect x="99.9445%" y="213" width="0.0429%" height="15" fill="rgb(229,52,16)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (34 samples, 0.04%)</title><rect x="99.9445%" y="197" width="0.0429%" height="15" fill="rgb(212,155,18)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (34 samples, 0.04%)</title><rect x="99.9445%" y="181" width="0.0429%" height="15" fill="rgb(242,21,14)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (34 samples, 0.04%)</title><rect x="99.9445%" y="165" width="0.0429%" height="15" fill="rgb(222,19,48)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="175.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood::{{closure}}::{{closure}}::{{closure}} (34 samples, 0.04%)</title><rect x="99.9445%" y="149" width="0.0429%" height="15" fill="rgb(232,45,27)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (34 samples, 0.04%)</title><rect x="99.9445%" y="133" width="0.0429%" height="15" fill="rgb(249,103,42)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="143.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (34 samples, 0.04%)</title><rect x="99.9445%" y="117" width="0.0429%" height="15" fill="rgb(246,81,33)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (34 samples, 0.04%)</title><rect x="99.9445%" y="101" width="0.0429%" height="15" fill="rgb(252,33,42)" fg:x="79202" fg:w="34"/><text x="100.1945%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.01%)</title><rect x="99.9760%" y="85" width="0.0114%" height="15" fill="rgb(209,212,41)" fg:x="79227" fg:w="9"/><text x="100.2260%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (36 samples, 0.05%)</title><rect x="99.9445%" y="437" width="0.0454%" height="15" fill="rgb(207,154,6)" fg:x="79202" fg:w="36"/><text x="100.1945%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (36 samples, 0.05%)</title><rect x="99.9445%" y="421" width="0.0454%" height="15" fill="rgb(223,64,47)" fg:x="79202" fg:w="36"/><text x="100.1945%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (36 samples, 0.05%)</title><rect x="99.9445%" y="405" width="0.0454%" height="15" fill="rgb(211,161,38)" fg:x="79202" fg:w="36"/><text x="100.1945%" y="415.50"></text></g><g><title>fastiron::init::init_mesh::{{closure}} (36 samples, 0.05%)</title><rect x="99.9445%" y="389" width="0.0454%" height="15" fill="rgb(219,138,40)" fg:x="79202" fg:w="36"/><text x="100.1945%" y="399.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::build_mesh_partition (36 samples, 0.05%)</title><rect x="99.9445%" y="373" width="0.0454%" height="15" fill="rgb(241,228,46)" fg:x="79202" fg:w="36"/><text x="100.1945%" y="383.50"></text></g><g><title>fastiron::init::init_mesh (40 samples, 0.05%)</title><rect x="99.9445%" y="453" width="0.0505%" height="15" fill="rgb(223,209,38)" fg:x="79202" fg:w="40"/><text x="100.1945%" y="463.50"></text></g><g><title>fastiron::init::init_mc (42 samples, 0.05%)</title><rect x="99.9445%" y="469" width="0.0530%" height="15" fill="rgb(236,164,45)" fg:x="79202" fg:w="42"/><text x="100.1945%" y="479.50"></text></g><g><title>__libc_start_main_impl (78,707 samples, 99.32%)</title><rect x="0.6789%" y="565" width="99.3198%" height="15" fill="rgb(231,15,5)" fg:x="538" fg:w="78707"/><text x="0.9289%" y="575.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (78,707 samples, 99.32%)</title><rect x="0.6789%" y="549" width="99.3198%" height="15" fill="rgb(252,35,15)" fg:x="538" fg:w="78707"/><text x="0.9289%" y="559.50">__libc_start_call_main</text></g><g><title>main (78,707 samples, 99.32%)</title><rect x="0.6789%" y="533" width="99.3198%" height="15" fill="rgb(248,181,18)" fg:x="538" fg:w="78707"/><text x="0.9289%" y="543.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (78,707 samples, 99.32%)</title><rect x="0.6789%" y="517" width="99.3198%" height="15" fill="rgb(233,39,42)" fg:x="538" fg:w="78707"/><text x="0.9289%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (78,707 samples, 99.32%)</title><rect x="0.6789%" y="501" width="99.3198%" height="15" fill="rgb(238,110,33)" fg:x="538" fg:w="78707"/><text x="0.9289%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>fastiron::main (78,707 samples, 99.32%)</title><rect x="0.6789%" y="485" width="99.3198%" height="15" fill="rgb(233,195,10)" fg:x="538" fg:w="78707"/><text x="0.9289%" y="495.50">fastiron::main</text></g><g><title>all (79,246 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(254,105,3)" fg:x="0" fg:w="79246"/><text x="0.2500%" y="623.50"></text></g><g><title>fastiron (79,246 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(221,225,9)" fg:x="0" fg:w="79246"/><text x="0.2500%" y="607.50">fastiron</text></g><g><title>_start (78,713 samples, 99.33%)</title><rect x="0.6726%" y="581" width="99.3274%" height="15" fill="rgb(224,227,45)" fg:x="533" fg:w="78713"/><text x="0.9226%" y="591.50">_start</text></g></svg></svg>