<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="11104"><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (10 samples, 0.09%)</title><rect x="0.0270%" y="581" width="0.0901%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="10"/><text x="0.2770%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (10 samples, 0.09%)</title><rect x="0.0270%" y="565" width="0.0901%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="10"/><text x="0.2770%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (7 samples, 0.06%)</title><rect x="0.0540%" y="549" width="0.0630%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="7"/><text x="0.3040%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (7 samples, 0.06%)</title><rect x="0.0540%" y="533" width="0.0630%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="7"/><text x="0.3040%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (2 samples, 0.02%)</title><rect x="0.1351%" y="469" width="0.0180%" height="15" fill="rgb(208,68,35)" fg:x="15" fg:w="2"/><text x="0.3851%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (2 samples, 0.02%)</title><rect x="0.1351%" y="453" width="0.0180%" height="15" fill="rgb(232,128,0)" fg:x="15" fg:w="2"/><text x="0.3851%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="0.1351%" y="437" width="0.0180%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="2"/><text x="0.3851%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="0.1351%" y="421" width="0.0180%" height="15" fill="rgb(228,23,34)" fg:x="15" fg:w="2"/><text x="0.3851%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="0.1351%" y="405" width="0.0180%" height="15" fill="rgb(218,30,26)" fg:x="15" fg:w="2"/><text x="0.3851%" y="415.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="0.1351%" y="389" width="0.0180%" height="15" fill="rgb(220,122,19)" fg:x="15" fg:w="2"/><text x="0.3851%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="0.1351%" y="373" width="0.0180%" height="15" fill="rgb(250,228,42)" fg:x="15" fg:w="2"/><text x="0.3851%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (3 samples, 0.03%)</title><rect x="0.1531%" y="453" width="0.0270%" height="15" fill="rgb(240,193,28)" fg:x="17" fg:w="3"/><text x="0.4031%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.03%)</title><rect x="0.1531%" y="437" width="0.0270%" height="15" fill="rgb(216,20,37)" fg:x="17" fg:w="3"/><text x="0.4031%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.03%)</title><rect x="0.1531%" y="421" width="0.0270%" height="15" fill="rgb(206,188,39)" fg:x="17" fg:w="3"/><text x="0.4031%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="0.1531%" y="405" width="0.0270%" height="15" fill="rgb(217,207,13)" fg:x="17" fg:w="3"/><text x="0.4031%" y="415.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearDataReaction&lt;T&gt;::sample_collision (6 samples, 0.05%)</title><rect x="0.1531%" y="469" width="0.0540%" height="15" fill="rgb(231,73,38)" fg:x="17" fg:w="6"/><text x="0.4031%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.03%)</title><rect x="0.1801%" y="453" width="0.0270%" height="15" fill="rgb(225,20,46)" fg:x="20" fg:w="3"/><text x="0.4301%" y="463.50"></text></g><g><title>fastiron::simulation::collision_event::collision_event (9 samples, 0.08%)</title><rect x="0.1351%" y="485" width="0.0811%" height="15" fill="rgb(210,31,41)" fg:x="15" fg:w="9"/><text x="0.3851%" y="495.50"></text></g><g><title>[[heap]] (33 samples, 0.30%)</title><rect x="0.0000%" y="597" width="0.2972%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="33"/><text x="0.2500%" y="607.50"></text></g><g><title>fastiron::main (19 samples, 0.17%)</title><rect x="0.1261%" y="581" width="0.1711%" height="15" fill="rgb(226,26,5)" fg:x="14" fg:w="19"/><text x="0.3761%" y="591.50"></text></g><g><title>fastiron::cycle_tracking (18 samples, 0.16%)</title><rect x="0.1351%" y="565" width="0.1621%" height="15" fill="rgb(249,33,26)" fg:x="15" fg:w="18"/><text x="0.3851%" y="575.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (18 samples, 0.16%)</title><rect x="0.1351%" y="549" width="0.1621%" height="15" fill="rgb(235,183,28)" fg:x="15" fg:w="18"/><text x="0.3851%" y="559.50"></text></g><g><title>fastiron::cycle_tracking::{{closure}} (18 samples, 0.16%)</title><rect x="0.1351%" y="533" width="0.1621%" height="15" fill="rgb(221,5,38)" fg:x="15" fg:w="18"/><text x="0.3851%" y="543.50"></text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_guts (18 samples, 0.16%)</title><rect x="0.1351%" y="517" width="0.1621%" height="15" fill="rgb(247,18,42)" fg:x="15" fg:w="18"/><text x="0.3851%" y="527.50"></text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_function (18 samples, 0.16%)</title><rect x="0.1351%" y="501" width="0.1621%" height="15" fill="rgb(241,131,45)" fg:x="15" fg:w="18"/><text x="0.3851%" y="511.50"></text></g><g><title>fastiron::simulation::mc_segment_outcome::outcome (9 samples, 0.08%)</title><rect x="0.2161%" y="485" width="0.0811%" height="15" fill="rgb(249,31,29)" fg:x="24" fg:w="9"/><text x="0.4661%" y="495.50"></text></g><g><title>fastiron::simulation::mct::nearest_facet (9 samples, 0.08%)</title><rect x="0.2161%" y="469" width="0.0811%" height="15" fill="rgb(225,111,53)" fg:x="24" fg:w="9"/><text x="0.4661%" y="479.50"></text></g><g><title>fastiron::main (9 samples, 0.08%)</title><rect x="0.2161%" y="453" width="0.0811%" height="15" fill="rgb(238,160,17)" fg:x="24" fg:w="9"/><text x="0.4661%" y="463.50"></text></g><g><title>[[stack]] (14 samples, 0.13%)</title><rect x="0.2972%" y="597" width="0.1261%" height="15" fill="rgb(214,148,48)" fg:x="33" fg:w="14"/><text x="0.5472%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.11%)</title><rect x="0.3152%" y="581" width="0.1081%" height="15" fill="rgb(232,36,49)" fg:x="35" fg:w="12"/><text x="0.5652%" y="591.50"></text></g><g><title>__GI___libc_free (13 samples, 0.12%)</title><rect x="0.4413%" y="581" width="0.1171%" height="15" fill="rgb(209,103,24)" fg:x="49" fg:w="13"/><text x="0.6913%" y="591.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.10%)</title><rect x="0.5584%" y="581" width="0.0991%" height="15" fill="rgb(229,88,8)" fg:x="62" fg:w="11"/><text x="0.8084%" y="591.50"></text></g><g><title>__libc_calloc (2 samples, 0.02%)</title><rect x="0.6574%" y="581" width="0.0180%" height="15" fill="rgb(213,181,19)" fg:x="73" fg:w="2"/><text x="0.9074%" y="591.50"></text></g><g><title>__sincos (2 samples, 0.02%)</title><rect x="0.6754%" y="581" width="0.0180%" height="15" fill="rgb(254,191,54)" fg:x="75" fg:w="2"/><text x="0.9254%" y="591.50"></text></g><g><title>_int_free (11 samples, 0.10%)</title><rect x="0.6934%" y="581" width="0.0991%" height="15" fill="rgb(241,83,37)" fg:x="77" fg:w="11"/><text x="0.9434%" y="591.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="0.7925%" y="581" width="0.0180%" height="15" fill="rgb(233,36,39)" fg:x="88" fg:w="2"/><text x="1.0425%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.06%)</title><rect x="0.8105%" y="581" width="0.0630%" height="15" fill="rgb(226,3,54)" fg:x="90" fg:w="7"/><text x="1.0605%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (13 samples, 0.12%)</title><rect x="0.8736%" y="581" width="0.1171%" height="15" fill="rgb(245,192,40)" fg:x="97" fg:w="13"/><text x="1.1236%" y="591.50"></text></g><g><title>[unknown] (65 samples, 0.59%)</title><rect x="0.4233%" y="597" width="0.5854%" height="15" fill="rgb(238,167,29)" fg:x="47" fg:w="65"/><text x="0.6733%" y="607.50"></text></g><g><title>fastiron::main (2 samples, 0.02%)</title><rect x="0.9906%" y="581" width="0.0180%" height="15" fill="rgb(232,182,51)" fg:x="110" fg:w="2"/><text x="1.2406%" y="591.50"></text></g><g><title>fastiron::init::init_mc (2 samples, 0.02%)</title><rect x="0.9906%" y="565" width="0.0180%" height="15" fill="rgb(231,60,39)" fg:x="110" fg:w="2"/><text x="1.2406%" y="575.50"></text></g><g><title>fastiron::init::init_mesh (2 samples, 0.02%)</title><rect x="0.9906%" y="549" width="0.0180%" height="15" fill="rgb(208,69,12)" fg:x="110" fg:w="2"/><text x="1.2406%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (2 samples, 0.02%)</title><rect x="0.9906%" y="533" width="0.0180%" height="15" fill="rgb(235,93,37)" fg:x="110" fg:w="2"/><text x="1.2406%" y="543.50"></text></g><g><title>fastiron::init::init_mesh::{{closure}} (2 samples, 0.02%)</title><rect x="0.9906%" y="517" width="0.0180%" height="15" fill="rgb(213,116,39)" fg:x="110" fg:w="2"/><text x="1.2406%" y="527.50"></text></g><g><title>fastiron::geometry::mc_domain::MCDomain&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="0.9906%" y="501" width="0.0180%" height="15" fill="rgb(222,207,29)" fg:x="110" fg:w="2"/><text x="1.2406%" y="511.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::cycle_finalize (4 samples, 0.04%)</title><rect x="1.0537%" y="469" width="0.0360%" height="15" fill="rgb(206,96,30)" fg:x="117" fg:w="4"/><text x="1.3037%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.04%)</title><rect x="1.0537%" y="453" width="0.0360%" height="15" fill="rgb(218,138,4)" fg:x="117" fg:w="4"/><text x="1.3037%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.04%)</title><rect x="1.0537%" y="437" width="0.0360%" height="15" fill="rgb(250,191,14)" fg:x="117" fg:w="4"/><text x="1.3037%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4 samples, 0.04%)</title><rect x="1.0537%" y="421" width="0.0360%" height="15" fill="rgb(239,60,40)" fg:x="117" fg:w="4"/><text x="1.3037%" y="431.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::cycle_finalize::{{closure}} (4 samples, 0.04%)</title><rect x="1.0537%" y="405" width="0.0360%" height="15" fill="rgb(206,27,48)" fg:x="117" fg:w="4"/><text x="1.3037%" y="415.50"></text></g><g><title>fastiron::data::tallies::ScalarFluxDomain&lt;T&gt;::reset (4 samples, 0.04%)</title><rect x="1.0537%" y="389" width="0.0360%" height="15" fill="rgb(225,35,8)" fg:x="117" fg:w="4"/><text x="1.3037%" y="399.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (4 samples, 0.04%)</title><rect x="1.0537%" y="373" width="0.0360%" height="15" fill="rgb(250,213,24)" fg:x="117" fg:w="4"/><text x="1.3037%" y="383.50"></text></g><g><title>fastiron::data::tallies::ScalarFluxDomain&lt;T&gt;::reset::{{closure}} (4 samples, 0.04%)</title><rect x="1.0537%" y="357" width="0.0360%" height="15" fill="rgb(247,123,22)" fg:x="117" fg:w="4"/><text x="1.3037%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (4 samples, 0.04%)</title><rect x="1.0537%" y="341" width="0.0360%" height="15" fill="rgb(231,138,38)" fg:x="117" fg:w="4"/><text x="1.3037%" y="351.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (4 samples, 0.04%)</title><rect x="1.0537%" y="325" width="0.0360%" height="15" fill="rgb(231,145,46)" fg:x="117" fg:w="4"/><text x="1.3037%" y="335.50"></text></g><g><title>fastiron::cycle_finalize (5 samples, 0.05%)</title><rect x="1.0537%" y="485" width="0.0450%" height="15" fill="rgb(251,118,11)" fg:x="117" fg:w="5"/><text x="1.3037%" y="495.50"></text></g><g><title>fastiron::montecarlo::MonteCarlo&lt;T&gt;::clear_cross_section_cache (3 samples, 0.03%)</title><rect x="1.0987%" y="469" width="0.0270%" height="15" fill="rgb(217,147,25)" fg:x="122" fg:w="3"/><text x="1.3487%" y="479.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (3 samples, 0.03%)</title><rect x="1.0987%" y="453" width="0.0270%" height="15" fill="rgb(247,81,37)" fg:x="122" fg:w="3"/><text x="1.3487%" y="463.50"></text></g><g><title>fastiron::montecarlo::MonteCarlo&lt;T&gt;::clear_cross_section_cache::{{closure}} (3 samples, 0.03%)</title><rect x="1.0987%" y="437" width="0.0270%" height="15" fill="rgb(209,12,38)" fg:x="122" fg:w="3"/><text x="1.3487%" y="447.50"></text></g><g><title>fastiron::geometry::mc_domain::MCDomain&lt;T&gt;::clear_cross_section_cache (3 samples, 0.03%)</title><rect x="1.0987%" y="421" width="0.0270%" height="15" fill="rgb(227,1,9)" fg:x="122" fg:w="3"/><text x="1.3487%" y="431.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (3 samples, 0.03%)</title><rect x="1.0987%" y="405" width="0.0270%" height="15" fill="rgb(248,47,43)" fg:x="122" fg:w="3"/><text x="1.3487%" y="415.50"></text></g><g><title>fastiron::geometry::mc_domain::MCDomain&lt;T&gt;::clear_cross_section_cache::{{closure}} (3 samples, 0.03%)</title><rect x="1.0987%" y="389" width="0.0270%" height="15" fill="rgb(221,10,30)" fg:x="122" fg:w="3"/><text x="1.3487%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (3 samples, 0.03%)</title><rect x="1.0987%" y="373" width="0.0270%" height="15" fill="rgb(210,229,1)" fg:x="122" fg:w="3"/><text x="1.3487%" y="383.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (3 samples, 0.03%)</title><rect x="1.0987%" y="357" width="0.0270%" height="15" fill="rgb(222,148,37)" fg:x="122" fg:w="3"/><text x="1.3487%" y="367.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.07%)</title><rect x="1.1347%" y="341" width="0.0720%" height="15" fill="rgb(234,67,33)" fg:x="126" fg:w="8"/><text x="1.3847%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (14 samples, 0.13%)</title><rect x="1.1257%" y="389" width="0.1261%" height="15" fill="rgb(247,98,35)" fg:x="125" fg:w="14"/><text x="1.3757%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (13 samples, 0.12%)</title><rect x="1.1347%" y="373" width="0.1171%" height="15" fill="rgb(247,138,52)" fg:x="126" fg:w="13"/><text x="1.3847%" y="383.50"></text></g><g><title>fastiron::simulation::population_control::population_control_guts::{{closure}}::{{closure}} (13 samples, 0.12%)</title><rect x="1.1347%" y="357" width="0.1171%" height="15" fill="rgb(213,79,30)" fg:x="126" fg:w="13"/><text x="1.3847%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (5 samples, 0.05%)</title><rect x="1.2068%" y="341" width="0.0450%" height="15" fill="rgb(246,177,23)" fg:x="134" fg:w="5"/><text x="1.4568%" y="351.50"></text></g><g><title>core::ptr::write (4 samples, 0.04%)</title><rect x="1.2158%" y="325" width="0.0360%" height="15" fill="rgb(230,62,27)" fg:x="135" fg:w="4"/><text x="1.4658%" y="335.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (19 samples, 0.17%)</title><rect x="1.1257%" y="437" width="0.1711%" height="15" fill="rgb(216,154,8)" fg:x="125" fg:w="19"/><text x="1.3757%" y="447.50"></text></g><g><title>fastiron::simulation::population_control::population_control_guts::{{closure}} (19 samples, 0.17%)</title><rect x="1.1257%" y="421" width="0.1711%" height="15" fill="rgb(244,35,45)" fg:x="125" fg:w="19"/><text x="1.3757%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (19 samples, 0.17%)</title><rect x="1.1257%" y="405" width="0.1711%" height="15" fill="rgb(251,115,12)" fg:x="125" fg:w="19"/><text x="1.3757%" y="415.50"></text></g><g><title>fastiron::main (5 samples, 0.05%)</title><rect x="1.2518%" y="389" width="0.0450%" height="15" fill="rgb(240,54,50)" fg:x="139" fg:w="5"/><text x="1.5018%" y="399.50"></text></g><g><title>fastiron::simulation::population_control::population_control (44 samples, 0.40%)</title><rect x="1.1257%" y="469" width="0.3963%" height="15" fill="rgb(233,84,52)" fg:x="125" fg:w="44"/><text x="1.3757%" y="479.50"></text></g><g><title>fastiron::simulation::population_control::population_control_guts (44 samples, 0.40%)</title><rect x="1.1257%" y="453" width="0.3963%" height="15" fill="rgb(207,117,47)" fg:x="125" fg:w="44"/><text x="1.3757%" y="463.50"></text></g><g><title>fastiron::particles::particle_container::ParticleContainer&lt;T&gt;::clean_extra_vaults (25 samples, 0.23%)</title><rect x="1.2968%" y="437" width="0.2251%" height="15" fill="rgb(249,43,39)" fg:x="144" fg:w="25"/><text x="1.5468%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (25 samples, 0.23%)</title><rect x="1.2968%" y="421" width="0.2251%" height="15" fill="rgb(209,38,44)" fg:x="144" fg:w="25"/><text x="1.5468%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (25 samples, 0.23%)</title><rect x="1.2968%" y="405" width="0.2251%" height="15" fill="rgb(236,212,23)" fg:x="144" fg:w="25"/><text x="1.5468%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (25 samples, 0.23%)</title><rect x="1.2968%" y="389" width="0.2251%" height="15" fill="rgb(242,79,21)" fg:x="144" fg:w="25"/><text x="1.5468%" y="399.50"></text></g><g><title>[libc.so.6] (25 samples, 0.23%)</title><rect x="1.2968%" y="373" width="0.2251%" height="15" fill="rgb(211,96,35)" fg:x="144" fg:w="25"/><text x="1.5468%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.07%)</title><rect x="1.5220%" y="421" width="0.0720%" height="15" fill="rgb(253,215,40)" fg:x="169" fg:w="8"/><text x="1.7720%" y="431.50"></text></g><g><title>[libc.so.6] (8 samples, 0.07%)</title><rect x="1.5220%" y="405" width="0.0720%" height="15" fill="rgb(211,81,21)" fg:x="169" fg:w="8"/><text x="1.7720%" y="415.50"></text></g><g><title>fastiron::simulation::population_control::roulette_low_weight_particles (13 samples, 0.12%)</title><rect x="1.5220%" y="469" width="0.1171%" height="15" fill="rgb(208,190,38)" fg:x="169" fg:w="13"/><text x="1.7720%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (13 samples, 0.12%)</title><rect x="1.5220%" y="453" width="0.1171%" height="15" fill="rgb(235,213,38)" fg:x="169" fg:w="13"/><text x="1.7720%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (13 samples, 0.12%)</title><rect x="1.5220%" y="437" width="0.1171%" height="15" fill="rgb(237,122,38)" fg:x="169" fg:w="13"/><text x="1.7720%" y="447.50"></text></g><g><title>fastiron::simulation::population_control::roulette_low_weight_particles::{{closure}} (5 samples, 0.05%)</title><rect x="1.5940%" y="421" width="0.0450%" height="15" fill="rgb(244,218,35)" fg:x="177" fg:w="5"/><text x="1.8440%" y="431.50"></text></g><g><title>fastiron::main (3 samples, 0.03%)</title><rect x="1.6481%" y="149" width="0.0270%" height="15" fill="rgb(240,68,47)" fg:x="183" fg:w="3"/><text x="1.8981%" y="159.50"></text></g><g><title>fastiron::data::direction_cosine::DirectionCosine&lt;T&gt;::sample_isotropic (4 samples, 0.04%)</title><rect x="1.6751%" y="133" width="0.0360%" height="15" fill="rgb(210,16,53)" fg:x="186" fg:w="4"/><text x="1.9251%" y="143.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::cos (3 samples, 0.03%)</title><rect x="1.6841%" y="117" width="0.0270%" height="15" fill="rgb(235,124,12)" fg:x="187" fg:w="3"/><text x="1.9341%" y="127.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::cos (3 samples, 0.03%)</title><rect x="1.6841%" y="101" width="0.0270%" height="15" fill="rgb(224,169,11)" fg:x="187" fg:w="3"/><text x="1.9341%" y="111.50"></text></g><g><title>__sincos (3 samples, 0.03%)</title><rect x="1.6841%" y="85" width="0.0270%" height="15" fill="rgb(250,166,2)" fg:x="187" fg:w="3"/><text x="1.9341%" y="95.50"></text></g><g><title>do_cos (3 samples, 0.03%)</title><rect x="1.6841%" y="69" width="0.0270%" height="15" fill="rgb(242,216,29)" fg:x="187" fg:w="3"/><text x="1.9341%" y="79.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::cross (11 samples, 0.10%)</title><rect x="1.7381%" y="101" width="0.0991%" height="15" fill="rgb(230,116,27)" fg:x="193" fg:w="11"/><text x="1.9881%" y="111.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (3 samples, 0.03%)</title><rect x="1.8102%" y="85" width="0.0270%" height="15" fill="rgb(228,99,48)" fg:x="201" fg:w="3"/><text x="2.0602%" y="95.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (2 samples, 0.02%)</title><rect x="1.8822%" y="85" width="0.0180%" height="15" fill="rgb(253,11,6)" fg:x="209" fg:w="2"/><text x="2.1322%" y="95.50"></text></g><g><title>fastiron::simulation::mct::mct_cell_volume_3dg_vector_tetdet (23 samples, 0.21%)</title><rect x="1.7291%" y="117" width="0.2071%" height="15" fill="rgb(247,143,39)" fg:x="192" fg:w="23"/><text x="1.9791%" y="127.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::dot (11 samples, 0.10%)</title><rect x="1.8372%" y="101" width="0.0991%" height="15" fill="rgb(236,97,10)" fg:x="204" fg:w="11"/><text x="2.0872%" y="111.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (4 samples, 0.04%)</title><rect x="1.9002%" y="85" width="0.0360%" height="15" fill="rgb(233,208,19)" fg:x="211" fg:w="4"/><text x="2.1502%" y="95.50"></text></g><g><title>fastiron::simulation::mct::mct_facet_points_3dg (2 samples, 0.02%)</title><rect x="1.9362%" y="117" width="0.0180%" height="15" fill="rgb(216,164,2)" fg:x="215" fg:w="2"/><text x="2.1862%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.02%)</title><rect x="1.9362%" y="101" width="0.0180%" height="15" fill="rgb(220,129,5)" fg:x="215" fg:w="2"/><text x="2.1862%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="1.9362%" y="85" width="0.0180%" height="15" fill="rgb(242,17,10)" fg:x="215" fg:w="2"/><text x="2.1862%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 0.02%)</title><rect x="1.9362%" y="69" width="0.0180%" height="15" fill="rgb(242,107,0)" fg:x="215" fg:w="2"/><text x="2.1862%" y="79.50"></text></g><g><title>fastiron::simulation::mct::mct_facet_points_3dg::{{closure}} (2 samples, 0.02%)</title><rect x="1.9362%" y="53" width="0.0180%" height="15" fill="rgb(251,28,31)" fg:x="215" fg:w="2"/><text x="2.1862%" y="63.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (2 samples, 0.02%)</title><rect x="1.9362%" y="37" width="0.0180%" height="15" fill="rgb(233,223,10)" fg:x="215" fg:w="2"/><text x="2.1862%" y="47.50"></text></g><g><title>fastiron::cycle_init (96 samples, 0.86%)</title><rect x="1.0987%" y="485" width="0.8646%" height="15" fill="rgb(215,21,27)" fg:x="122" fg:w="96"/><text x="1.3487%" y="495.50"></text></g><g><title>fastiron::simulation::population_control::source_now (36 samples, 0.32%)</title><rect x="1.6390%" y="469" width="0.3242%" height="15" fill="rgb(232,23,21)" fg:x="182" fg:w="36"/><text x="1.8890%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (36 samples, 0.32%)</title><rect x="1.6390%" y="453" width="0.3242%" height="15" fill="rgb(244,5,23)" fg:x="182" fg:w="36"/><text x="1.8890%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (36 samples, 0.32%)</title><rect x="1.6390%" y="437" width="0.3242%" height="15" fill="rgb(226,81,46)" fg:x="182" fg:w="36"/><text x="1.8890%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (36 samples, 0.32%)</title><rect x="1.6390%" y="421" width="0.3242%" height="15" fill="rgb(247,70,30)" fg:x="182" fg:w="36"/><text x="1.8890%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (36 samples, 0.32%)</title><rect x="1.6390%" y="405" width="0.3242%" height="15" fill="rgb(212,68,19)" fg:x="182" fg:w="36"/><text x="1.8890%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (36 samples, 0.32%)</title><rect x="1.6390%" y="389" width="0.3242%" height="15" fill="rgb(240,187,13)" fg:x="182" fg:w="36"/><text x="1.8890%" y="399.50"></text></g><g><title>fastiron::simulation::population_control::source_now::{{closure}} (36 samples, 0.32%)</title><rect x="1.6390%" y="373" width="0.3242%" height="15" fill="rgb(223,113,26)" fg:x="182" fg:w="36"/><text x="1.8890%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (36 samples, 0.32%)</title><rect x="1.6390%" y="357" width="0.3242%" height="15" fill="rgb(206,192,2)" fg:x="182" fg:w="36"/><text x="1.8890%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (36 samples, 0.32%)</title><rect x="1.6390%" y="341" width="0.3242%" height="15" fill="rgb(241,108,4)" fg:x="182" fg:w="36"/><text x="1.8890%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (36 samples, 0.32%)</title><rect x="1.6390%" y="325" width="0.3242%" height="15" fill="rgb(247,173,49)" fg:x="182" fg:w="36"/><text x="1.8890%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (36 samples, 0.32%)</title><rect x="1.6390%" y="309" width="0.3242%" height="15" fill="rgb(224,114,35)" fg:x="182" fg:w="36"/><text x="1.8890%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (36 samples, 0.32%)</title><rect x="1.6390%" y="293" width="0.3242%" height="15" fill="rgb(245,159,27)" fg:x="182" fg:w="36"/><text x="1.8890%" y="303.50"></text></g><g><title>fastiron::simulation::population_control::source_now::{{closure}}::{{closure}} (36 samples, 0.32%)</title><rect x="1.6390%" y="277" width="0.3242%" height="15" fill="rgb(245,172,44)" fg:x="182" fg:w="36"/><text x="1.8890%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (36 samples, 0.32%)</title><rect x="1.6390%" y="261" width="0.3242%" height="15" fill="rgb(236,23,11)" fg:x="182" fg:w="36"/><text x="1.8890%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (36 samples, 0.32%)</title><rect x="1.6390%" y="245" width="0.3242%" height="15" fill="rgb(205,117,38)" fg:x="182" fg:w="36"/><text x="1.8890%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (36 samples, 0.32%)</title><rect x="1.6390%" y="229" width="0.3242%" height="15" fill="rgb(237,72,25)" fg:x="182" fg:w="36"/><text x="1.8890%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (36 samples, 0.32%)</title><rect x="1.6390%" y="213" width="0.3242%" height="15" fill="rgb(244,70,9)" fg:x="182" fg:w="36"/><text x="1.8890%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (36 samples, 0.32%)</title><rect x="1.6390%" y="197" width="0.3242%" height="15" fill="rgb(217,125,39)" fg:x="182" fg:w="36"/><text x="1.8890%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (36 samples, 0.32%)</title><rect x="1.6390%" y="181" width="0.3242%" height="15" fill="rgb(235,36,10)" fg:x="182" fg:w="36"/><text x="1.8890%" y="191.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (36 samples, 0.32%)</title><rect x="1.6390%" y="165" width="0.3242%" height="15" fill="rgb(251,123,47)" fg:x="182" fg:w="36"/><text x="1.8890%" y="175.50"></text></g><g><title>fastiron::simulation::population_control::source_now::{{closure}}::{{closure}}::{{closure}} (32 samples, 0.29%)</title><rect x="1.6751%" y="149" width="0.2882%" height="15" fill="rgb(221,13,13)" fg:x="186" fg:w="32"/><text x="1.9251%" y="159.50"></text></g><g><title>fastiron::simulation::mct::generate_coordinate_3dg (28 samples, 0.25%)</title><rect x="1.7111%" y="133" width="0.2522%" height="15" fill="rgb(238,131,9)" fg:x="190" fg:w="28"/><text x="1.9611%" y="143.50"></text></g><g><title>fastiron::main (13 samples, 0.12%)</title><rect x="1.9633%" y="437" width="0.1171%" height="15" fill="rgb(211,50,8)" fg:x="218" fg:w="13"/><text x="2.2133%" y="447.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_energy_groups (14 samples, 0.13%)</title><rect x="2.1254%" y="421" width="0.1261%" height="15" fill="rgb(245,182,24)" fg:x="236" fg:w="14"/><text x="2.3754%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (4 samples, 0.04%)</title><rect x="2.2154%" y="405" width="0.0360%" height="15" fill="rgb(242,14,37)" fg:x="246" fg:w="4"/><text x="2.4654%" y="415.50"></text></g><g><title>fastiron::main (24 samples, 0.22%)</title><rect x="2.2514%" y="421" width="0.2161%" height="15" fill="rgb(246,228,12)" fg:x="250" fg:w="24"/><text x="2.5014%" y="431.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::Species as core::clone::Clone&gt;::clone (12 samples, 0.11%)</title><rect x="2.4946%" y="389" width="0.1081%" height="15" fill="rgb(213,55,15)" fg:x="277" fg:w="12"/><text x="2.7446%" y="399.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt; as core::clone::Clone&gt;::clone (13 samples, 0.12%)</title><rect x="2.4946%" y="405" width="0.1171%" height="15" fill="rgb(209,9,3)" fg:x="277" fg:w="13"/><text x="2.7446%" y="415.50"></text></g><g><title>fastiron::particles::mc_particle::MCParticle&lt;T&gt;::new (18 samples, 0.16%)</title><rect x="2.4766%" y="421" width="0.1621%" height="15" fill="rgb(230,59,30)" fg:x="275" fg:w="18"/><text x="2.7266%" y="431.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::length (3 samples, 0.03%)</title><rect x="2.6117%" y="405" width="0.0270%" height="15" fill="rgb(209,121,21)" fg:x="290" fg:w="3"/><text x="2.8617%" y="415.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (6 samples, 0.05%)</title><rect x="2.6927%" y="405" width="0.0540%" height="15" fill="rgb(220,109,13)" fg:x="299" fg:w="6"/><text x="2.9427%" y="415.50"></text></g><g><title>fastiron::main (152 samples, 1.37%)</title><rect x="2.7468%" y="405" width="1.3689%" height="15" fill="rgb(232,18,1)" fg:x="305" fg:w="152"/><text x="2.9968%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (28 samples, 0.25%)</title><rect x="5.0793%" y="389" width="0.2522%" height="15" fill="rgb(215,41,42)" fg:x="564" fg:w="28"/><text x="5.3293%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (28 samples, 0.25%)</title><rect x="5.0793%" y="373" width="0.2522%" height="15" fill="rgb(224,123,36)" fg:x="564" fg:w="28"/><text x="5.3293%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (28 samples, 0.25%)</title><rect x="5.0793%" y="357" width="0.2522%" height="15" fill="rgb(240,125,3)" fg:x="564" fg:w="28"/><text x="5.3293%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::SubAssign&gt;::sub_assign (257 samples, 2.31%)</title><rect x="5.3404%" y="389" width="2.3145%" height="15" fill="rgb(205,98,50)" fg:x="593" fg:w="257"/><text x="5.5904%" y="399.50">&lt;..</text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::is_sign_negative (249 samples, 2.24%)</title><rect x="7.6549%" y="389" width="2.2424%" height="15" fill="rgb(205,185,37)" fg:x="850" fg:w="249"/><text x="7.9049%" y="399.50">&lt;..</text></g><g><title>core::f64::&lt;impl f64&gt;::is_sign_negative (249 samples, 2.24%)</title><rect x="7.6549%" y="373" width="2.2424%" height="15" fill="rgb(238,207,15)" fg:x="850" fg:w="249"/><text x="7.9049%" y="383.50">c..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (5 samples, 0.05%)</title><rect x="9.8973%" y="389" width="0.0450%" height="15" fill="rgb(213,199,42)" fg:x="1099" fg:w="5"/><text x="10.1473%" y="399.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (12 samples, 0.11%)</title><rect x="9.9874%" y="357" width="0.1081%" height="15" fill="rgb(235,201,11)" fg:x="1109" fg:w="12"/><text x="10.2374%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (12 samples, 0.11%)</title><rect x="9.9874%" y="341" width="0.1081%" height="15" fill="rgb(207,46,11)" fg:x="1109" fg:w="12"/><text x="10.2374%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (58 samples, 0.52%)</title><rect x="10.0955%" y="357" width="0.5223%" height="15" fill="rgb(241,35,35)" fg:x="1121" fg:w="58"/><text x="10.3455%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (82 samples, 0.74%)</title><rect x="9.9424%" y="389" width="0.7385%" height="15" fill="rgb(243,32,47)" fg:x="1104" fg:w="82"/><text x="10.1924%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (82 samples, 0.74%)</title><rect x="9.9424%" y="373" width="0.7385%" height="15" fill="rgb(247,202,23)" fg:x="1104" fg:w="82"/><text x="10.1924%" y="383.50"></text></g><g><title>fastiron::main (7 samples, 0.06%)</title><rect x="10.6178%" y="357" width="0.0630%" height="15" fill="rgb(219,102,11)" fg:x="1179" fg:w="7"/><text x="10.8678%" y="367.50"></text></g><g><title>_int_free (57 samples, 0.51%)</title><rect x="10.9870%" y="261" width="0.5133%" height="15" fill="rgb(243,110,44)" fg:x="1220" fg:w="57"/><text x="11.2370%" y="271.50"></text></g><g><title>tcache_put (11 samples, 0.10%)</title><rect x="11.4013%" y="245" width="0.0991%" height="15" fill="rgb(222,74,54)" fg:x="1266" fg:w="11"/><text x="11.6513%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (93 samples, 0.84%)</title><rect x="10.6808%" y="341" width="0.8375%" height="15" fill="rgb(216,99,12)" fg:x="1186" fg:w="93"/><text x="10.9308%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (93 samples, 0.84%)</title><rect x="10.6808%" y="325" width="0.8375%" height="15" fill="rgb(226,22,26)" fg:x="1186" fg:w="93"/><text x="10.9308%" y="335.50"></text></g><g><title>__rdl_dealloc (93 samples, 0.84%)</title><rect x="10.6808%" y="309" width="0.8375%" height="15" fill="rgb(217,163,10)" fg:x="1186" fg:w="93"/><text x="10.9308%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (93 samples, 0.84%)</title><rect x="10.6808%" y="293" width="0.8375%" height="15" fill="rgb(213,25,53)" fg:x="1186" fg:w="93"/><text x="10.9308%" y="303.50"></text></g><g><title>__GI___libc_free (93 samples, 0.84%)</title><rect x="10.6808%" y="277" width="0.8375%" height="15" fill="rgb(252,105,26)" fg:x="1186" fg:w="93"/><text x="10.9308%" y="287.50"></text></g><g><title>arena_for_chunk (2 samples, 0.02%)</title><rect x="11.5004%" y="261" width="0.0180%" height="15" fill="rgb(220,39,43)" fg:x="1277" fg:w="2"/><text x="11.7504%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (98 samples, 0.88%)</title><rect x="10.6808%" y="389" width="0.8826%" height="15" fill="rgb(229,68,48)" fg:x="1186" fg:w="98"/><text x="10.9308%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (98 samples, 0.88%)</title><rect x="10.6808%" y="373" width="0.8826%" height="15" fill="rgb(252,8,32)" fg:x="1186" fg:w="98"/><text x="10.9308%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (98 samples, 0.88%)</title><rect x="10.6808%" y="357" width="0.8826%" height="15" fill="rgb(223,20,43)" fg:x="1186" fg:w="98"/><text x="10.9308%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.05%)</title><rect x="11.5184%" y="341" width="0.0450%" height="15" fill="rgb(229,81,49)" fg:x="1279" fg:w="5"/><text x="11.7684%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="12.0407%" y="373" width="0.0180%" height="15" fill="rgb(236,28,36)" fg:x="1337" fg:w="2"/><text x="12.2907%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="12.0407%" y="357" width="0.0180%" height="15" fill="rgb(249,185,26)" fg:x="1337" fg:w="2"/><text x="12.2907%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="12.0407%" y="341" width="0.0180%" height="15" fill="rgb(249,174,33)" fg:x="1337" fg:w="2"/><text x="12.2907%" y="351.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_energy_groups (71 samples, 0.64%)</title><rect x="11.5634%" y="389" width="0.6394%" height="15" fill="rgb(233,201,37)" fg:x="1284" fg:w="71"/><text x="11.8134%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (16 samples, 0.14%)</title><rect x="12.0587%" y="373" width="0.1441%" height="15" fill="rgb(221,78,26)" fg:x="1339" fg:w="16"/><text x="12.3087%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (21 samples, 0.19%)</title><rect x="12.2028%" y="373" width="0.1891%" height="15" fill="rgb(250,127,30)" fg:x="1355" fg:w="21"/><text x="12.4528%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (21 samples, 0.19%)</title><rect x="12.2028%" y="357" width="0.1891%" height="15" fill="rgb(230,49,44)" fg:x="1355" fg:w="21"/><text x="12.4528%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (21 samples, 0.19%)</title><rect x="12.2028%" y="341" width="0.1891%" height="15" fill="rgb(229,67,23)" fg:x="1355" fg:w="21"/><text x="12.4528%" y="351.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_number_reactions (43 samples, 0.39%)</title><rect x="12.2028%" y="389" width="0.3872%" height="15" fill="rgb(249,83,47)" fg:x="1355" fg:w="43"/><text x="12.4528%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (22 samples, 0.20%)</title><rect x="12.3919%" y="373" width="0.1981%" height="15" fill="rgb(215,43,3)" fg:x="1376" fg:w="22"/><text x="12.6419%" y="383.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.10%)</title><rect x="12.6981%" y="245" width="0.0991%" height="15" fill="rgb(238,154,13)" fg:x="1410" fg:w="11"/><text x="12.9481%" y="255.50"></text></g><g><title>tcache_get (5 samples, 0.05%)</title><rect x="12.7522%" y="229" width="0.0450%" height="15" fill="rgb(219,56,2)" fg:x="1416" fg:w="5"/><text x="13.0022%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (14 samples, 0.13%)</title><rect x="12.6801%" y="261" width="0.1261%" height="15" fill="rgb(233,0,4)" fg:x="1408" fg:w="14"/><text x="12.9301%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (16 samples, 0.14%)</title><rect x="12.6801%" y="325" width="0.1441%" height="15" fill="rgb(235,30,7)" fg:x="1408" fg:w="16"/><text x="12.9301%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (16 samples, 0.14%)</title><rect x="12.6801%" y="309" width="0.1441%" height="15" fill="rgb(250,79,13)" fg:x="1408" fg:w="16"/><text x="12.9301%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (16 samples, 0.14%)</title><rect x="12.6801%" y="293" width="0.1441%" height="15" fill="rgb(211,146,34)" fg:x="1408" fg:w="16"/><text x="12.9301%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (16 samples, 0.14%)</title><rect x="12.6801%" y="277" width="0.1441%" height="15" fill="rgb(228,22,38)" fg:x="1408" fg:w="16"/><text x="12.9301%" y="287.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.02%)</title><rect x="12.8062%" y="261" width="0.0180%" height="15" fill="rgb(235,168,5)" fg:x="1422" fg:w="2"/><text x="13.0562%" y="271.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.02%)</title><rect x="12.8062%" y="245" width="0.0180%" height="15" fill="rgb(221,155,16)" fg:x="1422" fg:w="2"/><text x="13.0562%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (18 samples, 0.16%)</title><rect x="12.6801%" y="373" width="0.1621%" height="15" fill="rgb(215,215,53)" fg:x="1408" fg:w="18"/><text x="12.9301%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (18 samples, 0.16%)</title><rect x="12.6801%" y="357" width="0.1621%" height="15" fill="rgb(223,4,10)" fg:x="1408" fg:w="18"/><text x="12.9301%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (18 samples, 0.16%)</title><rect x="12.6801%" y="341" width="0.1621%" height="15" fill="rgb(234,103,6)" fg:x="1408" fg:w="18"/><text x="12.9301%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="12.8242%" y="325" width="0.0180%" height="15" fill="rgb(227,97,0)" fg:x="1424" fg:w="2"/><text x="13.0742%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (2 samples, 0.02%)</title><rect x="12.8422%" y="373" width="0.0180%" height="15" fill="rgb(234,150,53)" fg:x="1426" fg:w="2"/><text x="13.0922%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (2 samples, 0.02%)</title><rect x="12.8602%" y="373" width="0.0180%" height="15" fill="rgb(228,201,54)" fg:x="1428" fg:w="2"/><text x="13.1102%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (17 samples, 0.15%)</title><rect x="12.8782%" y="373" width="0.1531%" height="15" fill="rgb(222,22,37)" fg:x="1430" fg:w="17"/><text x="13.1282%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (14 samples, 0.13%)</title><rect x="13.0313%" y="373" width="0.1261%" height="15" fill="rgb(237,53,32)" fg:x="1447" fg:w="14"/><text x="13.2813%" y="383.50"></text></g><g><title>&lt;f64 as num_traits::cast::ToPrimitive&gt;::to_usize (3 samples, 0.03%)</title><rect x="13.1574%" y="373" width="0.0270%" height="15" fill="rgb(233,25,53)" fg:x="1461" fg:w="3"/><text x="13.4074%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.02%)</title><rect x="13.2205%" y="325" width="0.0180%" height="15" fill="rgb(210,40,34)" fg:x="1468" fg:w="2"/><text x="13.4705%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::set_ptr_and_cap (2 samples, 0.02%)</title><rect x="13.2385%" y="325" width="0.0180%" height="15" fill="rgb(241,220,44)" fg:x="1470" fg:w="2"/><text x="13.4885%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.04%)</title><rect x="13.3105%" y="309" width="0.0360%" height="15" fill="rgb(235,28,35)" fg:x="1478" fg:w="4"/><text x="13.5605%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.04%)</title><rect x="13.3105%" y="293" width="0.0360%" height="15" fill="rgb(210,56,17)" fg:x="1478" fg:w="4"/><text x="13.5605%" y="303.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="13.3195%" y="277" width="0.0270%" height="15" fill="rgb(224,130,29)" fg:x="1479" fg:w="3"/><text x="13.5695%" y="287.50"></text></g><g><title>__rdl_alloc (3 samples, 0.03%)</title><rect x="13.3195%" y="261" width="0.0270%" height="15" fill="rgb(235,212,8)" fg:x="1479" fg:w="3"/><text x="13.5695%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.03%)</title><rect x="13.3195%" y="245" width="0.0270%" height="15" fill="rgb(223,33,50)" fg:x="1479" fg:w="3"/><text x="13.5695%" y="255.50"></text></g><g><title>checked_request2size (4 samples, 0.04%)</title><rect x="13.7428%" y="293" width="0.0360%" height="15" fill="rgb(219,149,13)" fg:x="1526" fg:w="4"/><text x="13.9928%" y="303.50"></text></g><g><title>__GI___libc_malloc (67 samples, 0.60%)</title><rect x="13.3465%" y="309" width="0.6034%" height="15" fill="rgb(250,156,29)" fg:x="1482" fg:w="67"/><text x="13.5965%" y="319.50"></text></g><g><title>tcache_get (19 samples, 0.17%)</title><rect x="13.7788%" y="293" width="0.1711%" height="15" fill="rgb(216,193,19)" fg:x="1530" fg:w="19"/><text x="14.0288%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (83 samples, 0.75%)</title><rect x="13.2565%" y="325" width="0.7475%" height="15" fill="rgb(216,135,14)" fg:x="1472" fg:w="83"/><text x="13.5065%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (6 samples, 0.05%)</title><rect x="13.9499%" y="309" width="0.0540%" height="15" fill="rgb(241,47,5)" fg:x="1549" fg:w="6"/><text x="14.1999%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::array (4 samples, 0.04%)</title><rect x="14.0040%" y="325" width="0.0360%" height="15" fill="rgb(233,42,35)" fg:x="1555" fg:w="4"/><text x="14.2540%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (4 samples, 0.04%)</title><rect x="14.0040%" y="309" width="0.0360%" height="15" fill="rgb(231,13,6)" fg:x="1555" fg:w="4"/><text x="14.2540%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (101 samples, 0.91%)</title><rect x="13.2024%" y="341" width="0.9096%" height="15" fill="rgb(207,181,40)" fg:x="1466" fg:w="101"/><text x="13.4524%" y="351.50"></text></g><g><title>core::cmp::max (8 samples, 0.07%)</title><rect x="14.0400%" y="325" width="0.0720%" height="15" fill="rgb(254,173,49)" fg:x="1559" fg:w="8"/><text x="14.2900%" y="335.50"></text></g><g><title>core::cmp::Ord::max (8 samples, 0.07%)</title><rect x="14.0400%" y="309" width="0.0720%" height="15" fill="rgb(221,1,38)" fg:x="1559" fg:w="8"/><text x="14.2900%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (8 samples, 0.07%)</title><rect x="14.0400%" y="293" width="0.0720%" height="15" fill="rgb(206,124,46)" fg:x="1559" fg:w="8"/><text x="14.2900%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (102 samples, 0.92%)</title><rect x="13.2024%" y="357" width="0.9186%" height="15" fill="rgb(249,21,11)" fg:x="1466" fg:w="102"/><text x="13.4524%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (105 samples, 0.95%)</title><rect x="13.1844%" y="373" width="0.9456%" height="15" fill="rgb(222,201,40)" fg:x="1464" fg:w="105"/><text x="13.4344%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (8 samples, 0.07%)</title><rect x="14.1300%" y="373" width="0.0720%" height="15" fill="rgb(235,61,29)" fg:x="1569" fg:w="8"/><text x="14.3800%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.14%)</title><rect x="14.2021%" y="325" width="0.1441%" height="15" fill="rgb(219,207,3)" fg:x="1577" fg:w="16"/><text x="14.4521%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (14 samples, 0.13%)</title><rect x="14.2201%" y="309" width="0.1261%" height="15" fill="rgb(222,56,46)" fg:x="1579" fg:w="14"/><text x="14.4701%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.13%)</title><rect x="14.2201%" y="293" width="0.1261%" height="15" fill="rgb(239,76,54)" fg:x="1579" fg:w="14"/><text x="14.4701%" y="303.50"></text></g><g><title>alloc::alloc::alloc_zeroed (14 samples, 0.13%)</title><rect x="14.2201%" y="277" width="0.1261%" height="15" fill="rgb(231,124,27)" fg:x="1579" fg:w="14"/><text x="14.4701%" y="287.50"></text></g><g><title>__rdl_alloc_zeroed (14 samples, 0.13%)</title><rect x="14.2201%" y="261" width="0.1261%" height="15" fill="rgb(249,195,6)" fg:x="1579" fg:w="14"/><text x="14.4701%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (14 samples, 0.13%)</title><rect x="14.2201%" y="245" width="0.1261%" height="15" fill="rgb(237,174,47)" fg:x="1579" fg:w="14"/><text x="14.4701%" y="255.50"></text></g><g><title>__libc_calloc (14 samples, 0.13%)</title><rect x="14.2201%" y="229" width="0.1261%" height="15" fill="rgb(206,201,31)" fg:x="1579" fg:w="14"/><text x="14.4701%" y="239.50"></text></g><g><title>_int_malloc (7 samples, 0.06%)</title><rect x="14.2831%" y="213" width="0.0630%" height="15" fill="rgb(231,57,52)" fg:x="1586" fg:w="7"/><text x="14.5331%" y="223.50"></text></g><g><title>alloc::vec::from_elem (17 samples, 0.15%)</title><rect x="14.2021%" y="373" width="0.1531%" height="15" fill="rgb(248,177,22)" fg:x="1577" fg:w="17"/><text x="14.4521%" y="383.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (17 samples, 0.15%)</title><rect x="14.2021%" y="357" width="0.1531%" height="15" fill="rgb(215,211,37)" fg:x="1577" fg:w="17"/><text x="14.4521%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (17 samples, 0.15%)</title><rect x="14.2021%" y="341" width="0.1531%" height="15" fill="rgb(241,128,51)" fg:x="1577" fg:w="17"/><text x="14.4521%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (2 samples, 0.02%)</title><rect x="14.3642%" y="309" width="0.0180%" height="15" fill="rgb(227,165,31)" fg:x="1595" fg:w="2"/><text x="14.6142%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (2 samples, 0.02%)</title><rect x="14.3912%" y="309" width="0.0180%" height="15" fill="rgb(228,167,24)" fg:x="1598" fg:w="2"/><text x="14.6412%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.07%)</title><rect x="14.3552%" y="373" width="0.0720%" height="15" fill="rgb(228,143,12)" fg:x="1594" fg:w="8"/><text x="14.6052%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 0.07%)</title><rect x="14.3552%" y="357" width="0.0720%" height="15" fill="rgb(249,149,8)" fg:x="1594" fg:w="8"/><text x="14.6052%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (8 samples, 0.07%)</title><rect x="14.3552%" y="341" width="0.0720%" height="15" fill="rgb(243,35,44)" fg:x="1594" fg:w="8"/><text x="14.6052%" y="351.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearDataReaction&lt;T&gt;::sample_collision::{{closure}} (8 samples, 0.07%)</title><rect x="14.3552%" y="325" width="0.0720%" height="15" fill="rgb(246,89,9)" fg:x="1594" fg:w="8"/><text x="14.6052%" y="335.50"></text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (2 samples, 0.02%)</title><rect x="14.4092%" y="309" width="0.0180%" height="15" fill="rgb(233,213,13)" fg:x="1600" fg:w="2"/><text x="14.6592%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (12 samples, 0.11%)</title><rect x="14.4272%" y="373" width="0.1081%" height="15" fill="rgb(233,141,41)" fg:x="1602" fg:w="12"/><text x="14.6772%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (12 samples, 0.11%)</title><rect x="14.4272%" y="357" width="0.1081%" height="15" fill="rgb(239,167,4)" fg:x="1602" fg:w="12"/><text x="14.6772%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.11%)</title><rect x="14.4272%" y="341" width="0.1081%" height="15" fill="rgb(209,217,16)" fg:x="1602" fg:w="12"/><text x="14.6772%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (12 samples, 0.11%)</title><rect x="14.4272%" y="325" width="0.1081%" height="15" fill="rgb(219,88,35)" fg:x="1602" fg:w="12"/><text x="14.6772%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (12 samples, 0.11%)</title><rect x="14.4272%" y="309" width="0.1081%" height="15" fill="rgb(220,193,23)" fg:x="1602" fg:w="12"/><text x="14.6772%" y="319.50"></text></g><g><title>__rdl_dealloc (12 samples, 0.11%)</title><rect x="14.4272%" y="293" width="0.1081%" height="15" fill="rgb(230,90,52)" fg:x="1602" fg:w="12"/><text x="14.6772%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12 samples, 0.11%)</title><rect x="14.4272%" y="277" width="0.1081%" height="15" fill="rgb(252,106,19)" fg:x="1602" fg:w="12"/><text x="14.6772%" y="287.50"></text></g><g><title>__GI___libc_free (10 samples, 0.09%)</title><rect x="14.4452%" y="261" width="0.0901%" height="15" fill="rgb(206,74,20)" fg:x="1604" fg:w="10"/><text x="14.6952%" y="271.50"></text></g><g><title>_int_free (8 samples, 0.07%)</title><rect x="14.4633%" y="245" width="0.0720%" height="15" fill="rgb(230,138,44)" fg:x="1606" fg:w="8"/><text x="14.7133%" y="255.50"></text></g><g><title>fastiron::main (8 samples, 0.07%)</title><rect x="14.5353%" y="373" width="0.0720%" height="15" fill="rgb(235,182,43)" fg:x="1614" fg:w="8"/><text x="14.7853%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (2 samples, 0.02%)</title><rect x="14.7244%" y="357" width="0.0180%" height="15" fill="rgb(242,16,51)" fg:x="1635" fg:w="2"/><text x="14.9744%" y="367.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearDataReaction&lt;T&gt;::sample_collision (240 samples, 2.16%)</title><rect x="12.5901%" y="389" width="2.1614%" height="15" fill="rgb(248,9,4)" fg:x="1398" fg:w="240"/><text x="12.8401%" y="399.50">f..</text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (16 samples, 0.14%)</title><rect x="14.6073%" y="373" width="0.1441%" height="15" fill="rgb(210,31,22)" fg:x="1622" fg:w="16"/><text x="14.8573%" y="383.50"></text></g><g><title>fastiron::main (62 samples, 0.56%)</title><rect x="14.7514%" y="389" width="0.5584%" height="15" fill="rgb(239,54,39)" fg:x="1638" fg:w="62"/><text x="15.0014%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (5 samples, 0.05%)</title><rect x="15.3458%" y="373" width="0.0450%" height="15" fill="rgb(230,99,41)" fg:x="1704" fg:w="5"/><text x="15.5958%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (3 samples, 0.03%)</title><rect x="15.3909%" y="373" width="0.0270%" height="15" fill="rgb(253,106,12)" fg:x="1709" fg:w="3"/><text x="15.6409%" y="383.50"></text></g><g><title>__ieee754_log_fma (90 samples, 0.81%)</title><rect x="15.4179%" y="309" width="0.8105%" height="15" fill="rgb(213,46,41)" fg:x="1712" fg:w="90"/><text x="15.6679%" y="319.50"></text></g><g><title>__log (5 samples, 0.05%)</title><rect x="16.2284%" y="309" width="0.0450%" height="15" fill="rgb(215,133,35)" fg:x="1802" fg:w="5"/><text x="16.4784%" y="319.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::ln (96 samples, 0.86%)</title><rect x="15.4179%" y="373" width="0.8646%" height="15" fill="rgb(213,28,5)" fg:x="1712" fg:w="96"/><text x="15.6679%" y="383.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln (96 samples, 0.86%)</title><rect x="15.4179%" y="357" width="0.8646%" height="15" fill="rgb(215,77,49)" fg:x="1712" fg:w="96"/><text x="15.6679%" y="367.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::log_wrapper (96 samples, 0.86%)</title><rect x="15.4179%" y="341" width="0.8646%" height="15" fill="rgb(248,100,22)" fg:x="1712" fg:w="96"/><text x="15.6679%" y="351.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln::{{closure}} (96 samples, 0.86%)</title><rect x="15.4179%" y="325" width="0.8646%" height="15" fill="rgb(208,67,9)" fg:x="1712" fg:w="96"/><text x="15.6679%" y="335.50"></text></g><g><title>fastiron::main (2 samples, 0.02%)</title><rect x="16.2824%" y="357" width="0.0180%" height="15" fill="rgb(219,133,21)" fg:x="1808" fg:w="2"/><text x="16.5324%" y="367.50"></text></g><g><title>[libm.so.6] (4 samples, 0.04%)</title><rect x="16.3094%" y="341" width="0.0360%" height="15" fill="rgb(246,46,29)" fg:x="1811" fg:w="4"/><text x="16.5594%" y="351.50"></text></g><g><title>do_cos (42 samples, 0.38%)</title><rect x="16.7777%" y="325" width="0.3782%" height="15" fill="rgb(246,185,52)" fg:x="1863" fg:w="42"/><text x="17.0277%" y="335.50"></text></g><g><title>do_sin (125 samples, 1.13%)</title><rect x="17.1560%" y="325" width="1.1257%" height="15" fill="rgb(252,136,11)" fg:x="1905" fg:w="125"/><text x="17.4060%" y="335.50"></text></g><g><title>libc_feholdsetround_sse_ctx (2 samples, 0.02%)</title><rect x="18.2817%" y="325" width="0.0180%" height="15" fill="rgb(219,138,53)" fg:x="2030" fg:w="2"/><text x="18.5317%" y="335.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::sin (263 samples, 2.37%)</title><rect x="16.2824%" y="373" width="2.3685%" height="15" fill="rgb(211,51,23)" fg:x="1808" fg:w="263"/><text x="16.5324%" y="383.50">&lt;f..</text></g><g><title>std::f64::&lt;impl f64&gt;::sin (261 samples, 2.35%)</title><rect x="16.3004%" y="357" width="2.3505%" height="15" fill="rgb(247,221,28)" fg:x="1810" fg:w="261"/><text x="16.5504%" y="367.50">s..</text></g><g><title>__sincos (256 samples, 2.31%)</title><rect x="16.3455%" y="341" width="2.3055%" height="15" fill="rgb(251,222,45)" fg:x="1815" fg:w="256"/><text x="16.5955%" y="351.50">_..</text></g><g><title>reduce_sincos (39 samples, 0.35%)</title><rect x="18.2997%" y="325" width="0.3512%" height="15" fill="rgb(217,162,53)" fg:x="2032" fg:w="39"/><text x="18.5497%" y="335.50"></text></g><g><title>fastiron::main (3 samples, 0.03%)</title><rect x="18.6509%" y="357" width="0.0270%" height="15" fill="rgb(229,93,14)" fg:x="2071" fg:w="3"/><text x="18.9009%" y="367.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::sqrt (36 samples, 0.32%)</title><rect x="18.6509%" y="373" width="0.3242%" height="15" fill="rgb(209,67,49)" fg:x="2071" fg:w="36"/><text x="18.9009%" y="383.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (33 samples, 0.30%)</title><rect x="18.6780%" y="357" width="0.2972%" height="15" fill="rgb(213,87,29)" fg:x="2074" fg:w="33"/><text x="18.9280%" y="367.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (4 samples, 0.04%)</title><rect x="18.9751%" y="373" width="0.0360%" height="15" fill="rgb(205,151,52)" fg:x="2107" fg:w="4"/><text x="19.2251%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (4 samples, 0.04%)</title><rect x="18.9751%" y="357" width="0.0360%" height="15" fill="rgb(253,215,39)" fg:x="2107" fg:w="4"/><text x="19.2251%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (7 samples, 0.06%)</title><rect x="19.0472%" y="357" width="0.0630%" height="15" fill="rgb(221,220,41)" fg:x="2115" fg:w="7"/><text x="19.2972%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (12 samples, 0.11%)</title><rect x="19.1102%" y="357" width="0.1081%" height="15" fill="rgb(218,133,21)" fg:x="2122" fg:w="12"/><text x="19.3602%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (4 samples, 0.04%)</title><rect x="19.2183%" y="357" width="0.0360%" height="15" fill="rgb(221,193,43)" fg:x="2134" fg:w="4"/><text x="19.4683%" y="367.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::sqrt (2 samples, 0.02%)</title><rect x="19.2543%" y="357" width="0.0180%" height="15" fill="rgb(240,128,52)" fg:x="2138" fg:w="2"/><text x="19.5043%" y="367.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (2 samples, 0.02%)</title><rect x="19.2543%" y="341" width="0.0180%" height="15" fill="rgb(253,114,12)" fg:x="2138" fg:w="2"/><text x="19.5043%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (2 samples, 0.02%)</title><rect x="19.2723%" y="357" width="0.0180%" height="15" fill="rgb(215,223,47)" fg:x="2140" fg:w="2"/><text x="19.5223%" y="367.50"></text></g><g><title>fastiron::data::direction_cosine::DirectionCosine&lt;T&gt;::rotate_3d_vector (32 samples, 0.29%)</title><rect x="19.0112%" y="373" width="0.2882%" height="15" fill="rgb(248,225,23)" fg:x="2111" fg:w="32"/><text x="19.2612%" y="383.50"></text></g><g><title>fastiron::main (4 samples, 0.04%)</title><rect x="19.2994%" y="373" width="0.0360%" height="15" fill="rgb(250,108,0)" fg:x="2143" fg:w="4"/><text x="19.5494%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (3 samples, 0.03%)</title><rect x="19.3534%" y="357" width="0.0270%" height="15" fill="rgb(228,208,7)" fg:x="2149" fg:w="3"/><text x="19.6034%" y="367.50"></text></g><g><title>fastiron::simulation::collision_event::update_trajectory (455 samples, 4.10%)</title><rect x="15.3098%" y="389" width="4.0976%" height="15" fill="rgb(244,45,10)" fg:x="1700" fg:w="455"/><text x="15.5598%" y="399.50">fast..</text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (8 samples, 0.07%)</title><rect x="19.3354%" y="373" width="0.0720%" height="15" fill="rgb(207,125,25)" fg:x="2147" fg:w="8"/><text x="19.5854%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_mul (3 samples, 0.03%)</title><rect x="19.3804%" y="357" width="0.0270%" height="15" fill="rgb(210,195,18)" fg:x="2152" fg:w="3"/><text x="19.6304%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (38 samples, 0.34%)</title><rect x="23.8202%" y="373" width="0.3422%" height="15" fill="rgb(249,80,12)" fg:x="2645" fg:w="38"/><text x="24.0702%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (38 samples, 0.34%)</title><rect x="23.8202%" y="357" width="0.3422%" height="15" fill="rgb(221,65,9)" fg:x="2645" fg:w="38"/><text x="24.0702%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (38 samples, 0.34%)</title><rect x="23.8202%" y="341" width="0.3422%" height="15" fill="rgb(235,49,36)" fg:x="2645" fg:w="38"/><text x="24.0702%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (545 samples, 4.91%)</title><rect x="24.1625%" y="373" width="4.9081%" height="15" fill="rgb(225,32,20)" fg:x="2683" fg:w="545"/><text x="24.4125%" y="383.50">&lt;f64 a..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f64&gt;::eq (31 samples, 0.28%)</title><rect x="29.0706%" y="373" width="0.2792%" height="15" fill="rgb(215,141,46)" fg:x="3228" fg:w="31"/><text x="29.3206%" y="383.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_reaction_cross_section (374 samples, 3.37%)</title><rect x="29.3498%" y="373" width="3.3682%" height="15" fill="rgb(250,160,47)" fg:x="3259" fg:w="374"/><text x="29.5998%" y="383.50">fas..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (203 samples, 1.83%)</title><rect x="30.8898%" y="357" width="1.8282%" height="15" fill="rgb(216,222,40)" fg:x="3430" fg:w="203"/><text x="31.1398%" y="367.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (203 samples, 1.83%)</title><rect x="30.8898%" y="341" width="1.8282%" height="15" fill="rgb(234,217,39)" fg:x="3430" fg:w="203"/><text x="31.1398%" y="351.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (203 samples, 1.83%)</title><rect x="30.8898%" y="325" width="1.8282%" height="15" fill="rgb(207,178,40)" fg:x="3430" fg:w="203"/><text x="31.1398%" y="335.50">&lt;..</text></g><g><title>fastiron::simulation::macro_cross_section::macroscopic_cross_section (1,597 samples, 14.38%)</title><rect x="19.4074%" y="389" width="14.3822%" height="15" fill="rgb(221,136,13)" fg:x="2155" fg:w="1597"/><text x="19.6574%" y="399.50">fastiron::simulation::..</text></g><g><title>fastiron::main (119 samples, 1.07%)</title><rect x="32.7179%" y="373" width="1.0717%" height="15" fill="rgb(249,199,10)" fg:x="3633" fg:w="119"/><text x="32.9679%" y="383.50"></text></g><g><title>fastiron::simulation::collision_event::collision_event (3,302 samples, 29.74%)</title><rect x="4.1156%" y="405" width="29.7370%" height="15" fill="rgb(249,222,13)" fg:x="457" fg:w="3302"/><text x="4.3656%" y="415.50">fastiron::simulation::collision_event::collision..</text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (7 samples, 0.06%)</title><rect x="33.7896%" y="389" width="0.0630%" height="15" fill="rgb(244,185,38)" fg:x="3752" fg:w="7"/><text x="34.0396%" y="399.50"></text></g><g><title>fastiron::simulation::mc_facet_crossing_event::facet_crossing_event (38 samples, 0.34%)</title><rect x="33.8527%" y="405" width="0.3422%" height="15" fill="rgb(236,202,9)" fg:x="3759" fg:w="38"/><text x="34.1027%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (18 samples, 0.16%)</title><rect x="34.0328%" y="389" width="0.1621%" height="15" fill="rgb(250,229,37)" fg:x="3779" fg:w="18"/><text x="34.2828%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (9 samples, 0.08%)</title><rect x="36.2572%" y="357" width="0.0811%" height="15" fill="rgb(206,174,23)" fg:x="4026" fg:w="9"/><text x="36.5072%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (13 samples, 0.12%)</title><rect x="36.2572%" y="389" width="0.1171%" height="15" fill="rgb(211,33,43)" fg:x="4026" fg:w="13"/><text x="36.5072%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (13 samples, 0.12%)</title><rect x="36.2572%" y="373" width="0.1171%" height="15" fill="rgb(245,58,50)" fg:x="4026" fg:w="13"/><text x="36.5072%" y="383.50"></text></g><g><title>fastiron::main (4 samples, 0.04%)</title><rect x="36.3383%" y="357" width="0.0360%" height="15" fill="rgb(244,68,36)" fg:x="4035" fg:w="4"/><text x="36.5883%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (344 samples, 3.10%)</title><rect x="36.3743%" y="389" width="3.0980%" height="15" fill="rgb(232,229,15)" fg:x="4039" fg:w="344"/><text x="36.6243%" y="399.50">&lt;f6..</text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (39 samples, 0.35%)</title><rect x="39.4723%" y="389" width="0.3512%" height="15" fill="rgb(254,30,23)" fg:x="4383" fg:w="39"/><text x="39.7223%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (12 samples, 0.11%)</title><rect x="39.8235%" y="389" width="0.1081%" height="15" fill="rgb(235,160,14)" fg:x="4422" fg:w="12"/><text x="40.0735%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::SubAssign&gt;::sub_assign (50 samples, 0.45%)</title><rect x="39.9316%" y="389" width="0.4503%" height="15" fill="rgb(212,155,44)" fg:x="4434" fg:w="50"/><text x="40.1816%" y="399.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_sign_negative (18 samples, 0.16%)</title><rect x="40.3818%" y="373" width="0.1621%" height="15" fill="rgb(226,2,50)" fg:x="4484" fg:w="18"/><text x="40.6318%" y="383.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::is_sign_negative (23 samples, 0.21%)</title><rect x="40.3818%" y="389" width="0.2071%" height="15" fill="rgb(234,177,6)" fg:x="4484" fg:w="23"/><text x="40.6318%" y="399.50"></text></g><g><title>fastiron::main (5 samples, 0.05%)</title><rect x="40.5439%" y="373" width="0.0450%" height="15" fill="rgb(217,24,9)" fg:x="4502" fg:w="5"/><text x="40.7939%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f64&gt;::eq (9 samples, 0.08%)</title><rect x="40.5890%" y="389" width="0.0811%" height="15" fill="rgb(220,13,46)" fg:x="4507" fg:w="9"/><text x="40.8390%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (2 samples, 0.02%)</title><rect x="40.6700%" y="389" width="0.0180%" height="15" fill="rgb(239,221,27)" fg:x="4516" fg:w="2"/><text x="40.9200%" y="399.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::length (8 samples, 0.07%)</title><rect x="40.6880%" y="389" width="0.0720%" height="15" fill="rgb(222,198,25)" fg:x="4518" fg:w="8"/><text x="40.9380%" y="399.50"></text></g><g><title>fastiron::main (6 samples, 0.05%)</title><rect x="40.7601%" y="389" width="0.0540%" height="15" fill="rgb(211,99,13)" fg:x="4526" fg:w="6"/><text x="41.0101%" y="399.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::AddAssign&gt;::add_assign (24 samples, 0.22%)</title><rect x="40.8141%" y="373" width="0.2161%" height="15" fill="rgb(232,111,31)" fg:x="4532" fg:w="24"/><text x="41.0641%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (24 samples, 0.22%)</title><rect x="40.8141%" y="357" width="0.2161%" height="15" fill="rgb(245,82,37)" fg:x="4532" fg:w="24"/><text x="41.0641%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (8 samples, 0.07%)</title><rect x="41.0303%" y="357" width="0.0720%" height="15" fill="rgb(227,149,46)" fg:x="4556" fg:w="8"/><text x="41.2803%" y="367.50"></text></g><g><title>fastiron::particles::mc_particle::MCParticle&lt;T&gt;::move_particle (33 samples, 0.30%)</title><rect x="40.8141%" y="389" width="0.2972%" height="15" fill="rgb(218,36,50)" fg:x="4532" fg:w="33"/><text x="41.0641%" y="399.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (9 samples, 0.08%)</title><rect x="41.0303%" y="373" width="0.0811%" height="15" fill="rgb(226,80,48)" fg:x="4556" fg:w="9"/><text x="41.2803%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (16 samples, 0.14%)</title><rect x="43.9932%" y="373" width="0.1441%" height="15" fill="rgb(238,224,15)" fg:x="4885" fg:w="16"/><text x="44.2432%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (16 samples, 0.14%)</title><rect x="43.9932%" y="357" width="0.1441%" height="15" fill="rgb(241,136,10)" fg:x="4885" fg:w="16"/><text x="44.2432%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (16 samples, 0.14%)</title><rect x="43.9932%" y="341" width="0.1441%" height="15" fill="rgb(208,32,45)" fg:x="4885" fg:w="16"/><text x="44.2432%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::gt (12 samples, 0.11%)</title><rect x="44.1372%" y="373" width="0.1081%" height="15" fill="rgb(207,135,9)" fg:x="4901" fg:w="12"/><text x="44.3872%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (2 samples, 0.02%)</title><rect x="44.2453%" y="309" width="0.0180%" height="15" fill="rgb(206,86,44)" fg:x="4913" fg:w="2"/><text x="44.4953%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (4 samples, 0.04%)</title><rect x="44.2813%" y="293" width="0.0360%" height="15" fill="rgb(245,177,15)" fg:x="4917" fg:w="4"/><text x="44.5313%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.02%)</title><rect x="44.3174%" y="277" width="0.0180%" height="15" fill="rgb(206,64,50)" fg:x="4921" fg:w="2"/><text x="44.5674%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.02%)</title><rect x="44.3174%" y="261" width="0.0180%" height="15" fill="rgb(234,36,40)" fg:x="4921" fg:w="2"/><text x="44.5674%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.02%)</title><rect x="44.3174%" y="245" width="0.0180%" height="15" fill="rgb(213,64,8)" fg:x="4921" fg:w="2"/><text x="44.5674%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (6 samples, 0.05%)</title><rect x="44.3354%" y="245" width="0.0540%" height="15" fill="rgb(210,75,36)" fg:x="4923" fg:w="6"/><text x="44.5854%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (6 samples, 0.05%)</title><rect x="44.3354%" y="229" width="0.0540%" height="15" fill="rgb(229,88,21)" fg:x="4923" fg:w="6"/><text x="44.5854%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (6 samples, 0.05%)</title><rect x="44.3354%" y="213" width="0.0540%" height="15" fill="rgb(252,204,47)" fg:x="4923" fg:w="6"/><text x="44.5854%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.06%)</title><rect x="44.4885%" y="213" width="0.0630%" height="15" fill="rgb(208,77,27)" fg:x="4940" fg:w="7"/><text x="44.7385%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.06%)</title><rect x="44.4885%" y="197" width="0.0630%" height="15" fill="rgb(221,76,26)" fg:x="4940" fg:w="7"/><text x="44.7385%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (7 samples, 0.06%)</title><rect x="44.4885%" y="181" width="0.0630%" height="15" fill="rgb(225,139,18)" fg:x="4940" fg:w="7"/><text x="44.7385%" y="191.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_total_cross_section::{{closure}} (40 samples, 0.36%)</title><rect x="44.3894%" y="229" width="0.3602%" height="15" fill="rgb(230,137,11)" fg:x="4929" fg:w="40"/><text x="44.6394%" y="239.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (22 samples, 0.20%)</title><rect x="44.5515%" y="213" width="0.1981%" height="15" fill="rgb(212,28,1)" fg:x="4947" fg:w="22"/><text x="44.8015%" y="223.50"></text></g><g><title>fastiron::simulation::macro_cross_section::weighted_macroscopic_cross_section (409 samples, 3.68%)</title><rect x="41.1113%" y="389" width="3.6834%" height="15" fill="rgb(248,164,17)" fg:x="4565" fg:w="409"/><text x="41.3613%" y="399.50">fast..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (61 samples, 0.55%)</title><rect x="44.2453%" y="373" width="0.5494%" height="15" fill="rgb(222,171,42)" fg:x="4913" fg:w="61"/><text x="44.4953%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (61 samples, 0.55%)</title><rect x="44.2453%" y="357" width="0.5494%" height="15" fill="rgb(243,84,45)" fg:x="4913" fg:w="61"/><text x="44.4953%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (61 samples, 0.55%)</title><rect x="44.2453%" y="341" width="0.5494%" height="15" fill="rgb(252,49,23)" fg:x="4913" fg:w="61"/><text x="44.4953%" y="351.50"></text></g><g><title>fastiron::simulation::macro_cross_section::weighted_macroscopic_cross_section::{{closure}} (61 samples, 0.55%)</title><rect x="44.2453%" y="325" width="0.5494%" height="15" fill="rgb(215,19,7)" fg:x="4913" fg:w="61"/><text x="44.4953%" y="335.50"></text></g><g><title>fastiron::simulation::macro_cross_section::macroscopic_total_cross_section (59 samples, 0.53%)</title><rect x="44.2633%" y="309" width="0.5313%" height="15" fill="rgb(238,81,41)" fg:x="4915" fg:w="59"/><text x="44.5133%" y="319.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_total_cross_section (53 samples, 0.48%)</title><rect x="44.3174%" y="293" width="0.4773%" height="15" fill="rgb(210,199,37)" fg:x="4921" fg:w="53"/><text x="44.5674%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (51 samples, 0.46%)</title><rect x="44.3354%" y="277" width="0.4593%" height="15" fill="rgb(244,192,49)" fg:x="4923" fg:w="51"/><text x="44.5854%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (51 samples, 0.46%)</title><rect x="44.3354%" y="261" width="0.4593%" height="15" fill="rgb(226,211,11)" fg:x="4923" fg:w="51"/><text x="44.5854%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (45 samples, 0.41%)</title><rect x="44.3894%" y="245" width="0.4053%" height="15" fill="rgb(236,162,54)" fg:x="4929" fg:w="45"/><text x="44.6394%" y="255.50"></text></g><g><title>fastiron::main (5 samples, 0.05%)</title><rect x="44.7496%" y="229" width="0.0450%" height="15" fill="rgb(220,229,9)" fg:x="4969" fg:w="5"/><text x="44.9996%" y="239.50"></text></g><g><title>fastiron::simulation::mc_segment_outcome::find_min (18 samples, 0.16%)</title><rect x="44.7947%" y="389" width="0.1621%" height="15" fill="rgb(250,87,22)" fg:x="4974" fg:w="18"/><text x="45.0447%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (18 samples, 0.16%)</title><rect x="44.7947%" y="373" width="0.1621%" height="15" fill="rgb(239,43,17)" fg:x="4974" fg:w="18"/><text x="45.0447%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (18 samples, 0.16%)</title><rect x="44.7947%" y="357" width="0.1621%" height="15" fill="rgb(231,177,25)" fg:x="4974" fg:w="18"/><text x="45.0447%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (18 samples, 0.16%)</title><rect x="44.7947%" y="341" width="0.1621%" height="15" fill="rgb(219,179,1)" fg:x="4974" fg:w="18"/><text x="45.0447%" y="351.50"></text></g><g><title>fastiron::simulation::mc_segment_outcome::find_min::{{closure}} (18 samples, 0.16%)</title><rect x="44.7947%" y="325" width="0.1621%" height="15" fill="rgb(238,219,53)" fg:x="4974" fg:w="18"/><text x="45.0447%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (12 samples, 0.11%)</title><rect x="44.8487%" y="309" width="0.1081%" height="15" fill="rgb(232,167,36)" fg:x="4980" fg:w="12"/><text x="45.0987%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.05%)</title><rect x="44.9658%" y="373" width="0.0450%" height="15" fill="rgb(244,19,51)" fg:x="4993" fg:w="5"/><text x="45.2158%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.05%)</title><rect x="44.9658%" y="357" width="0.0450%" height="15" fill="rgb(224,6,22)" fg:x="4993" fg:w="5"/><text x="45.2158%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.05%)</title><rect x="44.9658%" y="341" width="0.0450%" height="15" fill="rgb(224,145,5)" fg:x="4993" fg:w="5"/><text x="45.2158%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::gt (4 samples, 0.04%)</title><rect x="45.0108%" y="373" width="0.0360%" height="15" fill="rgb(234,130,49)" fg:x="4998" fg:w="4"/><text x="45.2608%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (2 samples, 0.02%)</title><rect x="45.0468%" y="373" width="0.0180%" height="15" fill="rgb(254,6,2)" fg:x="5002" fg:w="2"/><text x="45.2968%" y="383.50"></text></g><g><title>fastiron::main (376 samples, 3.39%)</title><rect x="45.0648%" y="373" width="3.3862%" height="15" fill="rgb(208,96,46)" fg:x="5004" fg:w="376"/><text x="45.3148%" y="383.50">fas..</text></g><g><title>[libc.so.6] (323 samples, 2.91%)</title><rect x="45.5421%" y="357" width="2.9089%" height="15" fill="rgb(239,3,39)" fg:x="5057" fg:w="323"/><text x="45.7921%" y="367.50">[l..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (158 samples, 1.42%)</title><rect x="48.4960%" y="325" width="1.4229%" height="15" fill="rgb(233,210,1)" fg:x="5385" fg:w="158"/><text x="48.7460%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (158 samples, 1.42%)</title><rect x="48.4960%" y="309" width="1.4229%" height="15" fill="rgb(244,137,37)" fg:x="5385" fg:w="158"/><text x="48.7460%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (155 samples, 1.40%)</title><rect x="48.5231%" y="293" width="1.3959%" height="15" fill="rgb(240,136,2)" fg:x="5388" fg:w="155"/><text x="48.7731%" y="303.50"></text></g><g><title>fastiron::main (387 samples, 3.49%)</title><rect x="49.9189%" y="309" width="3.4852%" height="15" fill="rgb(239,18,37)" fg:x="5543" fg:w="387"/><text x="50.1689%" y="319.50">fas..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (72 samples, 0.65%)</title><rect x="59.6632%" y="293" width="0.6484%" height="15" fill="rgb(218,185,22)" fg:x="6625" fg:w="72"/><text x="59.9132%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (72 samples, 0.65%)</title><rect x="59.6632%" y="277" width="0.6484%" height="15" fill="rgb(225,218,4)" fg:x="6625" fg:w="72"/><text x="59.9132%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (72 samples, 0.65%)</title><rect x="59.6632%" y="261" width="0.6484%" height="15" fill="rgb(230,182,32)" fg:x="6625" fg:w="72"/><text x="59.9132%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (251 samples, 2.26%)</title><rect x="60.3116%" y="293" width="2.2604%" height="15" fill="rgb(242,56,43)" fg:x="6697" fg:w="251"/><text x="60.5616%" y="303.50">&lt;..</text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (157 samples, 1.41%)</title><rect x="62.5720%" y="293" width="1.4139%" height="15" fill="rgb(233,99,24)" fg:x="6948" fg:w="157"/><text x="62.8220%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::le (67 samples, 0.60%)</title><rect x="63.9860%" y="293" width="0.6034%" height="15" fill="rgb(234,209,42)" fg:x="7105" fg:w="67"/><text x="64.2360%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (705 samples, 6.35%)</title><rect x="64.5893%" y="293" width="6.3491%" height="15" fill="rgb(227,7,12)" fg:x="7172" fg:w="705"/><text x="64.8393%" y="303.50">core::op..</text></g><g><title>fastiron::main (233 samples, 2.10%)</title><rect x="70.9384%" y="293" width="2.0983%" height="15" fill="rgb(245,203,43)" fg:x="7877" fg:w="233"/><text x="71.1884%" y="303.50">f..</text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (239 samples, 2.15%)</title><rect x="81.3040%" y="277" width="2.1524%" height="15" fill="rgb(238,205,33)" fg:x="9028" fg:w="239"/><text x="81.5540%" y="287.50">&lt;..</text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (149 samples, 1.34%)</title><rect x="83.4564%" y="277" width="1.3419%" height="15" fill="rgb(231,56,7)" fg:x="9267" fg:w="149"/><text x="83.7064%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (113 samples, 1.02%)</title><rect x="84.7983%" y="277" width="1.0177%" height="15" fill="rgb(244,186,29)" fg:x="9416" fg:w="113"/><text x="85.0483%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Neg&gt;::neg (15 samples, 0.14%)</title><rect x="85.8159%" y="277" width="0.1351%" height="15" fill="rgb(234,111,31)" fg:x="9529" fg:w="15"/><text x="86.0659%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (195 samples, 1.76%)</title><rect x="85.9510%" y="277" width="1.7561%" height="15" fill="rgb(241,149,10)" fg:x="9544" fg:w="195"/><text x="86.2010%" y="287.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::abs (29 samples, 0.26%)</title><rect x="87.7071%" y="277" width="0.2612%" height="15" fill="rgb(249,206,44)" fg:x="9739" fg:w="29"/><text x="87.9571%" y="287.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::abs (29 samples, 0.26%)</title><rect x="87.7071%" y="261" width="0.2612%" height="15" fill="rgb(251,153,30)" fg:x="9739" fg:w="29"/><text x="87.9571%" y="271.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Add&gt;::add (130 samples, 1.17%)</title><rect x="87.9683%" y="277" width="1.1707%" height="15" fill="rgb(239,152,38)" fg:x="9768" fg:w="130"/><text x="88.2183%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (130 samples, 1.17%)</title><rect x="87.9683%" y="261" width="1.1707%" height="15" fill="rgb(249,139,47)" fg:x="9768" fg:w="130"/><text x="88.2183%" y="271.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (136 samples, 1.22%)</title><rect x="89.1390%" y="277" width="1.2248%" height="15" fill="rgb(244,64,35)" fg:x="9898" fg:w="136"/><text x="89.3890%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (136 samples, 1.22%)</title><rect x="89.1390%" y="261" width="1.2248%" height="15" fill="rgb(216,46,15)" fg:x="9898" fg:w="136"/><text x="89.3890%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::gt (46 samples, 0.41%)</title><rect x="90.3638%" y="277" width="0.4143%" height="15" fill="rgb(250,74,19)" fg:x="10034" fg:w="46"/><text x="90.6138%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (172 samples, 1.55%)</title><rect x="90.7781%" y="277" width="1.5490%" height="15" fill="rgb(249,42,33)" fg:x="10080" fg:w="172"/><text x="91.0281%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4,941 samples, 44.50%)</title><rect x="48.4960%" y="357" width="44.4975%" height="15" fill="rgb(242,149,17)" fg:x="5385" fg:w="4941"/><text x="48.7460%" y="367.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (4,941 samples, 44.50%)</title><rect x="48.4960%" y="341" width="44.4975%" height="15" fill="rgb(244,29,21)" fg:x="5385" fg:w="4941"/><text x="48.7460%" y="351.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4,783 samples, 43.07%)</title><rect x="49.9189%" y="325" width="43.0746%" height="15" fill="rgb(220,130,37)" fg:x="5543" fg:w="4783"/><text x="50.1689%" y="335.50">core::iter::traits::iterator::Iterator::for_each::call::{{closure}}</text></g><g><title>fastiron::simulation::mct::mct_nf_3dg::{{closure}} (4,396 samples, 39.59%)</title><rect x="53.4042%" y="309" width="39.5893%" height="15" fill="rgb(211,67,2)" fg:x="5930" fg:w="4396"/><text x="53.6542%" y="319.50">fastiron::simulation::mct::mct_nf_3dg::{{closure}}</text></g><g><title>fastiron::simulation::mct::mct_nf_3dg_dist_to_segment (2,216 samples, 19.96%)</title><rect x="73.0367%" y="293" width="19.9568%" height="15" fill="rgb(235,68,52)" fg:x="8110" fg:w="2216"/><text x="73.2867%" y="303.50">fastiron::simulation::mct::mct_..</text></g><g><title>fastiron::main (74 samples, 0.67%)</title><rect x="92.3271%" y="277" width="0.6664%" height="15" fill="rgb(246,142,3)" fg:x="10252" fg:w="74"/><text x="92.5771%" y="287.50"></text></g><g><title>fastiron::main (18 samples, 0.16%)</title><rect x="92.9935%" y="357" width="0.1621%" height="15" fill="rgb(241,25,7)" fg:x="10326" fg:w="18"/><text x="93.2435%" y="367.50"></text></g><g><title>&lt;fastiron::geometry::facets::MCNearestFacet&lt;T&gt; as core::default::Default&gt;::default (11 samples, 0.10%)</title><rect x="93.5879%" y="325" width="0.0991%" height="15" fill="rgb(242,119,39)" fg:x="10392" fg:w="11"/><text x="93.8379%" y="335.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (55 samples, 0.50%)</title><rect x="93.7680%" y="261" width="0.4953%" height="15" fill="rgb(241,98,45)" fg:x="10412" fg:w="55"/><text x="94.0180%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (55 samples, 0.50%)</title><rect x="93.7680%" y="245" width="0.4953%" height="15" fill="rgb(254,28,30)" fg:x="10412" fg:w="55"/><text x="94.0180%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (117 samples, 1.05%)</title><rect x="93.6870%" y="277" width="1.0537%" height="15" fill="rgb(241,142,54)" fg:x="10403" fg:w="117"/><text x="93.9370%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (53 samples, 0.48%)</title><rect x="94.2633%" y="261" width="0.4773%" height="15" fill="rgb(222,85,15)" fg:x="10467" fg:w="53"/><text x="94.5133%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (160 samples, 1.44%)</title><rect x="93.6870%" y="293" width="1.4409%" height="15" fill="rgb(210,85,47)" fg:x="10403" fg:w="160"/><text x="93.9370%" y="303.50"></text></g><g><title>fastiron::main (43 samples, 0.39%)</title><rect x="94.7406%" y="277" width="0.3872%" height="15" fill="rgb(224,206,25)" fg:x="10520" fg:w="43"/><text x="94.9906%" y="287.50"></text></g><g><title>fastiron::main (71 samples, 0.64%)</title><rect x="95.1279%" y="277" width="0.6394%" height="15" fill="rgb(243,201,19)" fg:x="10563" fg:w="71"/><text x="95.3779%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::gt (98 samples, 0.88%)</title><rect x="97.3973%" y="261" width="0.8826%" height="15" fill="rgb(236,59,4)" fg:x="10815" fg:w="98"/><text x="97.6473%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (650 samples, 5.85%)</title><rect x="93.6870%" y="309" width="5.8537%" height="15" fill="rgb(254,179,45)" fg:x="10403" fg:w="650"/><text x="93.9370%" y="319.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (490 samples, 4.41%)</title><rect x="95.1279%" y="293" width="4.4128%" height="15" fill="rgb(226,14,10)" fg:x="10563" fg:w="490"/><text x="95.3779%" y="303.50">core:..</text></g><g><title>fastiron::simulation::mct::mct_nf_compute_nearest::{{closure}} (419 samples, 3.77%)</title><rect x="95.7673%" y="277" width="3.7734%" height="15" fill="rgb(244,27,41)" fg:x="10634" fg:w="419"/><text x="96.0173%" y="287.50">fast..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::le (140 samples, 1.26%)</title><rect x="98.2799%" y="261" width="1.2608%" height="15" fill="rgb(235,35,32)" fg:x="10913" fg:w="140"/><text x="98.5299%" y="271.50"></text></g><g><title>fastiron::simulation::mc_segment_outcome::outcome (7,268 samples, 65.45%)</title><rect x="34.1949%" y="405" width="65.4539%" height="15" fill="rgb(218,68,31)" fg:x="3797" fg:w="7268"/><text x="34.4449%" y="415.50">fastiron::simulation::mc_segment_outcome::outcome</text></g><g><title>fastiron::simulation::mct::nearest_facet (6,073 samples, 54.69%)</title><rect x="44.9568%" y="389" width="54.6920%" height="15" fill="rgb(207,120,37)" fg:x="4992" fg:w="6073"/><text x="45.2068%" y="399.50">fastiron::simulation::mct::nearest_facet</text></g><g><title>fastiron::simulation::mct::mct_nf_3dg (5,685 samples, 51.20%)</title><rect x="48.4510%" y="373" width="51.1978%" height="15" fill="rgb(227,98,0)" fg:x="5380" fg:w="5685"/><text x="48.7010%" y="383.50">fastiron::simulation::mct::mct_nf_3dg</text></g><g><title>fastiron::simulation::mct::mct_nf_find_nearest (721 samples, 6.49%)</title><rect x="93.1556%" y="357" width="6.4932%" height="15" fill="rgb(207,7,3)" fg:x="10344" fg:w="721"/><text x="93.4056%" y="367.50">fastiron:..</text></g><g><title>fastiron::simulation::mct::mct_nf_compute_nearest (696 samples, 6.27%)</title><rect x="93.3808%" y="341" width="6.2680%" height="15" fill="rgb(206,98,19)" fg:x="10369" fg:w="696"/><text x="93.6308%" y="351.50">fastiron..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (662 samples, 5.96%)</title><rect x="93.6870%" y="325" width="5.9618%" height="15" fill="rgb(217,5,26)" fg:x="10403" fg:w="662"/><text x="93.9370%" y="335.50">core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call (12 samples, 0.11%)</title><rect x="99.5407%" y="309" width="0.1081%" height="15" fill="rgb(235,190,38)" fg:x="11053" fg:w="12"/><text x="99.7907%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (2 samples, 0.02%)</title><rect x="99.7208%" y="389" width="0.0180%" height="15" fill="rgb(247,86,24)" fg:x="11073" fg:w="2"/><text x="99.9708%" y="399.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (2 samples, 0.02%)</title><rect x="99.7478%" y="389" width="0.0180%" height="15" fill="rgb(205,101,16)" fg:x="11076" fg:w="2"/><text x="99.9978%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (2 samples, 0.02%)</title><rect x="99.7478%" y="373" width="0.0180%" height="15" fill="rgb(246,168,33)" fg:x="11076" fg:w="2"/><text x="99.9978%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (4 samples, 0.04%)</title><rect x="99.8559%" y="373" width="0.0360%" height="15" fill="rgb(231,114,1)" fg:x="11088" fg:w="4"/><text x="100.1059%" y="383.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (10,878 samples, 97.96%)</title><rect x="1.9633%" y="469" width="97.9647%" height="15" fill="rgb(207,184,53)" fg:x="218" fg:w="10878"/><text x="2.2133%" y="479.50">&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each</text></g><g><title>fastiron::cycle_tracking::{{closure}} (10,878 samples, 97.96%)</title><rect x="1.9633%" y="453" width="97.9647%" height="15" fill="rgb(224,95,51)" fg:x="218" fg:w="10878"/><text x="2.2133%" y="463.50">fastiron::cycle_tracking::{{closure}}</text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_guts (10,865 samples, 97.85%)</title><rect x="2.0803%" y="437" width="97.8476%" height="15" fill="rgb(212,188,45)" fg:x="231" fg:w="10865"/><text x="2.3303%" y="447.50">fastiron::simulation::cycle_tracking::cycle_tracking_guts</text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_function (10,803 samples, 97.29%)</title><rect x="2.6387%" y="421" width="97.2893%" height="15" fill="rgb(223,154,38)" fg:x="293" fg:w="10803"/><text x="2.8887%" y="431.50">fastiron::simulation::cycle_tracking::cycle_tracking_function</text></g><g><title>fastiron::simulation::mct::reflect_particle (31 samples, 0.28%)</title><rect x="99.6488%" y="405" width="0.2792%" height="15" fill="rgb(251,22,52)" fg:x="11065" fg:w="31"/><text x="99.8988%" y="415.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::dot (17 samples, 0.15%)</title><rect x="99.7749%" y="389" width="0.1531%" height="15" fill="rgb(229,209,22)" fg:x="11079" fg:w="17"/><text x="100.0249%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (4 samples, 0.04%)</title><rect x="99.8919%" y="373" width="0.0360%" height="15" fill="rgb(234,138,34)" fg:x="11092" fg:w="4"/><text x="100.1419%" y="383.50"></text></g><g><title>fastiron::cycle_tracking (10,881 samples, 97.99%)</title><rect x="1.9633%" y="485" width="97.9917%" height="15" fill="rgb(212,95,11)" fg:x="218" fg:w="10881"/><text x="2.2133%" y="495.50">fastiron::cycle_tracking</text></g><g><title>fastiron::main (3 samples, 0.03%)</title><rect x="99.9280%" y="469" width="0.0270%" height="15" fill="rgb(240,179,47)" fg:x="11096" fg:w="3"/><text x="100.1780%" y="479.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::assign_cells_to_domain (2 samples, 0.02%)</title><rect x="99.9550%" y="373" width="0.0180%" height="15" fill="rgb(240,163,11)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="383.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood (2 samples, 0.02%)</title><rect x="99.9550%" y="357" width="0.0180%" height="15" fill="rgb(236,37,12)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.02%)</title><rect x="99.9550%" y="341" width="0.0180%" height="15" fill="rgb(232,164,16)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="99.9550%" y="325" width="0.0180%" height="15" fill="rgb(244,205,15)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 0.02%)</title><rect x="99.9550%" y="309" width="0.0180%" height="15" fill="rgb(223,117,47)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="319.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood::{{closure}} (2 samples, 0.02%)</title><rect x="99.9550%" y="293" width="0.0180%" height="15" fill="rgb(244,107,35)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.02%)</title><rect x="99.9550%" y="277" width="0.0180%" height="15" fill="rgb(205,140,8)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="99.9550%" y="261" width="0.0180%" height="15" fill="rgb(228,84,46)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 0.02%)</title><rect x="99.9550%" y="245" width="0.0180%" height="15" fill="rgb(254,188,9)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="255.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="99.9550%" y="229" width="0.0180%" height="15" fill="rgb(206,112,54)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.02%)</title><rect x="99.9550%" y="213" width="0.0180%" height="15" fill="rgb(216,84,49)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="99.9550%" y="197" width="0.0180%" height="15" fill="rgb(214,194,35)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 0.02%)</title><rect x="99.9550%" y="181" width="0.0180%" height="15" fill="rgb(249,28,3)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="191.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood::{{closure}}::{{closure}}::{{closure}} (2 samples, 0.02%)</title><rect x="99.9550%" y="165" width="0.0180%" height="15" fill="rgb(222,56,52)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (2 samples, 0.02%)</title><rect x="99.9550%" y="149" width="0.0180%" height="15" fill="rgb(245,217,50)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="159.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (2 samples, 0.02%)</title><rect x="99.9550%" y="133" width="0.0180%" height="15" fill="rgb(213,201,24)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (2 samples, 0.02%)</title><rect x="99.9550%" y="117" width="0.0180%" height="15" fill="rgb(248,116,28)" fg:x="11099" fg:w="2"/><text x="100.2050%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.03%)</title><rect x="99.9550%" y="453" width="0.0270%" height="15" fill="rgb(219,72,43)" fg:x="11099" fg:w="3"/><text x="100.2050%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.03%)</title><rect x="99.9550%" y="437" width="0.0270%" height="15" fill="rgb(209,138,14)" fg:x="11099" fg:w="3"/><text x="100.2050%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3 samples, 0.03%)</title><rect x="99.9550%" y="421" width="0.0270%" height="15" fill="rgb(222,18,33)" fg:x="11099" fg:w="3"/><text x="100.2050%" y="431.50"></text></g><g><title>fastiron::init::init_mesh::{{closure}} (3 samples, 0.03%)</title><rect x="99.9550%" y="405" width="0.0270%" height="15" fill="rgb(213,199,7)" fg:x="11099" fg:w="3"/><text x="100.2050%" y="415.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::build_mesh_partition (3 samples, 0.03%)</title><rect x="99.9550%" y="389" width="0.0270%" height="15" fill="rgb(250,110,10)" fg:x="11099" fg:w="3"/><text x="100.2050%" y="399.50"></text></g><g><title>__libc_start_main_impl (10,986 samples, 98.94%)</title><rect x="1.0537%" y="581" width="98.9373%" height="15" fill="rgb(248,123,6)" fg:x="117" fg:w="10986"/><text x="1.3037%" y="591.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (10,986 samples, 98.94%)</title><rect x="1.0537%" y="565" width="98.9373%" height="15" fill="rgb(206,91,31)" fg:x="117" fg:w="10986"/><text x="1.3037%" y="575.50">__libc_start_call_main</text></g><g><title>main (10,986 samples, 98.94%)</title><rect x="1.0537%" y="549" width="98.9373%" height="15" fill="rgb(211,154,13)" fg:x="117" fg:w="10986"/><text x="1.3037%" y="559.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (10,986 samples, 98.94%)</title><rect x="1.0537%" y="533" width="98.9373%" height="15" fill="rgb(225,148,7)" fg:x="117" fg:w="10986"/><text x="1.3037%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (10,986 samples, 98.94%)</title><rect x="1.0537%" y="517" width="98.9373%" height="15" fill="rgb(220,160,43)" fg:x="117" fg:w="10986"/><text x="1.3037%" y="527.50">core::ops::function::FnOnce::call_once</text></g><g><title>fastiron::main (10,986 samples, 98.94%)</title><rect x="1.0537%" y="501" width="98.9373%" height="15" fill="rgb(213,52,39)" fg:x="117" fg:w="10986"/><text x="1.3037%" y="511.50">fastiron::main</text></g><g><title>fastiron::init::init_mc (4 samples, 0.04%)</title><rect x="99.9550%" y="485" width="0.0360%" height="15" fill="rgb(243,137,7)" fg:x="11099" fg:w="4"/><text x="100.2050%" y="495.50"></text></g><g><title>fastiron::init::init_mesh (4 samples, 0.04%)</title><rect x="99.9550%" y="469" width="0.0360%" height="15" fill="rgb(230,79,13)" fg:x="11099" fg:w="4"/><text x="100.2050%" y="479.50"></text></g><g><title>all (11,104 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(247,105,23)" fg:x="0" fg:w="11104"/><text x="0.2500%" y="639.50"></text></g><g><title>fastiron (11,104 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(223,179,41)" fg:x="0" fg:w="11104"/><text x="0.2500%" y="623.50">fastiron</text></g><g><title>_start (10,992 samples, 98.99%)</title><rect x="1.0086%" y="597" width="98.9914%" height="15" fill="rgb(218,9,34)" fg:x="112" fg:w="10992"/><text x="1.2586%" y="607.50">_start</text></g></svg></svg>