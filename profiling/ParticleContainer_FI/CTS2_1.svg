<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="678" onload="init(evt)" viewBox="0 0 1200 678" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="678" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="661.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="661.00"> </text><svg id="frames" x="10" width="1180" total_samples="378717"><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (128 samples, 0.03%)</title><rect x="0.0063%" y="581" width="0.0338%" height="15" fill="rgb(227,0,7)" fg:x="24" fg:w="128"/><text x="0.2563%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (128 samples, 0.03%)</title><rect x="0.0063%" y="565" width="0.0338%" height="15" fill="rgb(217,0,24)" fg:x="24" fg:w="128"/><text x="0.2563%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (93 samples, 0.02%)</title><rect x="0.0156%" y="549" width="0.0246%" height="15" fill="rgb(221,193,54)" fg:x="59" fg:w="93"/><text x="0.2656%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (93 samples, 0.02%)</title><rect x="0.0156%" y="533" width="0.0246%" height="15" fill="rgb(248,212,6)" fg:x="59" fg:w="93"/><text x="0.2656%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (119 samples, 0.03%)</title><rect x="0.0436%" y="469" width="0.0314%" height="15" fill="rgb(208,68,35)" fg:x="165" fg:w="119"/><text x="0.2936%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (119 samples, 0.03%)</title><rect x="0.0436%" y="453" width="0.0314%" height="15" fill="rgb(232,128,0)" fg:x="165" fg:w="119"/><text x="0.2936%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (119 samples, 0.03%)</title><rect x="0.0436%" y="437" width="0.0314%" height="15" fill="rgb(207,160,47)" fg:x="165" fg:w="119"/><text x="0.2936%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (119 samples, 0.03%)</title><rect x="0.0436%" y="421" width="0.0314%" height="15" fill="rgb(228,23,34)" fg:x="165" fg:w="119"/><text x="0.2936%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (119 samples, 0.03%)</title><rect x="0.0436%" y="405" width="0.0314%" height="15" fill="rgb(218,30,26)" fg:x="165" fg:w="119"/><text x="0.2936%" y="415.50"></text></g><g><title>__rdl_dealloc (119 samples, 0.03%)</title><rect x="0.0436%" y="389" width="0.0314%" height="15" fill="rgb(220,122,19)" fg:x="165" fg:w="119"/><text x="0.2936%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (119 samples, 0.03%)</title><rect x="0.0436%" y="373" width="0.0314%" height="15" fill="rgb(250,228,42)" fg:x="165" fg:w="119"/><text x="0.2936%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (86 samples, 0.02%)</title><rect x="0.0787%" y="453" width="0.0227%" height="15" fill="rgb(240,193,28)" fg:x="298" fg:w="86"/><text x="0.3287%" y="463.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearDataReaction&lt;T&gt;::sample_collision (113 samples, 0.03%)</title><rect x="0.0750%" y="469" width="0.0298%" height="15" fill="rgb(216,20,37)" fg:x="284" fg:w="113"/><text x="0.3250%" y="479.50"></text></g><g><title>fastiron::simulation::collision_event::collision_event (260 samples, 0.07%)</title><rect x="0.0436%" y="485" width="0.0687%" height="15" fill="rgb(206,188,39)" fg:x="165" fg:w="260"/><text x="0.2936%" y="495.50"></text></g><g><title>[[heap]] (544 samples, 0.14%)</title><rect x="0.0000%" y="597" width="0.1436%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="544"/><text x="0.2500%" y="607.50"></text></g><g><title>fastiron::main (379 samples, 0.10%)</title><rect x="0.0436%" y="581" width="0.1001%" height="15" fill="rgb(231,73,38)" fg:x="165" fg:w="379"/><text x="0.2936%" y="591.50"></text></g><g><title>fastiron::cycle_tracking (379 samples, 0.10%)</title><rect x="0.0436%" y="565" width="0.1001%" height="15" fill="rgb(225,20,46)" fg:x="165" fg:w="379"/><text x="0.2936%" y="575.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (379 samples, 0.10%)</title><rect x="0.0436%" y="549" width="0.1001%" height="15" fill="rgb(210,31,41)" fg:x="165" fg:w="379"/><text x="0.2936%" y="559.50"></text></g><g><title>fastiron::cycle_tracking::{{closure}} (379 samples, 0.10%)</title><rect x="0.0436%" y="533" width="0.1001%" height="15" fill="rgb(221,200,47)" fg:x="165" fg:w="379"/><text x="0.2936%" y="543.50"></text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_guts (379 samples, 0.10%)</title><rect x="0.0436%" y="517" width="0.1001%" height="15" fill="rgb(226,26,5)" fg:x="165" fg:w="379"/><text x="0.2936%" y="527.50"></text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_function (379 samples, 0.10%)</title><rect x="0.0436%" y="501" width="0.1001%" height="15" fill="rgb(249,33,26)" fg:x="165" fg:w="379"/><text x="0.2936%" y="511.50"></text></g><g><title>fastiron::simulation::mc_segment_outcome::outcome (119 samples, 0.03%)</title><rect x="0.1122%" y="485" width="0.0314%" height="15" fill="rgb(235,183,28)" fg:x="425" fg:w="119"/><text x="0.3622%" y="495.50"></text></g><g><title>fastiron::simulation::mct::nearest_facet (119 samples, 0.03%)</title><rect x="0.1122%" y="469" width="0.0314%" height="15" fill="rgb(221,5,38)" fg:x="425" fg:w="119"/><text x="0.3622%" y="479.50"></text></g><g><title>fastiron::main (119 samples, 0.03%)</title><rect x="0.1122%" y="453" width="0.0314%" height="15" fill="rgb(247,18,42)" fg:x="425" fg:w="119"/><text x="0.3622%" y="463.50"></text></g><g><title>__sincos (59 samples, 0.02%)</title><rect x="0.1436%" y="581" width="0.0156%" height="15" fill="rgb(241,131,45)" fg:x="544" fg:w="59"/><text x="0.3936%" y="591.50"></text></g><g><title>[[stack]] (243 samples, 0.06%)</title><rect x="0.1436%" y="597" width="0.0642%" height="15" fill="rgb(249,31,29)" fg:x="544" fg:w="243"/><text x="0.3936%" y="607.50"></text></g><g><title>alloc::raw_vec::finish_grow (180 samples, 0.05%)</title><rect x="0.1603%" y="581" width="0.0475%" height="15" fill="rgb(225,111,53)" fg:x="607" fg:w="180"/><text x="0.4103%" y="591.50"></text></g><g><title>__GI___libc_free (285 samples, 0.08%)</title><rect x="0.2118%" y="581" width="0.0753%" height="15" fill="rgb(238,160,17)" fg:x="802" fg:w="285"/><text x="0.4618%" y="591.50"></text></g><g><title>__GI___libc_malloc (236 samples, 0.06%)</title><rect x="0.2870%" y="581" width="0.0623%" height="15" fill="rgb(214,148,48)" fg:x="1087" fg:w="236"/><text x="0.5370%" y="591.50"></text></g><g><title>__sincos (114 samples, 0.03%)</title><rect x="0.3570%" y="581" width="0.0301%" height="15" fill="rgb(232,36,49)" fg:x="1352" fg:w="114"/><text x="0.6070%" y="591.50"></text></g><g><title>_int_free (406 samples, 0.11%)</title><rect x="0.3871%" y="581" width="0.1072%" height="15" fill="rgb(209,103,24)" fg:x="1466" fg:w="406"/><text x="0.6371%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (141 samples, 0.04%)</title><rect x="0.4969%" y="581" width="0.0372%" height="15" fill="rgb(229,88,8)" fg:x="1882" fg:w="141"/><text x="0.7469%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (50 samples, 0.01%)</title><rect x="0.5210%" y="565" width="0.0132%" height="15" fill="rgb(213,181,19)" fg:x="1973" fg:w="50"/><text x="0.7710%" y="575.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (50 samples, 0.01%)</title><rect x="0.5210%" y="549" width="0.0132%" height="15" fill="rgb(254,191,54)" fg:x="1973" fg:w="50"/><text x="0.7710%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (50 samples, 0.01%)</title><rect x="0.5210%" y="533" width="0.0132%" height="15" fill="rgb(241,83,37)" fg:x="1973" fg:w="50"/><text x="0.7710%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (519 samples, 0.14%)</title><rect x="0.5342%" y="581" width="0.1370%" height="15" fill="rgb(233,36,39)" fg:x="2023" fg:w="519"/><text x="0.7842%" y="591.50"></text></g><g><title>[unknown] (1,772 samples, 0.47%)</title><rect x="0.2078%" y="597" width="0.4679%" height="15" fill="rgb(226,3,54)" fg:x="787" fg:w="1772"/><text x="0.4578%" y="607.50"></text></g><g><title>__GI___libc_free (40 samples, 0.01%)</title><rect x="0.6757%" y="597" width="0.0106%" height="15" fill="rgb(245,192,40)" fg:x="2559" fg:w="40"/><text x="0.9257%" y="607.50"></text></g><g><title>fastiron::data::tallies::FluenceDomain&lt;T&gt;::compute (110 samples, 0.03%)</title><rect x="0.6942%" y="389" width="0.0290%" height="15" fill="rgb(238,167,29)" fg:x="2629" fg:w="110"/><text x="0.9442%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (110 samples, 0.03%)</title><rect x="0.6942%" y="373" width="0.0290%" height="15" fill="rgb(232,182,51)" fg:x="2629" fg:w="110"/><text x="0.9442%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (110 samples, 0.03%)</title><rect x="0.6942%" y="357" width="0.0290%" height="15" fill="rgb(231,60,39)" fg:x="2629" fg:w="110"/><text x="0.9442%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (110 samples, 0.03%)</title><rect x="0.6942%" y="341" width="0.0290%" height="15" fill="rgb(208,69,12)" fg:x="2629" fg:w="110"/><text x="0.9442%" y="351.50"></text></g><g><title>fastiron::data::tallies::FluenceDomain&lt;T&gt;::compute::{{closure}} (110 samples, 0.03%)</title><rect x="0.6942%" y="325" width="0.0290%" height="15" fill="rgb(235,93,37)" fg:x="2629" fg:w="110"/><text x="0.9442%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (109 samples, 0.03%)</title><rect x="0.6944%" y="309" width="0.0288%" height="15" fill="rgb(213,116,39)" fg:x="2630" fg:w="109"/><text x="0.9444%" y="319.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (109 samples, 0.03%)</title><rect x="0.6944%" y="293" width="0.0288%" height="15" fill="rgb(222,207,29)" fg:x="2630" fg:w="109"/><text x="0.9444%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (109 samples, 0.03%)</title><rect x="0.6944%" y="277" width="0.0288%" height="15" fill="rgb(206,96,30)" fg:x="2630" fg:w="109"/><text x="0.9444%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (109 samples, 0.03%)</title><rect x="0.6944%" y="261" width="0.0288%" height="15" fill="rgb(218,138,4)" fg:x="2630" fg:w="109"/><text x="0.9444%" y="271.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::{{closure}} (106 samples, 0.03%)</title><rect x="0.6952%" y="245" width="0.0280%" height="15" fill="rgb(250,191,14)" fg:x="2633" fg:w="106"/><text x="0.9452%" y="255.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (106 samples, 0.03%)</title><rect x="0.6952%" y="229" width="0.0280%" height="15" fill="rgb(239,60,40)" fg:x="2633" fg:w="106"/><text x="0.9452%" y="239.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (67 samples, 0.02%)</title><rect x="0.7238%" y="325" width="0.0177%" height="15" fill="rgb(206,27,48)" fg:x="2741" fg:w="67"/><text x="0.9738%" y="335.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::cycle_finalize (181 samples, 0.05%)</title><rect x="0.6939%" y="469" width="0.0478%" height="15" fill="rgb(225,35,8)" fg:x="2628" fg:w="181"/><text x="0.9439%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (181 samples, 0.05%)</title><rect x="0.6939%" y="453" width="0.0478%" height="15" fill="rgb(250,213,24)" fg:x="2628" fg:w="181"/><text x="0.9439%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (181 samples, 0.05%)</title><rect x="0.6939%" y="437" width="0.0478%" height="15" fill="rgb(247,123,22)" fg:x="2628" fg:w="181"/><text x="0.9439%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (180 samples, 0.05%)</title><rect x="0.6942%" y="421" width="0.0475%" height="15" fill="rgb(231,138,38)" fg:x="2629" fg:w="180"/><text x="0.9442%" y="431.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::cycle_finalize::{{closure}} (180 samples, 0.05%)</title><rect x="0.6942%" y="405" width="0.0475%" height="15" fill="rgb(231,145,46)" fg:x="2629" fg:w="180"/><text x="0.9442%" y="415.50"></text></g><g><title>fastiron::data::tallies::ScalarFluxDomain&lt;T&gt;::reset (70 samples, 0.02%)</title><rect x="0.7232%" y="389" width="0.0185%" height="15" fill="rgb(251,118,11)" fg:x="2739" fg:w="70"/><text x="0.9732%" y="399.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (70 samples, 0.02%)</title><rect x="0.7232%" y="373" width="0.0185%" height="15" fill="rgb(217,147,25)" fg:x="2739" fg:w="70"/><text x="0.9732%" y="383.50"></text></g><g><title>fastiron::data::tallies::ScalarFluxDomain&lt;T&gt;::reset::{{closure}} (68 samples, 0.02%)</title><rect x="0.7238%" y="357" width="0.0180%" height="15" fill="rgb(247,81,37)" fg:x="2741" fg:w="68"/><text x="0.9738%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (68 samples, 0.02%)</title><rect x="0.7238%" y="341" width="0.0180%" height="15" fill="rgb(209,12,38)" fg:x="2741" fg:w="68"/><text x="0.9738%" y="351.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::scalar_flux_sum (105 samples, 0.03%)</title><rect x="0.7417%" y="453" width="0.0277%" height="15" fill="rgb(227,1,9)" fg:x="2809" fg:w="105"/><text x="0.9917%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (105 samples, 0.03%)</title><rect x="0.7417%" y="437" width="0.0277%" height="15" fill="rgb(248,47,43)" fg:x="2809" fg:w="105"/><text x="0.9917%" y="447.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (105 samples, 0.03%)</title><rect x="0.7417%" y="421" width="0.0277%" height="15" fill="rgb(221,10,30)" fg:x="2809" fg:w="105"/><text x="0.9917%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (105 samples, 0.03%)</title><rect x="0.7417%" y="405" width="0.0277%" height="15" fill="rgb(210,229,1)" fg:x="2809" fg:w="105"/><text x="0.9917%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (105 samples, 0.03%)</title><rect x="0.7417%" y="389" width="0.0277%" height="15" fill="rgb(222,148,37)" fg:x="2809" fg:w="105"/><text x="0.9917%" y="399.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (105 samples, 0.03%)</title><rect x="0.7417%" y="373" width="0.0277%" height="15" fill="rgb(234,67,33)" fg:x="2809" fg:w="105"/><text x="0.9917%" y="383.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::scalar_flux_sum::{{closure}} (105 samples, 0.03%)</title><rect x="0.7417%" y="357" width="0.0277%" height="15" fill="rgb(247,98,35)" fg:x="2809" fg:w="105"/><text x="0.9917%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (105 samples, 0.03%)</title><rect x="0.7417%" y="341" width="0.0277%" height="15" fill="rgb(247,138,52)" fg:x="2809" fg:w="105"/><text x="0.9917%" y="351.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (105 samples, 0.03%)</title><rect x="0.7417%" y="325" width="0.0277%" height="15" fill="rgb(213,79,30)" fg:x="2809" fg:w="105"/><text x="0.9917%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (105 samples, 0.03%)</title><rect x="0.7417%" y="309" width="0.0277%" height="15" fill="rgb(246,177,23)" fg:x="2809" fg:w="105"/><text x="0.9917%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (105 samples, 0.03%)</title><rect x="0.7417%" y="293" width="0.0277%" height="15" fill="rgb(230,62,27)" fg:x="2809" fg:w="105"/><text x="0.9917%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (105 samples, 0.03%)</title><rect x="0.7417%" y="277" width="0.0277%" height="15" fill="rgb(216,154,8)" fg:x="2809" fg:w="105"/><text x="0.9917%" y="287.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::scalar_flux_sum::{{closure}}::{{closure}} (104 samples, 0.03%)</title><rect x="0.7420%" y="261" width="0.0275%" height="15" fill="rgb(244,35,45)" fg:x="2810" fg:w="104"/><text x="0.9920%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (104 samples, 0.03%)</title><rect x="0.7420%" y="245" width="0.0275%" height="15" fill="rgb(251,115,12)" fg:x="2810" fg:w="104"/><text x="0.9920%" y="255.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (104 samples, 0.03%)</title><rect x="0.7420%" y="229" width="0.0275%" height="15" fill="rgb(240,54,50)" fg:x="2810" fg:w="104"/><text x="0.9920%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (104 samples, 0.03%)</title><rect x="0.7420%" y="213" width="0.0275%" height="15" fill="rgb(233,84,52)" fg:x="2810" fg:w="104"/><text x="0.9920%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (104 samples, 0.03%)</title><rect x="0.7420%" y="197" width="0.0275%" height="15" fill="rgb(207,117,47)" fg:x="2810" fg:w="104"/><text x="0.9920%" y="207.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::{{closure}} (100 samples, 0.03%)</title><rect x="0.7430%" y="181" width="0.0264%" height="15" fill="rgb(249,43,39)" fg:x="2814" fg:w="100"/><text x="0.9930%" y="191.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (100 samples, 0.03%)</title><rect x="0.7430%" y="165" width="0.0264%" height="15" fill="rgb(209,38,44)" fg:x="2814" fg:w="100"/><text x="0.9930%" y="175.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::print_summary (108 samples, 0.03%)</title><rect x="0.7417%" y="469" width="0.0285%" height="15" fill="rgb(236,212,23)" fg:x="2809" fg:w="108"/><text x="0.9917%" y="479.50"></text></g><g><title>fastiron::cycle_finalize (323 samples, 0.09%)</title><rect x="0.6939%" y="485" width="0.0853%" height="15" fill="rgb(242,79,21)" fg:x="2628" fg:w="323"/><text x="0.9439%" y="495.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (100 samples, 0.03%)</title><rect x="0.7808%" y="357" width="0.0264%" height="15" fill="rgb(211,96,35)" fg:x="2957" fg:w="100"/><text x="1.0308%" y="367.50"></text></g><g><title>fastiron::montecarlo::MonteCarlo&lt;T&gt;::clear_cross_section_cache (107 samples, 0.03%)</title><rect x="0.7792%" y="469" width="0.0283%" height="15" fill="rgb(253,215,40)" fg:x="2951" fg:w="107"/><text x="1.0292%" y="479.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (107 samples, 0.03%)</title><rect x="0.7792%" y="453" width="0.0283%" height="15" fill="rgb(211,81,21)" fg:x="2951" fg:w="107"/><text x="1.0292%" y="463.50"></text></g><g><title>fastiron::montecarlo::MonteCarlo&lt;T&gt;::clear_cross_section_cache::{{closure}} (107 samples, 0.03%)</title><rect x="0.7792%" y="437" width="0.0283%" height="15" fill="rgb(208,190,38)" fg:x="2951" fg:w="107"/><text x="1.0292%" y="447.50"></text></g><g><title>fastiron::geometry::mc_domain::MCDomain&lt;T&gt;::clear_cross_section_cache (107 samples, 0.03%)</title><rect x="0.7792%" y="421" width="0.0283%" height="15" fill="rgb(235,213,38)" fg:x="2951" fg:w="107"/><text x="1.0292%" y="431.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (107 samples, 0.03%)</title><rect x="0.7792%" y="405" width="0.0283%" height="15" fill="rgb(237,122,38)" fg:x="2951" fg:w="107"/><text x="1.0292%" y="415.50"></text></g><g><title>fastiron::geometry::mc_domain::MCDomain&lt;T&gt;::clear_cross_section_cache::{{closure}} (101 samples, 0.03%)</title><rect x="0.7808%" y="389" width="0.0267%" height="15" fill="rgb(244,218,35)" fg:x="2957" fg:w="101"/><text x="1.0308%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (101 samples, 0.03%)</title><rect x="0.7808%" y="373" width="0.0267%" height="15" fill="rgb(240,68,47)" fg:x="2957" fg:w="101"/><text x="1.0308%" y="383.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt; as core::clone::Clone&gt;::clone (39 samples, 0.01%)</title><rect x="0.8096%" y="341" width="0.0103%" height="15" fill="rgb(210,16,53)" fg:x="3066" fg:w="39"/><text x="1.0596%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (51 samples, 0.01%)</title><rect x="0.8090%" y="389" width="0.0135%" height="15" fill="rgb(235,124,12)" fg:x="3064" fg:w="51"/><text x="1.0590%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (50 samples, 0.01%)</title><rect x="0.8093%" y="373" width="0.0132%" height="15" fill="rgb(224,169,11)" fg:x="3065" fg:w="50"/><text x="1.0593%" y="383.50"></text></g><g><title>fastiron::simulation::population_control::population_control_guts::{{closure}}::{{closure}} (49 samples, 0.01%)</title><rect x="0.8096%" y="357" width="0.0129%" height="15" fill="rgb(250,166,2)" fg:x="3066" fg:w="49"/><text x="1.0596%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (59 samples, 0.02%)</title><rect x="0.8090%" y="405" width="0.0156%" height="15" fill="rgb(242,216,29)" fg:x="3064" fg:w="59"/><text x="1.0590%" y="415.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (66 samples, 0.02%)</title><rect x="0.8075%" y="437" width="0.0174%" height="15" fill="rgb(230,116,27)" fg:x="3058" fg:w="66"/><text x="1.0575%" y="447.50"></text></g><g><title>fastiron::simulation::population_control::population_control_guts::{{closure}} (64 samples, 0.02%)</title><rect x="0.8080%" y="421" width="0.0169%" height="15" fill="rgb(228,99,48)" fg:x="3060" fg:w="64"/><text x="1.0580%" y="431.50"></text></g><g><title>fastiron::simulation::population_control::population_control (147 samples, 0.04%)</title><rect x="0.8075%" y="469" width="0.0388%" height="15" fill="rgb(253,11,6)" fg:x="3058" fg:w="147"/><text x="1.0575%" y="479.50"></text></g><g><title>fastiron::simulation::population_control::population_control_guts (147 samples, 0.04%)</title><rect x="0.8075%" y="453" width="0.0388%" height="15" fill="rgb(247,143,39)" fg:x="3058" fg:w="147"/><text x="1.0575%" y="463.50"></text></g><g><title>fastiron::particles::particle_container::ParticleContainer&lt;T&gt;::clean_extra_vaults (75 samples, 0.02%)</title><rect x="0.8265%" y="437" width="0.0198%" height="15" fill="rgb(236,97,10)" fg:x="3130" fg:w="75"/><text x="1.0765%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (75 samples, 0.02%)</title><rect x="0.8265%" y="421" width="0.0198%" height="15" fill="rgb(233,208,19)" fg:x="3130" fg:w="75"/><text x="1.0765%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (75 samples, 0.02%)</title><rect x="0.8265%" y="405" width="0.0198%" height="15" fill="rgb(216,164,2)" fg:x="3130" fg:w="75"/><text x="1.0765%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (75 samples, 0.02%)</title><rect x="0.8265%" y="389" width="0.0198%" height="15" fill="rgb(220,129,5)" fg:x="3130" fg:w="75"/><text x="1.0765%" y="399.50"></text></g><g><title>[libc.so.6] (75 samples, 0.02%)</title><rect x="0.8265%" y="373" width="0.0198%" height="15" fill="rgb(242,17,10)" fg:x="3130" fg:w="75"/><text x="1.0765%" y="383.50"></text></g><g><title>fastiron::simulation::population_control::roulette_low_weight_particles (69 samples, 0.02%)</title><rect x="0.8463%" y="469" width="0.0182%" height="15" fill="rgb(242,107,0)" fg:x="3205" fg:w="69"/><text x="1.0963%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (69 samples, 0.02%)</title><rect x="0.8463%" y="453" width="0.0182%" height="15" fill="rgb(251,28,31)" fg:x="3205" fg:w="69"/><text x="1.0963%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (69 samples, 0.02%)</title><rect x="0.8463%" y="437" width="0.0182%" height="15" fill="rgb(233,223,10)" fg:x="3205" fg:w="69"/><text x="1.0963%" y="447.50"></text></g><g><title>fastiron::simulation::mct::cell_position_3dg (52 samples, 0.01%)</title><rect x="0.8782%" y="117" width="0.0137%" height="15" fill="rgb(215,21,27)" fg:x="3326" fg:w="52"/><text x="1.1282%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (50 samples, 0.01%)</title><rect x="0.8788%" y="101" width="0.0132%" height="15" fill="rgb(232,23,21)" fg:x="3328" fg:w="50"/><text x="1.1288%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (50 samples, 0.01%)</title><rect x="0.8788%" y="85" width="0.0132%" height="15" fill="rgb(244,5,23)" fg:x="3328" fg:w="50"/><text x="1.1288%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (50 samples, 0.01%)</title><rect x="0.8788%" y="69" width="0.0132%" height="15" fill="rgb(226,81,46)" fg:x="3328" fg:w="50"/><text x="1.1288%" y="79.50"></text></g><g><title>fastiron::simulation::mct::cell_position_3dg::{{closure}} (50 samples, 0.01%)</title><rect x="0.8788%" y="53" width="0.0132%" height="15" fill="rgb(247,70,30)" fg:x="3328" fg:w="50"/><text x="1.1288%" y="63.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::cross (38 samples, 0.01%)</title><rect x="0.8949%" y="101" width="0.0100%" height="15" fill="rgb(212,68,19)" fg:x="3389" fg:w="38"/><text x="1.1449%" y="111.50"></text></g><g><title>fastiron::simulation::mct::mct_cell_volume_3dg_vector_tetdet (90 samples, 0.02%)</title><rect x="0.8920%" y="117" width="0.0238%" height="15" fill="rgb(240,187,13)" fg:x="3378" fg:w="90"/><text x="1.1420%" y="127.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::dot (41 samples, 0.01%)</title><rect x="0.9049%" y="101" width="0.0108%" height="15" fill="rgb(223,113,26)" fg:x="3427" fg:w="41"/><text x="1.1549%" y="111.50"></text></g><g><title>fastiron::simulation::mct::mct_facet_points_3dg (39 samples, 0.01%)</title><rect x="0.9157%" y="117" width="0.0103%" height="15" fill="rgb(206,192,2)" fg:x="3468" fg:w="39"/><text x="1.1657%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (39 samples, 0.01%)</title><rect x="0.9157%" y="101" width="0.0103%" height="15" fill="rgb(241,108,4)" fg:x="3468" fg:w="39"/><text x="1.1657%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (39 samples, 0.01%)</title><rect x="0.9157%" y="85" width="0.0103%" height="15" fill="rgb(247,173,49)" fg:x="3468" fg:w="39"/><text x="1.1657%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (39 samples, 0.01%)</title><rect x="0.9157%" y="69" width="0.0103%" height="15" fill="rgb(224,114,35)" fg:x="3468" fg:w="39"/><text x="1.1657%" y="79.50"></text></g><g><title>fastiron::simulation::mct::mct_facet_points_3dg::{{closure}} (39 samples, 0.01%)</title><rect x="0.9157%" y="53" width="0.0103%" height="15" fill="rgb(245,159,27)" fg:x="3468" fg:w="39"/><text x="1.1657%" y="63.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (39 samples, 0.01%)</title><rect x="0.9157%" y="37" width="0.0103%" height="15" fill="rgb(245,172,44)" fg:x="3468" fg:w="39"/><text x="1.1657%" y="47.50"></text></g><g><title>fastiron::simulation::mct::generate_coordinate_3dg (203 samples, 0.05%)</title><rect x="0.8729%" y="133" width="0.0536%" height="15" fill="rgb(236,23,11)" fg:x="3306" fg:w="203"/><text x="1.1229%" y="143.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (236 samples, 0.06%)</title><rect x="0.8650%" y="165" width="0.0623%" height="15" fill="rgb(205,117,38)" fg:x="3276" fg:w="236"/><text x="1.1150%" y="175.50"></text></g><g><title>fastiron::simulation::population_control::source_now::{{closure}}::{{closure}}::{{closure}} (230 samples, 0.06%)</title><rect x="0.8666%" y="149" width="0.0607%" height="15" fill="rgb(237,72,25)" fg:x="3282" fg:w="230"/><text x="1.1166%" y="159.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (237 samples, 0.06%)</title><rect x="0.8650%" y="261" width="0.0626%" height="15" fill="rgb(244,70,9)" fg:x="3276" fg:w="237"/><text x="1.1150%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (237 samples, 0.06%)</title><rect x="0.8650%" y="245" width="0.0626%" height="15" fill="rgb(217,125,39)" fg:x="3276" fg:w="237"/><text x="1.1150%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (237 samples, 0.06%)</title><rect x="0.8650%" y="229" width="0.0626%" height="15" fill="rgb(235,36,10)" fg:x="3276" fg:w="237"/><text x="1.1150%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (237 samples, 0.06%)</title><rect x="0.8650%" y="213" width="0.0626%" height="15" fill="rgb(251,123,47)" fg:x="3276" fg:w="237"/><text x="1.1150%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (237 samples, 0.06%)</title><rect x="0.8650%" y="197" width="0.0626%" height="15" fill="rgb(221,13,13)" fg:x="3276" fg:w="237"/><text x="1.1150%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (237 samples, 0.06%)</title><rect x="0.8650%" y="181" width="0.0626%" height="15" fill="rgb(238,131,9)" fg:x="3276" fg:w="237"/><text x="1.1150%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (238 samples, 0.06%)</title><rect x="0.8650%" y="309" width="0.0628%" height="15" fill="rgb(211,50,8)" fg:x="3276" fg:w="238"/><text x="1.1150%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (238 samples, 0.06%)</title><rect x="0.8650%" y="293" width="0.0628%" height="15" fill="rgb(245,182,24)" fg:x="3276" fg:w="238"/><text x="1.1150%" y="303.50"></text></g><g><title>fastiron::simulation::population_control::source_now::{{closure}}::{{closure}} (238 samples, 0.06%)</title><rect x="0.8650%" y="277" width="0.0628%" height="15" fill="rgb(242,14,37)" fg:x="3276" fg:w="238"/><text x="1.1150%" y="287.50"></text></g><g><title>fastiron::cycle_init (564 samples, 0.15%)</title><rect x="0.7792%" y="485" width="0.1489%" height="15" fill="rgb(246,228,12)" fg:x="2951" fg:w="564"/><text x="1.0292%" y="495.50"></text></g><g><title>fastiron::simulation::population_control::source_now (241 samples, 0.06%)</title><rect x="0.8645%" y="469" width="0.0636%" height="15" fill="rgb(213,55,15)" fg:x="3274" fg:w="241"/><text x="1.1145%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (239 samples, 0.06%)</title><rect x="0.8650%" y="453" width="0.0631%" height="15" fill="rgb(209,9,3)" fg:x="3276" fg:w="239"/><text x="1.1150%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (239 samples, 0.06%)</title><rect x="0.8650%" y="437" width="0.0631%" height="15" fill="rgb(230,59,30)" fg:x="3276" fg:w="239"/><text x="1.1150%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (239 samples, 0.06%)</title><rect x="0.8650%" y="421" width="0.0631%" height="15" fill="rgb(209,121,21)" fg:x="3276" fg:w="239"/><text x="1.1150%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (239 samples, 0.06%)</title><rect x="0.8650%" y="405" width="0.0631%" height="15" fill="rgb(220,109,13)" fg:x="3276" fg:w="239"/><text x="1.1150%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (239 samples, 0.06%)</title><rect x="0.8650%" y="389" width="0.0631%" height="15" fill="rgb(232,18,1)" fg:x="3276" fg:w="239"/><text x="1.1150%" y="399.50"></text></g><g><title>fastiron::simulation::population_control::source_now::{{closure}} (239 samples, 0.06%)</title><rect x="0.8650%" y="373" width="0.0631%" height="15" fill="rgb(215,41,42)" fg:x="3276" fg:w="239"/><text x="1.1150%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (239 samples, 0.06%)</title><rect x="0.8650%" y="357" width="0.0631%" height="15" fill="rgb(224,123,36)" fg:x="3276" fg:w="239"/><text x="1.1150%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (239 samples, 0.06%)</title><rect x="0.8650%" y="341" width="0.0631%" height="15" fill="rgb(240,125,3)" fg:x="3276" fg:w="239"/><text x="1.1150%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (239 samples, 0.06%)</title><rect x="0.8650%" y="325" width="0.0631%" height="15" fill="rgb(205,98,50)" fg:x="3276" fg:w="239"/><text x="1.1150%" y="335.50"></text></g><g><title>fastiron::main (468 samples, 0.12%)</title><rect x="0.9329%" y="437" width="0.1236%" height="15" fill="rgb(205,185,37)" fg:x="3533" fg:w="468"/><text x="1.1829%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (45 samples, 0.01%)</title><rect x="1.1663%" y="405" width="0.0119%" height="15" fill="rgb(238,207,15)" fg:x="4417" fg:w="45"/><text x="1.4163%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (45 samples, 0.01%)</title><rect x="1.1663%" y="389" width="0.0119%" height="15" fill="rgb(213,199,42)" fg:x="4417" fg:w="45"/><text x="1.4163%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (45 samples, 0.01%)</title><rect x="1.1663%" y="373" width="0.0119%" height="15" fill="rgb(235,201,11)" fg:x="4417" fg:w="45"/><text x="1.4163%" y="383.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_energy_groups (422 samples, 0.11%)</title><rect x="1.1003%" y="421" width="0.1114%" height="15" fill="rgb(207,46,11)" fg:x="4167" fg:w="422"/><text x="1.3503%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (94 samples, 0.02%)</title><rect x="1.1869%" y="405" width="0.0248%" height="15" fill="rgb(241,35,35)" fg:x="4495" fg:w="94"/><text x="1.4369%" y="415.50"></text></g><g><title>fastiron::main (437 samples, 0.12%)</title><rect x="1.2117%" y="421" width="0.1154%" height="15" fill="rgb(243,32,47)" fg:x="4589" fg:w="437"/><text x="1.4617%" y="431.50"></text></g><g><title>fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt;::new (88 samples, 0.02%)</title><rect x="1.3271%" y="421" width="0.0232%" height="15" fill="rgb(247,202,23)" fg:x="5026" fg:w="88"/><text x="1.5771%" y="431.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt; as core::clone::Clone&gt;::clone (88 samples, 0.02%)</title><rect x="1.3271%" y="405" width="0.0232%" height="15" fill="rgb(219,102,11)" fg:x="5026" fg:w="88"/><text x="1.5771%" y="415.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::clone::Clone&gt;::clone (61 samples, 0.02%)</title><rect x="1.3342%" y="389" width="0.0161%" height="15" fill="rgb(243,110,44)" fg:x="5053" fg:w="61"/><text x="1.5842%" y="399.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::Species as core::clone::Clone&gt;::clone (691 samples, 0.18%)</title><rect x="1.3889%" y="389" width="0.1825%" height="15" fill="rgb(222,74,54)" fg:x="5260" fg:w="691"/><text x="1.6389%" y="399.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt; as core::clone::Clone&gt;::clone (777 samples, 0.21%)</title><rect x="1.3699%" y="405" width="0.2052%" height="15" fill="rgb(216,99,12)" fg:x="5188" fg:w="777"/><text x="1.6199%" y="415.50"></text></g><g><title>fastiron::particles::mc_particle::MCParticle&lt;T&gt;::new (952 samples, 0.25%)</title><rect x="1.3503%" y="421" width="0.2514%" height="15" fill="rgb(226,22,26)" fg:x="5114" fg:w="952"/><text x="1.6003%" y="431.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::length (101 samples, 0.03%)</title><rect x="1.5751%" y="405" width="0.0267%" height="15" fill="rgb(217,163,10)" fg:x="5965" fg:w="101"/><text x="1.8251%" y="415.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (117 samples, 0.03%)</title><rect x="1.6355%" y="405" width="0.0309%" height="15" fill="rgb(213,25,53)" fg:x="6194" fg:w="117"/><text x="1.8855%" y="415.50"></text></g><g><title>fastiron::main (3,326 samples, 0.88%)</title><rect x="1.6664%" y="405" width="0.8782%" height="15" fill="rgb(252,105,26)" fg:x="6311" fg:w="3326"/><text x="1.9164%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (964 samples, 0.25%)</title><rect x="3.4421%" y="389" width="0.2545%" height="15" fill="rgb(220,39,43)" fg:x="13036" fg:w="964"/><text x="3.6921%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (964 samples, 0.25%)</title><rect x="3.4421%" y="373" width="0.2545%" height="15" fill="rgb(229,68,48)" fg:x="13036" fg:w="964"/><text x="3.6921%" y="383.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (964 samples, 0.25%)</title><rect x="3.4421%" y="357" width="0.2545%" height="15" fill="rgb(252,8,32)" fg:x="13036" fg:w="964"/><text x="3.6921%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::SubAssign&gt;::sub_assign (12,016 samples, 3.17%)</title><rect x="3.6980%" y="389" width="3.1728%" height="15" fill="rgb(223,20,43)" fg:x="14005" fg:w="12016"/><text x="3.9480%" y="399.50">&lt;f6..</text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::is_sign_negative (11,385 samples, 3.01%)</title><rect x="6.8708%" y="389" width="3.0062%" height="15" fill="rgb(229,81,49)" fg:x="26021" fg:w="11385"/><text x="7.1208%" y="399.50">&lt;f6..</text></g><g><title>core::f64::&lt;impl f64&gt;::is_sign_negative (11,385 samples, 3.01%)</title><rect x="6.8708%" y="373" width="3.0062%" height="15" fill="rgb(236,28,36)" fg:x="26021" fg:w="11385"/><text x="7.1208%" y="383.50">cor..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (66 samples, 0.02%)</title><rect x="9.8850%" y="389" width="0.0174%" height="15" fill="rgb(249,185,26)" fg:x="37436" fg:w="66"/><text x="10.1350%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (137 samples, 0.04%)</title><rect x="9.9024%" y="389" width="0.0362%" height="15" fill="rgb(249,174,33)" fg:x="37502" fg:w="137"/><text x="10.1524%" y="399.50"></text></g><g><title>core::ptr::write (126 samples, 0.03%)</title><rect x="9.9053%" y="373" width="0.0333%" height="15" fill="rgb(233,201,37)" fg:x="37513" fg:w="126"/><text x="10.1553%" y="383.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (238 samples, 0.06%)</title><rect x="10.1041%" y="357" width="0.0628%" height="15" fill="rgb(221,78,26)" fg:x="38266" fg:w="238"/><text x="10.3541%" y="367.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (238 samples, 0.06%)</title><rect x="10.1041%" y="341" width="0.0628%" height="15" fill="rgb(250,127,30)" fg:x="38266" fg:w="238"/><text x="10.3541%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,793 samples, 0.74%)</title><rect x="10.1670%" y="357" width="0.7375%" height="15" fill="rgb(230,49,44)" fg:x="38504" fg:w="2793"/><text x="10.4170%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,782 samples, 1.00%)</title><rect x="9.9386%" y="389" width="0.9986%" height="15" fill="rgb(229,67,23)" fg:x="37639" fg:w="3782"/><text x="10.1886%" y="399.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,782 samples, 1.00%)</title><rect x="9.9386%" y="373" width="0.9986%" height="15" fill="rgb(249,83,47)" fg:x="37639" fg:w="3782"/><text x="10.1886%" y="383.50"></text></g><g><title>fastiron::main (124 samples, 0.03%)</title><rect x="10.9044%" y="357" width="0.0327%" height="15" fill="rgb(215,43,3)" fg:x="41297" fg:w="124"/><text x="11.1544%" y="367.50"></text></g><g><title>_int_free (1,318 samples, 0.35%)</title><rect x="11.1413%" y="261" width="0.3480%" height="15" fill="rgb(238,154,13)" fg:x="42194" fg:w="1318"/><text x="11.3913%" y="271.50"></text></g><g><title>tcache_put (298 samples, 0.08%)</title><rect x="11.4106%" y="245" width="0.0787%" height="15" fill="rgb(219,56,2)" fg:x="43214" fg:w="298"/><text x="11.6606%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2,111 samples, 0.56%)</title><rect x="10.9372%" y="341" width="0.5574%" height="15" fill="rgb(233,0,4)" fg:x="41421" fg:w="2111"/><text x="11.1872%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (2,111 samples, 0.56%)</title><rect x="10.9372%" y="325" width="0.5574%" height="15" fill="rgb(235,30,7)" fg:x="41421" fg:w="2111"/><text x="11.1872%" y="335.50"></text></g><g><title>__rdl_dealloc (2,111 samples, 0.56%)</title><rect x="10.9372%" y="309" width="0.5574%" height="15" fill="rgb(250,79,13)" fg:x="41421" fg:w="2111"/><text x="11.1872%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2,111 samples, 0.56%)</title><rect x="10.9372%" y="293" width="0.5574%" height="15" fill="rgb(211,146,34)" fg:x="41421" fg:w="2111"/><text x="11.1872%" y="303.50"></text></g><g><title>__GI___libc_free (2,111 samples, 0.56%)</title><rect x="10.9372%" y="277" width="0.5574%" height="15" fill="rgb(228,22,38)" fg:x="41421" fg:w="2111"/><text x="11.1872%" y="287.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2,200 samples, 0.58%)</title><rect x="10.9372%" y="357" width="0.5809%" height="15" fill="rgb(235,168,5)" fg:x="41421" fg:w="2200"/><text x="11.1872%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (89 samples, 0.02%)</title><rect x="11.4946%" y="341" width="0.0235%" height="15" fill="rgb(221,155,16)" fg:x="43532" fg:w="89"/><text x="11.7446%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (2,212 samples, 0.58%)</title><rect x="10.9372%" y="389" width="0.5841%" height="15" fill="rgb(215,215,53)" fg:x="41421" fg:w="2212"/><text x="11.1872%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (2,212 samples, 0.58%)</title><rect x="10.9372%" y="373" width="0.5841%" height="15" fill="rgb(223,4,10)" fg:x="41421" fg:w="2212"/><text x="11.1872%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (104 samples, 0.03%)</title><rect x="12.1170%" y="373" width="0.0275%" height="15" fill="rgb(234,103,6)" fg:x="45889" fg:w="104"/><text x="12.3670%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (104 samples, 0.03%)</title><rect x="12.1170%" y="357" width="0.0275%" height="15" fill="rgb(227,97,0)" fg:x="45889" fg:w="104"/><text x="12.3670%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (104 samples, 0.03%)</title><rect x="12.1170%" y="341" width="0.0275%" height="15" fill="rgb(234,150,53)" fg:x="45889" fg:w="104"/><text x="12.3670%" y="351.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_energy_groups (2,889 samples, 0.76%)</title><rect x="11.5213%" y="389" width="0.7628%" height="15" fill="rgb(228,201,54)" fg:x="43633" fg:w="2889"/><text x="11.7713%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (525 samples, 0.14%)</title><rect x="12.1455%" y="373" width="0.1386%" height="15" fill="rgb(222,22,37)" fg:x="45997" fg:w="525"/><text x="12.3955%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (672 samples, 0.18%)</title><rect x="12.2849%" y="373" width="0.1774%" height="15" fill="rgb(237,53,32)" fg:x="46525" fg:w="672"/><text x="12.5349%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (672 samples, 0.18%)</title><rect x="12.2849%" y="357" width="0.1774%" height="15" fill="rgb(233,25,53)" fg:x="46525" fg:w="672"/><text x="12.5349%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (672 samples, 0.18%)</title><rect x="12.2849%" y="341" width="0.1774%" height="15" fill="rgb(210,40,34)" fg:x="46525" fg:w="672"/><text x="12.5349%" y="351.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_number_reactions (1,337 samples, 0.35%)</title><rect x="12.2841%" y="389" width="0.3530%" height="15" fill="rgb(241,220,44)" fg:x="46522" fg:w="1337"/><text x="12.5341%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (662 samples, 0.17%)</title><rect x="12.4623%" y="373" width="0.1748%" height="15" fill="rgb(235,28,35)" fg:x="47197" fg:w="662"/><text x="12.7123%" y="383.50"></text></g><g><title>__GI___libc_malloc (114 samples, 0.03%)</title><rect x="12.6789%" y="245" width="0.0301%" height="15" fill="rgb(210,56,17)" fg:x="48017" fg:w="114"/><text x="12.9289%" y="255.50"></text></g><g><title>tcache_get (61 samples, 0.02%)</title><rect x="12.6929%" y="229" width="0.0161%" height="15" fill="rgb(224,130,29)" fg:x="48070" fg:w="61"/><text x="12.9429%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (145 samples, 0.04%)</title><rect x="12.6731%" y="261" width="0.0383%" height="15" fill="rgb(235,212,8)" fg:x="47995" fg:w="145"/><text x="12.9231%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (200 samples, 0.05%)</title><rect x="12.6654%" y="325" width="0.0528%" height="15" fill="rgb(223,33,50)" fg:x="47966" fg:w="200"/><text x="12.9154%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (197 samples, 0.05%)</title><rect x="12.6662%" y="309" width="0.0520%" height="15" fill="rgb(219,149,13)" fg:x="47969" fg:w="197"/><text x="12.9162%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (192 samples, 0.05%)</title><rect x="12.6675%" y="293" width="0.0507%" height="15" fill="rgb(250,156,29)" fg:x="47974" fg:w="192"/><text x="12.9175%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (192 samples, 0.05%)</title><rect x="12.6675%" y="277" width="0.0507%" height="15" fill="rgb(216,193,19)" fg:x="47974" fg:w="192"/><text x="12.9175%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (234 samples, 0.06%)</title><rect x="12.6651%" y="373" width="0.0618%" height="15" fill="rgb(216,135,14)" fg:x="47965" fg:w="234"/><text x="12.9151%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (234 samples, 0.06%)</title><rect x="12.6651%" y="357" width="0.0618%" height="15" fill="rgb(241,47,5)" fg:x="47965" fg:w="234"/><text x="12.9151%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (234 samples, 0.06%)</title><rect x="12.6651%" y="341" width="0.0618%" height="15" fill="rgb(233,42,35)" fg:x="47965" fg:w="234"/><text x="12.9151%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (76 samples, 0.02%)</title><rect x="12.7304%" y="373" width="0.0201%" height="15" fill="rgb(231,13,6)" fg:x="48212" fg:w="76"/><text x="12.9804%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (194 samples, 0.05%)</title><rect x="12.7504%" y="373" width="0.0512%" height="15" fill="rgb(207,181,40)" fg:x="48288" fg:w="194"/><text x="13.0004%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (172 samples, 0.05%)</title><rect x="12.8016%" y="373" width="0.0454%" height="15" fill="rgb(254,173,49)" fg:x="48482" fg:w="172"/><text x="13.0516%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (92 samples, 0.02%)</title><rect x="12.8967%" y="325" width="0.0243%" height="15" fill="rgb(221,1,38)" fg:x="48842" fg:w="92"/><text x="13.1467%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (39 samples, 0.01%)</title><rect x="12.9210%" y="325" width="0.0103%" height="15" fill="rgb(206,124,46)" fg:x="48934" fg:w="39"/><text x="13.1710%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (122 samples, 0.03%)</title><rect x="12.9862%" y="309" width="0.0322%" height="15" fill="rgb(249,21,11)" fg:x="49181" fg:w="122"/><text x="13.2362%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (122 samples, 0.03%)</title><rect x="12.9862%" y="293" width="0.0322%" height="15" fill="rgb(222,201,40)" fg:x="49181" fg:w="122"/><text x="13.2362%" y="303.50"></text></g><g><title>alloc::alloc::alloc (64 samples, 0.02%)</title><rect x="13.0015%" y="277" width="0.0169%" height="15" fill="rgb(235,61,29)" fg:x="49239" fg:w="64"/><text x="13.2515%" y="287.50"></text></g><g><title>__rdl_alloc (64 samples, 0.02%)</title><rect x="13.0015%" y="261" width="0.0169%" height="15" fill="rgb(219,207,3)" fg:x="49239" fg:w="64"/><text x="13.2515%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (64 samples, 0.02%)</title><rect x="13.0015%" y="245" width="0.0169%" height="15" fill="rgb(222,56,46)" fg:x="49239" fg:w="64"/><text x="13.2515%" y="255.50"></text></g><g><title>checked_request2size (92 samples, 0.02%)</title><rect x="13.5460%" y="293" width="0.0243%" height="15" fill="rgb(239,76,54)" fg:x="51301" fg:w="92"/><text x="13.7960%" y="303.50"></text></g><g><title>__GI___libc_malloc (2,951 samples, 0.78%)</title><rect x="13.0184%" y="309" width="0.7792%" height="15" fill="rgb(231,124,27)" fg:x="49303" fg:w="2951"/><text x="13.2684%" y="319.50"></text></g><g><title>tcache_get (861 samples, 0.23%)</title><rect x="13.5703%" y="293" width="0.2273%" height="15" fill="rgb(249,195,6)" fg:x="51393" fg:w="861"/><text x="13.8203%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (3,388 samples, 0.89%)</title><rect x="12.9403%" y="325" width="0.8946%" height="15" fill="rgb(237,174,47)" fg:x="49007" fg:w="3388"/><text x="13.1903%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (141 samples, 0.04%)</title><rect x="13.7976%" y="309" width="0.0372%" height="15" fill="rgb(206,201,31)" fg:x="52254" fg:w="141"/><text x="14.0476%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::array (45 samples, 0.01%)</title><rect x="13.8349%" y="325" width="0.0119%" height="15" fill="rgb(231,57,52)" fg:x="52395" fg:w="45"/><text x="14.0849%" y="335.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (45 samples, 0.01%)</title><rect x="13.8349%" y="309" width="0.0119%" height="15" fill="rgb(248,177,22)" fg:x="52395" fg:w="45"/><text x="14.0849%" y="319.50"></text></g><g><title>core::cmp::max (232 samples, 0.06%)</title><rect x="13.8468%" y="325" width="0.0613%" height="15" fill="rgb(215,211,37)" fg:x="52440" fg:w="232"/><text x="14.0968%" y="335.50"></text></g><g><title>core::cmp::Ord::max (232 samples, 0.06%)</title><rect x="13.8468%" y="309" width="0.0613%" height="15" fill="rgb(241,128,51)" fg:x="52440" fg:w="232"/><text x="14.0968%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (232 samples, 0.06%)</title><rect x="13.8468%" y="293" width="0.0613%" height="15" fill="rgb(227,165,31)" fg:x="52440" fg:w="232"/><text x="14.0968%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3,887 samples, 1.03%)</title><rect x="12.8832%" y="341" width="1.0264%" height="15" fill="rgb(228,167,24)" fg:x="48791" fg:w="3887"/><text x="13.1332%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3,976 samples, 1.05%)</title><rect x="12.8832%" y="357" width="1.0499%" height="15" fill="rgb(228,143,12)" fg:x="48791" fg:w="3976"/><text x="13.1332%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (89 samples, 0.02%)</title><rect x="13.9096%" y="341" width="0.0235%" height="15" fill="rgb(249,149,8)" fg:x="52678" fg:w="89"/><text x="14.1596%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (4,135 samples, 1.09%)</title><rect x="12.8566%" y="373" width="1.0918%" height="15" fill="rgb(243,35,44)" fg:x="48690" fg:w="4135"/><text x="13.1066%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (220 samples, 0.06%)</title><rect x="13.9484%" y="373" width="0.0581%" height="15" fill="rgb(246,89,9)" fg:x="52825" fg:w="220"/><text x="14.1984%" y="383.50"></text></g><g><title>_int_malloc (195 samples, 0.05%)</title><rect x="14.0667%" y="213" width="0.0515%" height="15" fill="rgb(233,213,13)" fg:x="53273" fg:w="195"/><text x="14.3167%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (434 samples, 0.11%)</title><rect x="14.0065%" y="325" width="0.1146%" height="15" fill="rgb(233,141,41)" fg:x="53045" fg:w="434"/><text x="14.2565%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (429 samples, 0.11%)</title><rect x="14.0078%" y="309" width="0.1133%" height="15" fill="rgb(239,167,4)" fg:x="53050" fg:w="429"/><text x="14.2578%" y="319.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (429 samples, 0.11%)</title><rect x="14.0078%" y="293" width="0.1133%" height="15" fill="rgb(209,217,16)" fg:x="53050" fg:w="429"/><text x="14.2578%" y="303.50"></text></g><g><title>alloc::alloc::alloc_zeroed (428 samples, 0.11%)</title><rect x="14.0081%" y="277" width="0.1130%" height="15" fill="rgb(219,88,35)" fg:x="53051" fg:w="428"/><text x="14.2581%" y="287.50"></text></g><g><title>__rdl_alloc_zeroed (428 samples, 0.11%)</title><rect x="14.0081%" y="261" width="0.1130%" height="15" fill="rgb(220,193,23)" fg:x="53051" fg:w="428"/><text x="14.2581%" y="271.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (423 samples, 0.11%)</title><rect x="14.0094%" y="245" width="0.1117%" height="15" fill="rgb(230,90,52)" fg:x="53056" fg:w="423"/><text x="14.2594%" y="255.50"></text></g><g><title>__libc_calloc (413 samples, 0.11%)</title><rect x="14.0120%" y="229" width="0.1091%" height="15" fill="rgb(252,106,19)" fg:x="53066" fg:w="413"/><text x="14.2620%" y="239.50"></text></g><g><title>alloc::vec::from_elem (435 samples, 0.11%)</title><rect x="14.0065%" y="373" width="0.1149%" height="15" fill="rgb(206,74,20)" fg:x="53045" fg:w="435"/><text x="14.2565%" y="383.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (435 samples, 0.11%)</title><rect x="14.0065%" y="357" width="0.1149%" height="15" fill="rgb(230,138,44)" fg:x="53045" fg:w="435"/><text x="14.2565%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (435 samples, 0.11%)</title><rect x="14.0065%" y="341" width="0.1149%" height="15" fill="rgb(235,182,43)" fg:x="53045" fg:w="435"/><text x="14.2565%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (41 samples, 0.01%)</title><rect x="14.1332%" y="309" width="0.0108%" height="15" fill="rgb(242,16,51)" fg:x="53525" fg:w="41"/><text x="14.3832%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (62 samples, 0.02%)</title><rect x="14.1441%" y="309" width="0.0164%" height="15" fill="rgb(248,9,4)" fg:x="53566" fg:w="62"/><text x="14.3941%" y="319.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearDataReaction&lt;T&gt;::sample_collision::{{closure}} (257 samples, 0.07%)</title><rect x="14.1243%" y="325" width="0.0679%" height="15" fill="rgb(210,31,22)" fg:x="53491" fg:w="257"/><text x="14.3743%" y="335.50"></text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (103 samples, 0.03%)</title><rect x="14.1649%" y="309" width="0.0272%" height="15" fill="rgb(239,54,39)" fg:x="53645" fg:w="103"/><text x="14.4149%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (274 samples, 0.07%)</title><rect x="14.1214%" y="373" width="0.0723%" height="15" fill="rgb(230,99,41)" fg:x="53480" fg:w="274"/><text x="14.3714%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (274 samples, 0.07%)</title><rect x="14.1214%" y="357" width="0.0723%" height="15" fill="rgb(253,106,12)" fg:x="53480" fg:w="274"/><text x="14.3714%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (263 samples, 0.07%)</title><rect x="14.1243%" y="341" width="0.0694%" height="15" fill="rgb(213,46,41)" fg:x="53491" fg:w="263"/><text x="14.3743%" y="351.50"></text></g><g><title>_int_free (152 samples, 0.04%)</title><rect x="14.2048%" y="245" width="0.0401%" height="15" fill="rgb(215,133,35)" fg:x="53796" fg:w="152"/><text x="14.4548%" y="255.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (192 samples, 0.05%)</title><rect x="14.1948%" y="373" width="0.0507%" height="15" fill="rgb(213,28,5)" fg:x="53758" fg:w="192"/><text x="14.4448%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (192 samples, 0.05%)</title><rect x="14.1948%" y="357" width="0.0507%" height="15" fill="rgb(215,77,49)" fg:x="53758" fg:w="192"/><text x="14.4448%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (192 samples, 0.05%)</title><rect x="14.1948%" y="341" width="0.0507%" height="15" fill="rgb(248,100,22)" fg:x="53758" fg:w="192"/><text x="14.4448%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (192 samples, 0.05%)</title><rect x="14.1948%" y="325" width="0.0507%" height="15" fill="rgb(208,67,9)" fg:x="53758" fg:w="192"/><text x="14.4448%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (192 samples, 0.05%)</title><rect x="14.1948%" y="309" width="0.0507%" height="15" fill="rgb(219,133,21)" fg:x="53758" fg:w="192"/><text x="14.4448%" y="319.50"></text></g><g><title>__rdl_dealloc (192 samples, 0.05%)</title><rect x="14.1948%" y="293" width="0.0507%" height="15" fill="rgb(246,46,29)" fg:x="53758" fg:w="192"/><text x="14.4448%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (192 samples, 0.05%)</title><rect x="14.1948%" y="277" width="0.0507%" height="15" fill="rgb(246,185,52)" fg:x="53758" fg:w="192"/><text x="14.4448%" y="287.50"></text></g><g><title>__GI___libc_free (183 samples, 0.05%)</title><rect x="14.1971%" y="261" width="0.0483%" height="15" fill="rgb(252,136,11)" fg:x="53767" fg:w="183"/><text x="14.4471%" y="271.50"></text></g><g><title>fastiron::main (195 samples, 0.05%)</title><rect x="14.2455%" y="373" width="0.0515%" height="15" fill="rgb(219,138,53)" fg:x="53950" fg:w="195"/><text x="14.4955%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (50 samples, 0.01%)</title><rect x="14.3994%" y="357" width="0.0132%" height="15" fill="rgb(211,51,23)" fg:x="54533" fg:w="50"/><text x="14.6494%" y="367.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearDataReaction&lt;T&gt;::sample_collision (6,743 samples, 1.78%)</title><rect x="12.6371%" y="389" width="1.7805%" height="15" fill="rgb(247,221,28)" fg:x="47859" fg:w="6743"/><text x="12.8871%" y="399.50">f..</text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (457 samples, 0.12%)</title><rect x="14.2970%" y="373" width="0.1207%" height="15" fill="rgb(251,222,45)" fg:x="54145" fg:w="457"/><text x="14.5470%" y="383.50"></text></g><g><title>fastiron::main (3,077 samples, 0.81%)</title><rect x="14.4176%" y="389" width="0.8125%" height="15" fill="rgb(217,162,53)" fg:x="54602" fg:w="3077"/><text x="14.6676%" y="399.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt; as core::clone::Clone&gt;::clone (143 samples, 0.04%)</title><rect x="15.2301%" y="373" width="0.0378%" height="15" fill="rgb(229,93,14)" fg:x="57679" fg:w="143"/><text x="15.4801%" y="383.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::clone::Clone&gt;::clone (98 samples, 0.03%)</title><rect x="15.2420%" y="357" width="0.0259%" height="15" fill="rgb(209,67,49)" fg:x="57724" fg:w="98"/><text x="15.4920%" y="367.50"></text></g><g><title>fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt;::new (159 samples, 0.04%)</title><rect x="15.2301%" y="389" width="0.0420%" height="15" fill="rgb(213,87,29)" fg:x="57679" fg:w="159"/><text x="15.4801%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (48 samples, 0.01%)</title><rect x="15.2996%" y="373" width="0.0127%" height="15" fill="rgb(205,151,52)" fg:x="57942" fg:w="48"/><text x="15.5496%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (283 samples, 0.07%)</title><rect x="15.3122%" y="373" width="0.0747%" height="15" fill="rgb(253,215,39)" fg:x="57990" fg:w="283"/><text x="15.5622%" y="383.50"></text></g><g><title>__ieee754_log_fma (1,953 samples, 0.52%)</title><rect x="15.3914%" y="309" width="0.5157%" height="15" fill="rgb(221,220,41)" fg:x="58290" fg:w="1953"/><text x="15.6414%" y="319.50"></text></g><g><title>__log (116 samples, 0.03%)</title><rect x="15.9071%" y="309" width="0.0306%" height="15" fill="rgb(218,133,21)" fg:x="60243" fg:w="116"/><text x="16.1571%" y="319.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::ln (2,138 samples, 0.56%)</title><rect x="15.3896%" y="373" width="0.5645%" height="15" fill="rgb(221,193,43)" fg:x="58283" fg:w="2138"/><text x="15.6396%" y="383.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln (2,138 samples, 0.56%)</title><rect x="15.3896%" y="357" width="0.5645%" height="15" fill="rgb(240,128,52)" fg:x="58283" fg:w="2138"/><text x="15.6396%" y="367.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::log_wrapper (2,138 samples, 0.56%)</title><rect x="15.3896%" y="341" width="0.5645%" height="15" fill="rgb(253,114,12)" fg:x="58283" fg:w="2138"/><text x="15.6396%" y="351.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln::{{closure}} (2,138 samples, 0.56%)</title><rect x="15.3896%" y="325" width="0.5645%" height="15" fill="rgb(215,223,47)" fg:x="58283" fg:w="2138"/><text x="15.6396%" y="335.50"></text></g><g><title>cij (62 samples, 0.02%)</title><rect x="15.9378%" y="309" width="0.0164%" height="15" fill="rgb(248,225,23)" fg:x="60359" fg:w="62"/><text x="16.1878%" y="319.50"></text></g><g><title>fastiron::main (56 samples, 0.01%)</title><rect x="15.9541%" y="357" width="0.0148%" height="15" fill="rgb(250,108,0)" fg:x="60421" fg:w="56"/><text x="16.2041%" y="367.50"></text></g><g><title>[libm.so.6] (130 samples, 0.03%)</title><rect x="15.9842%" y="341" width="0.0343%" height="15" fill="rgb(228,208,7)" fg:x="60535" fg:w="130"/><text x="16.2342%" y="351.50"></text></g><g><title>do_cos (1,307 samples, 0.35%)</title><rect x="16.3286%" y="325" width="0.3451%" height="15" fill="rgb(244,45,10)" fg:x="61839" fg:w="1307"/><text x="16.5786%" y="335.50"></text></g><g><title>do_sin (3,369 samples, 0.89%)</title><rect x="16.6737%" y="325" width="0.8896%" height="15" fill="rgb(207,125,25)" fg:x="63146" fg:w="3369"/><text x="16.9237%" y="335.50"></text></g><g><title>libc_feholdsetround_sse_ctx (141 samples, 0.04%)</title><rect x="17.5632%" y="325" width="0.0372%" height="15" fill="rgb(210,195,18)" fg:x="66515" fg:w="141"/><text x="17.8132%" y="335.50"></text></g><g><title>libc_feresetround_sse_ctx (72 samples, 0.02%)</title><rect x="17.6005%" y="325" width="0.0190%" height="15" fill="rgb(249,80,12)" fg:x="66656" fg:w="72"/><text x="17.8505%" y="335.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::sin (7,255 samples, 1.92%)</title><rect x="15.9541%" y="373" width="1.9157%" height="15" fill="rgb(221,65,9)" fg:x="60421" fg:w="7255"/><text x="16.2041%" y="383.50">&lt;..</text></g><g><title>std::f64::&lt;impl f64&gt;::sin (7,199 samples, 1.90%)</title><rect x="15.9689%" y="357" width="1.9009%" height="15" fill="rgb(235,49,36)" fg:x="60477" fg:w="7199"/><text x="16.2189%" y="367.50">s..</text></g><g><title>__sincos (7,011 samples, 1.85%)</title><rect x="16.0186%" y="341" width="1.8513%" height="15" fill="rgb(225,32,20)" fg:x="60665" fg:w="7011"/><text x="16.2686%" y="351.50">_..</text></g><g><title>reduce_sincos (948 samples, 0.25%)</title><rect x="17.6195%" y="325" width="0.2503%" height="15" fill="rgb(215,141,46)" fg:x="66728" fg:w="948"/><text x="17.8695%" y="335.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::sqrt (804 samples, 0.21%)</title><rect x="17.8698%" y="373" width="0.2123%" height="15" fill="rgb(250,160,47)" fg:x="67676" fg:w="804"/><text x="18.1198%" y="383.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (768 samples, 0.20%)</title><rect x="17.8793%" y="357" width="0.2028%" height="15" fill="rgb(216,222,40)" fg:x="67712" fg:w="768"/><text x="18.1293%" y="367.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (304 samples, 0.08%)</title><rect x="18.0821%" y="373" width="0.0803%" height="15" fill="rgb(234,217,39)" fg:x="68480" fg:w="304"/><text x="18.3321%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (304 samples, 0.08%)</title><rect x="18.0821%" y="357" width="0.0803%" height="15" fill="rgb(207,178,40)" fg:x="68480" fg:w="304"/><text x="18.3321%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (207 samples, 0.05%)</title><rect x="18.1946%" y="357" width="0.0547%" height="15" fill="rgb(221,136,13)" fg:x="68906" fg:w="207"/><text x="18.4446%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (447 samples, 0.12%)</title><rect x="18.2492%" y="357" width="0.1180%" height="15" fill="rgb(249,199,10)" fg:x="69113" fg:w="447"/><text x="18.4992%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (113 samples, 0.03%)</title><rect x="18.3673%" y="357" width="0.0298%" height="15" fill="rgb(249,222,13)" fg:x="69560" fg:w="113"/><text x="18.6173%" y="367.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::sqrt (61 samples, 0.02%)</title><rect x="18.3971%" y="357" width="0.0161%" height="15" fill="rgb(244,185,38)" fg:x="69673" fg:w="61"/><text x="18.6471%" y="367.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (61 samples, 0.02%)</title><rect x="18.3971%" y="341" width="0.0161%" height="15" fill="rgb(236,202,9)" fg:x="69673" fg:w="61"/><text x="18.6471%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (55 samples, 0.01%)</title><rect x="18.4132%" y="357" width="0.0145%" height="15" fill="rgb(250,229,37)" fg:x="69734" fg:w="55"/><text x="18.6632%" y="367.50"></text></g><g><title>fastiron::data::direction_cosine::DirectionCosine&lt;T&gt;::rotate_3d_vector (1,025 samples, 0.27%)</title><rect x="18.1624%" y="373" width="0.2707%" height="15" fill="rgb(206,174,23)" fg:x="68784" fg:w="1025"/><text x="18.4124%" y="383.50"></text></g><g><title>fastiron::main (113 samples, 0.03%)</title><rect x="18.4330%" y="373" width="0.0298%" height="15" fill="rgb(211,33,43)" fg:x="69809" fg:w="113"/><text x="18.6830%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (57 samples, 0.02%)</title><rect x="18.5373%" y="357" width="0.0151%" height="15" fill="rgb(245,58,50)" fg:x="70204" fg:w="57"/><text x="18.7873%" y="367.50"></text></g><g><title>fastiron::simulation::collision_event::update_trajectory (12,488 samples, 3.30%)</title><rect x="15.2721%" y="389" width="3.2974%" height="15" fill="rgb(244,68,36)" fg:x="57838" fg:w="12488"/><text x="15.5221%" y="399.50">fas..</text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (404 samples, 0.11%)</title><rect x="18.4629%" y="373" width="0.1067%" height="15" fill="rgb(232,229,15)" fg:x="69922" fg:w="404"/><text x="18.7129%" y="383.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_mul (65 samples, 0.02%)</title><rect x="18.5524%" y="357" width="0.0172%" height="15" fill="rgb(254,30,23)" fg:x="70261" fg:w="65"/><text x="18.8024%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,295 samples, 0.61%)</title><rect x="24.5817%" y="373" width="0.6060%" height="15" fill="rgb(235,160,14)" fg:x="93095" fg:w="2295"/><text x="24.8317%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,295 samples, 0.61%)</title><rect x="24.5817%" y="357" width="0.6060%" height="15" fill="rgb(212,155,44)" fg:x="93095" fg:w="2295"/><text x="24.8317%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,295 samples, 0.61%)</title><rect x="24.5817%" y="341" width="0.6060%" height="15" fill="rgb(226,2,50)" fg:x="93095" fg:w="2295"/><text x="24.8317%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (40,349 samples, 10.65%)</title><rect x="25.1877%" y="373" width="10.6541%" height="15" fill="rgb(234,177,6)" fg:x="95390" fg:w="40349"/><text x="25.4377%" y="383.50">&lt;f64 as core::op..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f64&gt;::eq (1,348 samples, 0.36%)</title><rect x="35.8418%" y="373" width="0.3559%" height="15" fill="rgb(217,24,9)" fg:x="135739" fg:w="1348"/><text x="36.0918%" y="383.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_reaction_cross_section (18,069 samples, 4.77%)</title><rect x="36.1977%" y="373" width="4.7711%" height="15" fill="rgb(220,13,46)" fg:x="137087" fg:w="18069"/><text x="36.4477%" y="383.50">fastir..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (10,371 samples, 2.74%)</title><rect x="38.2304%" y="357" width="2.7385%" height="15" fill="rgb(239,221,27)" fg:x="144785" fg:w="10371"/><text x="38.4804%" y="367.50">&lt;a..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (10,371 samples, 2.74%)</title><rect x="38.2304%" y="341" width="2.7385%" height="15" fill="rgb(222,198,25)" fg:x="144785" fg:w="10371"/><text x="38.4804%" y="351.50">co..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (10,371 samples, 2.74%)</title><rect x="38.2304%" y="325" width="2.7385%" height="15" fill="rgb(211,99,13)" fg:x="144785" fg:w="10371"/><text x="38.4804%" y="335.50">&lt;u..</text></g><g><title>fastiron::simulation::macro_cross_section::macroscopic_cross_section (89,819 samples, 23.72%)</title><rect x="18.5695%" y="389" width="23.7167%" height="15" fill="rgb(232,111,31)" fg:x="70326" fg:w="89819"/><text x="18.8195%" y="399.50">fastiron::simulation::macro_cross_sect..</text></g><g><title>fastiron::main (4,989 samples, 1.32%)</title><rect x="40.9689%" y="373" width="1.3173%" height="15" fill="rgb(245,82,37)" fg:x="155156" fg:w="4989"/><text x="41.2189%" y="383.50"></text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (125 samples, 0.03%)</title><rect x="42.2862%" y="389" width="0.0330%" height="15" fill="rgb(227,149,46)" fg:x="160145" fg:w="125"/><text x="42.5362%" y="399.50"></text></g><g><title>fastiron::simulation::collision_event::collision_event (150,679 samples, 39.79%)</title><rect x="2.5446%" y="405" width="39.7867%" height="15" fill="rgb(218,36,50)" fg:x="9637" fg:w="150679"/><text x="2.7946%" y="415.50">fastiron::simulation::collision_event::collision_event</text></g><g><title>fastiron::utils::mc_rng_state::spawn_rn_seed (46 samples, 0.01%)</title><rect x="42.3192%" y="389" width="0.0121%" height="15" fill="rgb(226,80,48)" fg:x="160270" fg:w="46"/><text x="42.5692%" y="399.50"></text></g><g><title>fastiron::utils::mc_rng_state::hash_state (46 samples, 0.01%)</title><rect x="42.3192%" y="373" width="0.0121%" height="15" fill="rgb(238,224,15)" fg:x="160270" fg:w="46"/><text x="42.5692%" y="383.50"></text></g><g><title>fastiron::simulation::mc_facet_crossing_event::facet_crossing_event (821 samples, 0.22%)</title><rect x="42.3313%" y="405" width="0.2168%" height="15" fill="rgb(241,136,10)" fg:x="160316" fg:w="821"/><text x="42.5813%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (360 samples, 0.10%)</title><rect x="42.4531%" y="389" width="0.0951%" height="15" fill="rgb(208,32,45)" fg:x="160777" fg:w="360"/><text x="42.7031%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (191 samples, 0.05%)</title><rect x="44.4313%" y="357" width="0.0504%" height="15" fill="rgb(207,135,9)" fg:x="168269" fg:w="191"/><text x="44.6813%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (256 samples, 0.07%)</title><rect x="44.4313%" y="389" width="0.0676%" height="15" fill="rgb(206,86,44)" fg:x="168269" fg:w="256"/><text x="44.6813%" y="399.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (256 samples, 0.07%)</title><rect x="44.4313%" y="373" width="0.0676%" height="15" fill="rgb(245,177,15)" fg:x="168269" fg:w="256"/><text x="44.6813%" y="383.50"></text></g><g><title>fastiron::main (65 samples, 0.02%)</title><rect x="44.4818%" y="357" width="0.0172%" height="15" fill="rgb(206,64,50)" fg:x="168460" fg:w="65"/><text x="44.7318%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (19,871 samples, 5.25%)</title><rect x="44.4989%" y="389" width="5.2469%" height="15" fill="rgb(234,36,40)" fg:x="168525" fg:w="19871"/><text x="44.7489%" y="399.50">&lt;f64 a..</text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (1,331 samples, 0.35%)</title><rect x="49.7459%" y="389" width="0.3514%" height="15" fill="rgb(213,64,8)" fg:x="188396" fg:w="1331"/><text x="49.9959%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (177 samples, 0.05%)</title><rect x="50.0973%" y="389" width="0.0467%" height="15" fill="rgb(210,75,36)" fg:x="189727" fg:w="177"/><text x="50.3473%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::SubAssign&gt;::sub_assign (800 samples, 0.21%)</title><rect x="50.1440%" y="389" width="0.2112%" height="15" fill="rgb(229,88,21)" fg:x="189904" fg:w="800"/><text x="50.3940%" y="399.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_sign_negative (412 samples, 0.11%)</title><rect x="50.3553%" y="373" width="0.1088%" height="15" fill="rgb(252,204,47)" fg:x="190704" fg:w="412"/><text x="50.6053%" y="383.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::is_sign_negative (438 samples, 0.12%)</title><rect x="50.3553%" y="389" width="0.1157%" height="15" fill="rgb(208,77,27)" fg:x="190704" fg:w="438"/><text x="50.6053%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f64&gt;::eq (169 samples, 0.04%)</title><rect x="50.4709%" y="389" width="0.0446%" height="15" fill="rgb(221,76,26)" fg:x="191142" fg:w="169"/><text x="50.7209%" y="399.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (83 samples, 0.02%)</title><rect x="50.5156%" y="389" width="0.0219%" height="15" fill="rgb(225,139,18)" fg:x="191311" fg:w="83"/><text x="50.7656%" y="399.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::length (153 samples, 0.04%)</title><rect x="50.5375%" y="389" width="0.0404%" height="15" fill="rgb(230,137,11)" fg:x="191394" fg:w="153"/><text x="50.7875%" y="399.50"></text></g><g><title>fastiron::main (294 samples, 0.08%)</title><rect x="50.5779%" y="389" width="0.0776%" height="15" fill="rgb(212,28,1)" fg:x="191547" fg:w="294"/><text x="50.8279%" y="399.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::AddAssign&gt;::add_assign (396 samples, 0.10%)</title><rect x="50.6555%" y="373" width="0.1046%" height="15" fill="rgb(248,164,17)" fg:x="191841" fg:w="396"/><text x="50.9055%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (396 samples, 0.10%)</title><rect x="50.6555%" y="357" width="0.1046%" height="15" fill="rgb(222,171,42)" fg:x="191841" fg:w="396"/><text x="50.9055%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (159 samples, 0.04%)</title><rect x="50.7601%" y="357" width="0.0420%" height="15" fill="rgb(243,84,45)" fg:x="192237" fg:w="159"/><text x="51.0101%" y="367.50"></text></g><g><title>fastiron::particles::mc_particle::MCParticle&lt;T&gt;::move_particle (607 samples, 0.16%)</title><rect x="50.6555%" y="389" width="0.1603%" height="15" fill="rgb(252,49,23)" fg:x="191841" fg:w="607"/><text x="50.9055%" y="399.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (211 samples, 0.06%)</title><rect x="50.7601%" y="373" width="0.0557%" height="15" fill="rgb(215,19,7)" fg:x="192237" fg:w="211"/><text x="51.0101%" y="383.50"></text></g><g><title>fastiron::main (52 samples, 0.01%)</title><rect x="50.8021%" y="357" width="0.0137%" height="15" fill="rgb(238,81,41)" fg:x="192396" fg:w="52"/><text x="51.0521%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (238 samples, 0.06%)</title><rect x="55.6339%" y="373" width="0.0628%" height="15" fill="rgb(210,199,37)" fg:x="210695" fg:w="238"/><text x="55.8839%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (238 samples, 0.06%)</title><rect x="55.6339%" y="357" width="0.0628%" height="15" fill="rgb(244,192,49)" fg:x="210695" fg:w="238"/><text x="55.8839%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (238 samples, 0.06%)</title><rect x="55.6339%" y="341" width="0.0628%" height="15" fill="rgb(226,211,11)" fg:x="210695" fg:w="238"/><text x="55.8839%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (41 samples, 0.01%)</title><rect x="55.6967%" y="373" width="0.0108%" height="15" fill="rgb(236,162,54)" fg:x="210933" fg:w="41"/><text x="55.9467%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::gt (318 samples, 0.08%)</title><rect x="55.7076%" y="373" width="0.0840%" height="15" fill="rgb(220,229,9)" fg:x="210974" fg:w="318"/><text x="55.9576%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (769 samples, 0.20%)</title><rect x="55.7942%" y="309" width="0.2031%" height="15" fill="rgb(250,87,22)" fg:x="211302" fg:w="769"/><text x="56.0442%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (779 samples, 0.21%)</title><rect x="56.1097%" y="293" width="0.2057%" height="15" fill="rgb(239,43,17)" fg:x="212497" fg:w="779"/><text x="56.3597%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (254 samples, 0.07%)</title><rect x="56.3204%" y="277" width="0.0671%" height="15" fill="rgb(231,177,25)" fg:x="213295" fg:w="254"/><text x="56.5704%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (254 samples, 0.07%)</title><rect x="56.3204%" y="261" width="0.0671%" height="15" fill="rgb(219,179,1)" fg:x="213295" fg:w="254"/><text x="56.5704%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (254 samples, 0.07%)</title><rect x="56.3204%" y="245" width="0.0671%" height="15" fill="rgb(238,219,53)" fg:x="213295" fg:w="254"/><text x="56.5704%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (258 samples, 0.07%)</title><rect x="56.3949%" y="245" width="0.0681%" height="15" fill="rgb(232,167,36)" fg:x="213577" fg:w="258"/><text x="56.6449%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (258 samples, 0.07%)</title><rect x="56.3949%" y="229" width="0.0681%" height="15" fill="rgb(244,19,51)" fg:x="213577" fg:w="258"/><text x="56.6449%" y="239.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (253 samples, 0.07%)</title><rect x="56.3962%" y="213" width="0.0668%" height="15" fill="rgb(224,6,22)" fg:x="213582" fg:w="253"/><text x="56.6462%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,092 samples, 0.29%)</title><rect x="56.7384%" y="213" width="0.2883%" height="15" fill="rgb(224,145,5)" fg:x="214878" fg:w="1092"/><text x="56.9884%" y="223.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,092 samples, 0.29%)</title><rect x="56.7384%" y="197" width="0.2883%" height="15" fill="rgb(234,130,49)" fg:x="214878" fg:w="1092"/><text x="56.9884%" y="207.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,092 samples, 0.29%)</title><rect x="56.7384%" y="181" width="0.2883%" height="15" fill="rgb(254,6,2)" fg:x="214878" fg:w="1092"/><text x="56.9884%" y="191.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_total_cross_section::{{closure}} (7,015 samples, 1.85%)</title><rect x="56.4630%" y="229" width="1.8523%" height="15" fill="rgb(208,96,46)" fg:x="213835" fg:w="7015"/><text x="56.7130%" y="239.50">f..</text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (4,880 samples, 1.29%)</title><rect x="57.0268%" y="213" width="1.2886%" height="15" fill="rgb(239,3,39)" fg:x="215970" fg:w="4880"/><text x="57.2768%" y="223.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_total_cross_section (8,209 samples, 2.17%)</title><rect x="56.3199%" y="293" width="2.1676%" height="15" fill="rgb(233,210,1)" fg:x="213293" fg:w="8209"/><text x="56.5699%" y="303.50">f..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (7,925 samples, 2.09%)</title><rect x="56.3949%" y="277" width="2.0926%" height="15" fill="rgb(244,137,37)" fg:x="213577" fg:w="7925"/><text x="56.6449%" y="287.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (7,925 samples, 2.09%)</title><rect x="56.3949%" y="261" width="2.0926%" height="15" fill="rgb(240,136,2)" fg:x="213577" fg:w="7925"/><text x="56.6449%" y="271.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (7,667 samples, 2.02%)</title><rect x="56.4630%" y="245" width="2.0245%" height="15" fill="rgb(239,18,37)" fg:x="213835" fg:w="7667"/><text x="56.7130%" y="255.50">c..</text></g><g><title>fastiron::main (652 samples, 0.17%)</title><rect x="58.3153%" y="229" width="0.1722%" height="15" fill="rgb(218,185,22)" fg:x="220850" fg:w="652"/><text x="58.5653%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (10,572 samples, 2.79%)</title><rect x="55.7915%" y="357" width="2.7915%" height="15" fill="rgb(225,218,4)" fg:x="211292" fg:w="10572"/><text x="56.0415%" y="367.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (10,562 samples, 2.79%)</title><rect x="55.7942%" y="341" width="2.7889%" height="15" fill="rgb(230,182,32)" fg:x="211302" fg:w="10562"/><text x="56.0442%" y="351.50">co..</text></g><g><title>fastiron::simulation::macro_cross_section::weighted_macroscopic_cross_section::{{closure}} (10,562 samples, 2.79%)</title><rect x="55.7942%" y="325" width="2.7889%" height="15" fill="rgb(242,56,43)" fg:x="211302" fg:w="10562"/><text x="56.0442%" y="335.50">fa..</text></g><g><title>fastiron::simulation::macro_cross_section::macroscopic_total_cross_section (9,784 samples, 2.58%)</title><rect x="55.9996%" y="309" width="2.5835%" height="15" fill="rgb(233,99,24)" fg:x="212080" fg:w="9784"/><text x="56.2496%" y="319.50">fa..</text></g><g><title>fastiron::main (362 samples, 0.10%)</title><rect x="58.4875%" y="293" width="0.0956%" height="15" fill="rgb(234,209,42)" fg:x="221502" fg:w="362"/><text x="58.7375%" y="303.50"></text></g><g><title>fastiron::simulation::macro_cross_section::weighted_macroscopic_cross_section (29,435 samples, 7.77%)</title><rect x="50.8158%" y="389" width="7.7723%" height="15" fill="rgb(227,7,12)" fg:x="192448" fg:w="29435"/><text x="51.0658%" y="399.50">fastiron::s..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10,591 samples, 2.80%)</title><rect x="55.7915%" y="373" width="2.7965%" height="15" fill="rgb(245,203,43)" fg:x="211292" fg:w="10591"/><text x="56.0415%" y="383.50">co..</text></g><g><title>fastiron::simulation::mc_segment_outcome::find_min (340 samples, 0.09%)</title><rect x="58.5881%" y="389" width="0.0898%" height="15" fill="rgb(238,205,33)" fg:x="221883" fg:w="340"/><text x="58.8381%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (340 samples, 0.09%)</title><rect x="58.5881%" y="373" width="0.0898%" height="15" fill="rgb(231,56,7)" fg:x="221883" fg:w="340"/><text x="58.8381%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (340 samples, 0.09%)</title><rect x="58.5881%" y="357" width="0.0898%" height="15" fill="rgb(244,186,29)" fg:x="221883" fg:w="340"/><text x="58.8381%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (340 samples, 0.09%)</title><rect x="58.5881%" y="341" width="0.0898%" height="15" fill="rgb(234,111,31)" fg:x="221883" fg:w="340"/><text x="58.8381%" y="351.50"></text></g><g><title>fastiron::simulation::mc_segment_outcome::find_min::{{closure}} (340 samples, 0.09%)</title><rect x="58.5881%" y="325" width="0.0898%" height="15" fill="rgb(241,149,10)" fg:x="221883" fg:w="340"/><text x="58.8381%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (238 samples, 0.06%)</title><rect x="58.6150%" y="309" width="0.0628%" height="15" fill="rgb(249,206,44)" fg:x="221985" fg:w="238"/><text x="58.8650%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (97 samples, 0.03%)</title><rect x="58.6942%" y="373" width="0.0256%" height="15" fill="rgb(251,153,30)" fg:x="222285" fg:w="97"/><text x="58.9442%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (97 samples, 0.03%)</title><rect x="58.6942%" y="357" width="0.0256%" height="15" fill="rgb(239,152,38)" fg:x="222285" fg:w="97"/><text x="58.9442%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (97 samples, 0.03%)</title><rect x="58.6942%" y="341" width="0.0256%" height="15" fill="rgb(249,139,47)" fg:x="222285" fg:w="97"/><text x="58.9442%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::gt (92 samples, 0.02%)</title><rect x="58.7198%" y="373" width="0.0243%" height="15" fill="rgb(244,64,35)" fg:x="222382" fg:w="92"/><text x="58.9698%" y="383.50"></text></g><g><title>fastiron::main (4,035 samples, 1.07%)</title><rect x="58.7491%" y="373" width="1.0654%" height="15" fill="rgb(216,46,15)" fg:x="222493" fg:w="4035"/><text x="58.9991%" y="383.50"></text></g><g><title>[libc.so.6] (3,063 samples, 0.81%)</title><rect x="59.0058%" y="357" width="0.8088%" height="15" fill="rgb(250,74,19)" fg:x="223465" fg:w="3063"/><text x="59.2558%" y="367.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,095 samples, 0.82%)</title><rect x="59.8420%" y="325" width="0.8172%" height="15" fill="rgb(249,42,33)" fg:x="226632" fg:w="3095"/><text x="60.0920%" y="335.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,095 samples, 0.82%)</title><rect x="59.8420%" y="309" width="0.8172%" height="15" fill="rgb(242,149,17)" fg:x="226632" fg:w="3095"/><text x="60.0920%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (3,056 samples, 0.81%)</title><rect x="59.8523%" y="293" width="0.8069%" height="15" fill="rgb(244,29,21)" fg:x="226671" fg:w="3056"/><text x="60.1023%" y="303.50"></text></g><g><title>fastiron::main (10,692 samples, 2.82%)</title><rect x="60.6593%" y="309" width="2.8232%" height="15" fill="rgb(220,130,37)" fg:x="229727" fg:w="10692"/><text x="60.9093%" y="319.50">fa..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,546 samples, 0.41%)</title><rect x="69.8395%" y="293" width="0.4082%" height="15" fill="rgb(211,67,2)" fg:x="264494" fg:w="1546"/><text x="70.0895%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,546 samples, 0.41%)</title><rect x="69.8395%" y="277" width="0.4082%" height="15" fill="rgb(235,68,52)" fg:x="264494" fg:w="1546"/><text x="70.0895%" y="287.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,546 samples, 0.41%)</title><rect x="69.8395%" y="261" width="0.4082%" height="15" fill="rgb(246,142,3)" fg:x="264494" fg:w="1546"/><text x="70.0895%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (5,536 samples, 1.46%)</title><rect x="70.2477%" y="293" width="1.4618%" height="15" fill="rgb(241,25,7)" fg:x="266040" fg:w="5536"/><text x="70.4977%" y="303.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (3,736 samples, 0.99%)</title><rect x="71.7095%" y="293" width="0.9865%" height="15" fill="rgb(242,119,39)" fg:x="271576" fg:w="3736"/><text x="71.9595%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::le (1,424 samples, 0.38%)</title><rect x="72.6960%" y="293" width="0.3760%" height="15" fill="rgb(241,98,45)" fg:x="275312" fg:w="1424"/><text x="72.9460%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (42,235 samples, 11.15%)</title><rect x="73.0720%" y="293" width="11.1521%" height="15" fill="rgb(254,28,30)" fg:x="276736" fg:w="42235"/><text x="73.3220%" y="303.50">core::option::Op..</text></g><g><title>fastiron::main (4,890 samples, 1.29%)</title><rect x="84.2241%" y="293" width="1.2912%" height="15" fill="rgb(241,142,54)" fg:x="318971" fg:w="4890"/><text x="84.4741%" y="303.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (4,356 samples, 1.15%)</title><rect x="89.8647%" y="277" width="1.1502%" height="15" fill="rgb(222,85,15)" fg:x="340333" fg:w="4356"/><text x="90.1147%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (2,867 samples, 0.76%)</title><rect x="91.0149%" y="277" width="0.7570%" height="15" fill="rgb(210,85,47)" fg:x="344689" fg:w="2867"/><text x="91.2649%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1,821 samples, 0.48%)</title><rect x="91.7720%" y="277" width="0.4808%" height="15" fill="rgb(224,206,25)" fg:x="347556" fg:w="1821"/><text x="92.0220%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Neg&gt;::neg (504 samples, 0.13%)</title><rect x="92.2528%" y="277" width="0.1331%" height="15" fill="rgb(243,201,19)" fg:x="349377" fg:w="504"/><text x="92.5028%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (3,486 samples, 0.92%)</title><rect x="92.3859%" y="277" width="0.9205%" height="15" fill="rgb(236,59,4)" fg:x="349881" fg:w="3486"/><text x="92.6359%" y="287.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::abs (521 samples, 0.14%)</title><rect x="93.3063%" y="277" width="0.1376%" height="15" fill="rgb(254,179,45)" fg:x="353367" fg:w="521"/><text x="93.5563%" y="287.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::abs (521 samples, 0.14%)</title><rect x="93.3063%" y="261" width="0.1376%" height="15" fill="rgb(226,14,10)" fg:x="353367" fg:w="521"/><text x="93.5563%" y="271.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Add&gt;::add (2,406 samples, 0.64%)</title><rect x="93.4439%" y="277" width="0.6353%" height="15" fill="rgb(244,27,41)" fg:x="353888" fg:w="2406"/><text x="93.6939%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (2,406 samples, 0.64%)</title><rect x="93.4439%" y="261" width="0.6353%" height="15" fill="rgb(235,35,32)" fg:x="353888" fg:w="2406"/><text x="93.6939%" y="271.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (2,643 samples, 0.70%)</title><rect x="94.0792%" y="277" width="0.6979%" height="15" fill="rgb(218,68,31)" fg:x="356294" fg:w="2643"/><text x="94.3292%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (2,643 samples, 0.70%)</title><rect x="94.0792%" y="261" width="0.6979%" height="15" fill="rgb(207,120,37)" fg:x="356294" fg:w="2643"/><text x="94.3292%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::gt (739 samples, 0.20%)</title><rect x="94.7771%" y="277" width="0.1951%" height="15" fill="rgb(227,98,0)" fg:x="358937" fg:w="739"/><text x="95.0271%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (3,311 samples, 0.87%)</title><rect x="94.9722%" y="277" width="0.8743%" height="15" fill="rgb(207,7,3)" fg:x="359676" fg:w="3311"/><text x="95.2222%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (137,695 samples, 36.36%)</title><rect x="59.8420%" y="357" width="36.3583%" height="15" fill="rgb(206,98,19)" fg:x="226632" fg:w="137695"/><text x="60.0920%" y="367.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (137,695 samples, 36.36%)</title><rect x="59.8420%" y="341" width="36.3583%" height="15" fill="rgb(217,5,26)" fg:x="226632" fg:w="137695"/><text x="60.0920%" y="351.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (134,600 samples, 35.54%)</title><rect x="60.6593%" y="325" width="35.5411%" height="15" fill="rgb(235,190,38)" fg:x="229727" fg:w="134600"/><text x="60.9093%" y="335.50">core::iter::traits::iterator::Iterator::for_each::call::{{..</text></g><g><title>fastiron::simulation::mct::mct_nf_3dg::{{closure}} (123,908 samples, 32.72%)</title><rect x="63.4825%" y="309" width="32.7178%" height="15" fill="rgb(247,86,24)" fg:x="240419" fg:w="123908"/><text x="63.7325%" y="319.50">fastiron::simulation::mct::mct_nf_3dg::{{closure}}</text></g><g><title>fastiron::simulation::mct::mct_nf_3dg_dist_to_segment (40,466 samples, 10.69%)</title><rect x="85.5153%" y="293" width="10.6850%" height="15" fill="rgb(205,101,16)" fg:x="323861" fg:w="40466"/><text x="85.7653%" y="303.50">fastiron::simula..</text></g><g><title>fastiron::main (1,340 samples, 0.35%)</title><rect x="95.8465%" y="277" width="0.3538%" height="15" fill="rgb(246,168,33)" fg:x="362987" fg:w="1340"/><text x="96.0965%" y="287.50"></text></g><g><title>fastiron::main (344 samples, 0.09%)</title><rect x="96.2003%" y="357" width="0.0908%" height="15" fill="rgb(231,114,1)" fg:x="364327" fg:w="344"/><text x="96.4503%" y="367.50"></text></g><g><title>&lt;fastiron::geometry::facets::MCNearestFacet&lt;T&gt; as core::default::Default&gt;::default (142 samples, 0.04%)</title><rect x="96.5225%" y="325" width="0.0375%" height="15" fill="rgb(207,184,53)" fg:x="365547" fg:w="142"/><text x="96.7725%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f64&gt;::eq (83 samples, 0.02%)</title><rect x="96.5600%" y="325" width="0.0219%" height="15" fill="rgb(224,95,51)" fg:x="365689" fg:w="83"/><text x="96.8100%" y="335.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (801 samples, 0.21%)</title><rect x="96.6027%" y="261" width="0.2115%" height="15" fill="rgb(212,188,45)" fg:x="365851" fg:w="801"/><text x="96.8527%" y="271.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (801 samples, 0.21%)</title><rect x="96.6027%" y="245" width="0.2115%" height="15" fill="rgb(223,154,38)" fg:x="365851" fg:w="801"/><text x="96.8527%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2,084 samples, 0.55%)</title><rect x="96.5819%" y="277" width="0.5503%" height="15" fill="rgb(251,22,52)" fg:x="365772" fg:w="2084"/><text x="96.8319%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,204 samples, 0.32%)</title><rect x="96.8142%" y="261" width="0.3179%" height="15" fill="rgb(229,209,22)" fg:x="366652" fg:w="1204"/><text x="97.0642%" y="271.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2,841 samples, 0.75%)</title><rect x="96.5819%" y="293" width="0.7502%" height="15" fill="rgb(234,138,34)" fg:x="365772" fg:w="2841"/><text x="96.8319%" y="303.50"></text></g><g><title>fastiron::main (757 samples, 0.20%)</title><rect x="97.1322%" y="277" width="0.1999%" height="15" fill="rgb(212,95,11)" fg:x="367856" fg:w="757"/><text x="97.3822%" y="287.50"></text></g><g><title>fastiron::main (1,400 samples, 0.37%)</title><rect x="97.3320%" y="277" width="0.3697%" height="15" fill="rgb(240,179,47)" fg:x="368613" fg:w="1400"/><text x="97.5820%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::gt (1,679 samples, 0.44%)</title><rect x="98.5979%" y="261" width="0.4433%" height="15" fill="rgb(240,163,11)" fg:x="373407" fg:w="1679"/><text x="98.8479%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (11,741 samples, 3.10%)</title><rect x="96.5819%" y="309" width="3.1002%" height="15" fill="rgb(236,37,12)" fg:x="365772" fg:w="11741"/><text x="96.8319%" y="319.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (8,900 samples, 2.35%)</title><rect x="97.3320%" y="293" width="2.3500%" height="15" fill="rgb(232,164,16)" fg:x="368613" fg:w="8900"/><text x="97.5820%" y="303.50">c..</text></g><g><title>fastiron::simulation::mct::mct_nf_compute_nearest::{{closure}} (7,500 samples, 1.98%)</title><rect x="97.7017%" y="277" width="1.9804%" height="15" fill="rgb(244,205,15)" fg:x="370013" fg:w="7500"/><text x="97.9517%" y="287.50">f..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::le (2,427 samples, 0.64%)</title><rect x="99.0412%" y="261" width="0.6408%" height="15" fill="rgb(223,117,47)" fg:x="375086" fg:w="2427"/><text x="99.2912%" y="271.50"></text></g><g><title>fastiron::simulation::mc_segment_outcome::outcome (216,616 samples, 57.20%)</title><rect x="42.5481%" y="405" width="57.1973%" height="15" fill="rgb(244,107,35)" fg:x="161137" fg:w="216616"/><text x="42.7981%" y="415.50">fastiron::simulation::mc_segment_outcome::outcome</text></g><g><title>fastiron::simulation::mct::nearest_facet (155,530 samples, 41.07%)</title><rect x="58.6779%" y="389" width="41.0676%" height="15" fill="rgb(205,140,8)" fg:x="222223" fg:w="155530"/><text x="58.9279%" y="399.50">fastiron::simulation::mct::nearest_facet</text></g><g><title>fastiron::simulation::mct::mct_nf_3dg (151,225 samples, 39.93%)</title><rect x="59.8146%" y="373" width="39.9309%" height="15" fill="rgb(228,84,46)" fg:x="226528" fg:w="151225"/><text x="60.0646%" y="383.50">fastiron::simulation::mct::mct_nf_3dg</text></g><g><title>fastiron::simulation::mct::mct_nf_find_nearest (13,082 samples, 3.45%)</title><rect x="96.2912%" y="357" width="3.4543%" height="15" fill="rgb(254,188,9)" fg:x="364671" fg:w="13082"/><text x="96.5412%" y="367.50">fas..</text></g><g><title>fastiron::simulation::mct::mct_nf_compute_nearest (12,596 samples, 3.33%)</title><rect x="96.4195%" y="341" width="3.3260%" height="15" fill="rgb(206,112,54)" fg:x="365157" fg:w="12596"/><text x="96.6695%" y="351.50">fas..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (11,981 samples, 3.16%)</title><rect x="96.5819%" y="325" width="3.1636%" height="15" fill="rgb(216,84,49)" fg:x="365772" fg:w="11981"/><text x="96.8319%" y="335.50">cor..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call (240 samples, 0.06%)</title><rect x="99.6821%" y="309" width="0.0634%" height="15" fill="rgb(214,194,35)" fg:x="377513" fg:w="240"/><text x="99.9321%" y="319.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::dot (126 samples, 0.03%)</title><rect x="99.7753%" y="389" width="0.0333%" height="15" fill="rgb(249,28,3)" fg:x="377866" fg:w="126"/><text x="100.0253%" y="399.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (374,486 samples, 98.88%)</title><rect x="0.9281%" y="469" width="98.8828%" height="15" fill="rgb(222,56,52)" fg:x="3515" fg:w="374486"/><text x="1.1781%" y="479.50">&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each</text></g><g><title>fastiron::cycle_tracking::{{closure}} (374,476 samples, 98.88%)</title><rect x="0.9308%" y="453" width="98.8802%" height="15" fill="rgb(245,217,50)" fg:x="3525" fg:w="374476"/><text x="1.1808%" y="463.50">fastiron::cycle_tracking::{{closure}}</text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_guts (374,000 samples, 98.75%)</title><rect x="1.0565%" y="437" width="98.7545%" height="15" fill="rgb(213,201,24)" fg:x="4001" fg:w="374000"/><text x="1.3065%" y="447.50">fastiron::simulation::cycle_tracking::cycle_tracking_guts</text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_function (371,935 samples, 98.21%)</title><rect x="1.6017%" y="421" width="98.2092%" height="15" fill="rgb(248,116,28)" fg:x="6066" fg:w="371935"/><text x="1.8517%" y="431.50">fastiron::simulation::cycle_tracking::cycle_tracking_function</text></g><g><title>fastiron::simulation::mct::reflect_particle (248 samples, 0.07%)</title><rect x="99.7455%" y="405" width="0.0655%" height="15" fill="rgb(219,72,43)" fg:x="377753" fg:w="248"/><text x="99.9955%" y="415.50"></text></g><g><title>fastiron::main (53 samples, 0.01%)</title><rect x="99.8109%" y="469" width="0.0140%" height="15" fill="rgb(209,138,14)" fg:x="378001" fg:w="53"/><text x="100.0609%" y="479.50"></text></g><g><title>fastiron::particles::particle_container::ParticleContainer&lt;T&gt;::clean_extra_vaults (600 samples, 0.16%)</title><rect x="99.8249%" y="469" width="0.1584%" height="15" fill="rgb(222,18,33)" fg:x="378054" fg:w="600"/><text x="100.0749%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (600 samples, 0.16%)</title><rect x="99.8249%" y="453" width="0.1584%" height="15" fill="rgb(213,199,7)" fg:x="378054" fg:w="600"/><text x="100.0749%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (600 samples, 0.16%)</title><rect x="99.8249%" y="437" width="0.1584%" height="15" fill="rgb(250,110,10)" fg:x="378054" fg:w="600"/><text x="100.0749%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (600 samples, 0.16%)</title><rect x="99.8249%" y="421" width="0.1584%" height="15" fill="rgb(248,123,6)" fg:x="378054" fg:w="600"/><text x="100.0749%" y="431.50"></text></g><g><title>[libc.so.6] (600 samples, 0.16%)</title><rect x="99.8249%" y="405" width="0.1584%" height="15" fill="rgb(206,91,31)" fg:x="378054" fg:w="600"/><text x="100.0749%" y="415.50"></text></g><g><title>fastiron::cycle_tracking (375,142 samples, 99.06%)</title><rect x="0.9281%" y="485" width="99.0560%" height="15" fill="rgb(211,154,13)" fg:x="3515" fg:w="375142"/><text x="1.1781%" y="495.50">fastiron::cycle_tracking</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (48 samples, 0.01%)</title><rect x="99.9844%" y="453" width="0.0127%" height="15" fill="rgb(225,148,7)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (48 samples, 0.01%)</title><rect x="99.9844%" y="437" width="0.0127%" height="15" fill="rgb(220,160,43)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (48 samples, 0.01%)</title><rect x="99.9844%" y="421" width="0.0127%" height="15" fill="rgb(213,52,39)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="431.50"></text></g><g><title>fastiron::init::init_mesh::{{closure}} (48 samples, 0.01%)</title><rect x="99.9844%" y="405" width="0.0127%" height="15" fill="rgb(243,137,7)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="415.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::build_mesh_partition (48 samples, 0.01%)</title><rect x="99.9844%" y="389" width="0.0127%" height="15" fill="rgb(230,79,13)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="399.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::assign_cells_to_domain (48 samples, 0.01%)</title><rect x="99.9844%" y="373" width="0.0127%" height="15" fill="rgb(247,105,23)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="383.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood (48 samples, 0.01%)</title><rect x="99.9844%" y="357" width="0.0127%" height="15" fill="rgb(223,179,41)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (48 samples, 0.01%)</title><rect x="99.9844%" y="341" width="0.0127%" height="15" fill="rgb(218,9,34)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (48 samples, 0.01%)</title><rect x="99.9844%" y="325" width="0.0127%" height="15" fill="rgb(222,106,8)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (48 samples, 0.01%)</title><rect x="99.9844%" y="309" width="0.0127%" height="15" fill="rgb(211,220,0)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="319.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood::{{closure}} (48 samples, 0.01%)</title><rect x="99.9844%" y="293" width="0.0127%" height="15" fill="rgb(229,52,16)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (48 samples, 0.01%)</title><rect x="99.9844%" y="277" width="0.0127%" height="15" fill="rgb(212,155,18)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (48 samples, 0.01%)</title><rect x="99.9844%" y="261" width="0.0127%" height="15" fill="rgb(242,21,14)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (48 samples, 0.01%)</title><rect x="99.9844%" y="245" width="0.0127%" height="15" fill="rgb(222,19,48)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="255.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood::{{closure}}::{{closure}} (48 samples, 0.01%)</title><rect x="99.9844%" y="229" width="0.0127%" height="15" fill="rgb(232,45,27)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (48 samples, 0.01%)</title><rect x="99.9844%" y="213" width="0.0127%" height="15" fill="rgb(249,103,42)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (48 samples, 0.01%)</title><rect x="99.9844%" y="197" width="0.0127%" height="15" fill="rgb(246,81,33)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (48 samples, 0.01%)</title><rect x="99.9844%" y="181" width="0.0127%" height="15" fill="rgb(252,33,42)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="191.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood::{{closure}}::{{closure}}::{{closure}} (48 samples, 0.01%)</title><rect x="99.9844%" y="165" width="0.0127%" height="15" fill="rgb(209,212,41)" fg:x="378658" fg:w="48"/><text x="100.2344%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (47 samples, 0.01%)</title><rect x="99.9847%" y="149" width="0.0124%" height="15" fill="rgb(207,154,6)" fg:x="378659" fg:w="47"/><text x="100.2347%" y="159.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (47 samples, 0.01%)</title><rect x="99.9847%" y="133" width="0.0124%" height="15" fill="rgb(223,64,47)" fg:x="378659" fg:w="47"/><text x="100.2347%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (47 samples, 0.01%)</title><rect x="99.9847%" y="117" width="0.0124%" height="15" fill="rgb(211,161,38)" fg:x="378659" fg:w="47"/><text x="100.2347%" y="127.50"></text></g><g><title>fastiron::init::init_mc (53 samples, 0.01%)</title><rect x="99.9842%" y="485" width="0.0140%" height="15" fill="rgb(219,138,40)" fg:x="378657" fg:w="53"/><text x="100.2342%" y="495.50"></text></g><g><title>fastiron::init::init_mesh (52 samples, 0.01%)</title><rect x="99.9844%" y="469" width="0.0137%" height="15" fill="rgb(241,228,46)" fg:x="378658" fg:w="52"/><text x="100.2344%" y="479.50"></text></g><g><title>__libc_start_main_impl (376,100 samples, 99.31%)</title><rect x="0.6894%" y="581" width="99.3090%" height="15" fill="rgb(223,209,38)" fg:x="2611" fg:w="376100"/><text x="0.9394%" y="591.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (376,100 samples, 99.31%)</title><rect x="0.6894%" y="565" width="99.3090%" height="15" fill="rgb(236,164,45)" fg:x="2611" fg:w="376100"/><text x="0.9394%" y="575.50">__libc_start_call_main</text></g><g><title>main (376,100 samples, 99.31%)</title><rect x="0.6894%" y="549" width="99.3090%" height="15" fill="rgb(231,15,5)" fg:x="2611" fg:w="376100"/><text x="0.9394%" y="559.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (376,100 samples, 99.31%)</title><rect x="0.6894%" y="533" width="99.3090%" height="15" fill="rgb(252,35,15)" fg:x="2611" fg:w="376100"/><text x="0.9394%" y="543.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (376,100 samples, 99.31%)</title><rect x="0.6894%" y="517" width="99.3090%" height="15" fill="rgb(248,181,18)" fg:x="2611" fg:w="376100"/><text x="0.9394%" y="527.50">core::ops::function::FnOnce::call_once</text></g><g><title>fastiron::main (376,100 samples, 99.31%)</title><rect x="0.6894%" y="501" width="99.3090%" height="15" fill="rgb(233,39,42)" fg:x="2611" fg:w="376100"/><text x="0.9394%" y="511.50">fastiron::main</text></g><g><title>_start (376,106 samples, 99.31%)</title><rect x="0.6881%" y="597" width="99.3106%" height="15" fill="rgb(238,110,33)" fg:x="2606" fg:w="376106"/><text x="0.9381%" y="607.50">_start</text></g><g><title>all (378,717 samples, 100%)</title><rect x="0.0000%" y="629" width="100.0000%" height="15" fill="rgb(233,195,10)" fg:x="0" fg:w="378717"/><text x="0.2500%" y="639.50"></text></g><g><title>fastiron (378,717 samples, 100.00%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(254,105,3)" fg:x="0" fg:w="378717"/><text x="0.2500%" y="623.50">fastiron</text></g></svg></svg>