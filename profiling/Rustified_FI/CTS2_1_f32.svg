<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="383388"><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (44 samples, 0.01%)</title><rect x="0.0016%" y="453" width="0.0115%" height="15" fill="rgb(227,0,7)" fg:x="6" fg:w="44"/><text x="0.2516%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (44 samples, 0.01%)</title><rect x="0.0016%" y="437" width="0.0115%" height="15" fill="rgb(217,0,24)" fg:x="6" fg:w="44"/><text x="0.2516%" y="447.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (44 samples, 0.01%)</title><rect x="0.0016%" y="421" width="0.0115%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="44"/><text x="0.2516%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (44 samples, 0.01%)</title><rect x="0.0016%" y="405" width="0.0115%" height="15" fill="rgb(248,212,6)" fg:x="6" fg:w="44"/><text x="0.2516%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (44 samples, 0.01%)</title><rect x="0.0016%" y="389" width="0.0115%" height="15" fill="rgb(208,68,35)" fg:x="6" fg:w="44"/><text x="0.2516%" y="399.50"></text></g><g><title>__rdl_dealloc (44 samples, 0.01%)</title><rect x="0.0016%" y="373" width="0.0115%" height="15" fill="rgb(232,128,0)" fg:x="6" fg:w="44"/><text x="0.2516%" y="383.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (44 samples, 0.01%)</title><rect x="0.0016%" y="357" width="0.0115%" height="15" fill="rgb(207,160,47)" fg:x="6" fg:w="44"/><text x="0.2516%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (67 samples, 0.02%)</title><rect x="0.0159%" y="437" width="0.0175%" height="15" fill="rgb(228,23,34)" fg:x="61" fg:w="67"/><text x="0.2659%" y="447.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearDataReaction&lt;T&gt;::sample_collision (91 samples, 0.02%)</title><rect x="0.0130%" y="453" width="0.0237%" height="15" fill="rgb(218,30,26)" fg:x="50" fg:w="91"/><text x="0.2630%" y="463.50"></text></g><g><title>&lt;f32 as num_traits::float::Float&gt;::ln (40 samples, 0.01%)</title><rect x="0.0368%" y="437" width="0.0104%" height="15" fill="rgb(220,122,19)" fg:x="141" fg:w="40"/><text x="0.2868%" y="447.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::ln (40 samples, 0.01%)</title><rect x="0.0368%" y="421" width="0.0104%" height="15" fill="rgb(250,228,42)" fg:x="141" fg:w="40"/><text x="0.2868%" y="431.50"></text></g><g><title>[[heap]] (221 samples, 0.06%)</title><rect x="0.0000%" y="581" width="0.0576%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="221"/><text x="0.2500%" y="591.50"></text></g><g><title>fastiron::main (216 samples, 0.06%)</title><rect x="0.0013%" y="565" width="0.0563%" height="15" fill="rgb(216,20,37)" fg:x="5" fg:w="216"/><text x="0.2513%" y="575.50"></text></g><g><title>fastiron::cycle_tracking (215 samples, 0.06%)</title><rect x="0.0016%" y="549" width="0.0561%" height="15" fill="rgb(206,188,39)" fg:x="6" fg:w="215"/><text x="0.2516%" y="559.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (215 samples, 0.06%)</title><rect x="0.0016%" y="533" width="0.0561%" height="15" fill="rgb(217,207,13)" fg:x="6" fg:w="215"/><text x="0.2516%" y="543.50"></text></g><g><title>fastiron::cycle_tracking::{{closure}} (215 samples, 0.06%)</title><rect x="0.0016%" y="517" width="0.0561%" height="15" fill="rgb(231,73,38)" fg:x="6" fg:w="215"/><text x="0.2516%" y="527.50"></text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_guts (215 samples, 0.06%)</title><rect x="0.0016%" y="501" width="0.0561%" height="15" fill="rgb(225,20,46)" fg:x="6" fg:w="215"/><text x="0.2516%" y="511.50"></text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_function (215 samples, 0.06%)</title><rect x="0.0016%" y="485" width="0.0561%" height="15" fill="rgb(210,31,41)" fg:x="6" fg:w="215"/><text x="0.2516%" y="495.50"></text></g><g><title>fastiron::simulation::collision_event::collision_event (215 samples, 0.06%)</title><rect x="0.0016%" y="469" width="0.0561%" height="15" fill="rgb(221,200,47)" fg:x="6" fg:w="215"/><text x="0.2516%" y="479.50"></text></g><g><title>fastiron::simulation::collision_event::update_trajectory (80 samples, 0.02%)</title><rect x="0.0368%" y="453" width="0.0209%" height="15" fill="rgb(226,26,5)" fg:x="141" fg:w="80"/><text x="0.2868%" y="463.50"></text></g><g><title>&lt;f32 as num_traits::float::Float&gt;::sin (40 samples, 0.01%)</title><rect x="0.0472%" y="437" width="0.0104%" height="15" fill="rgb(249,33,26)" fg:x="181" fg:w="40"/><text x="0.2972%" y="447.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sin (40 samples, 0.01%)</title><rect x="0.0472%" y="421" width="0.0104%" height="15" fill="rgb(235,183,28)" fg:x="181" fg:w="40"/><text x="0.2972%" y="431.50"></text></g><g><title>__GI___libc_free (241 samples, 0.06%)</title><rect x="0.0647%" y="565" width="0.0629%" height="15" fill="rgb(221,5,38)" fg:x="248" fg:w="241"/><text x="0.3147%" y="575.50"></text></g><g><title>__GI___libc_malloc (154 samples, 0.04%)</title><rect x="0.1275%" y="565" width="0.0402%" height="15" fill="rgb(247,18,42)" fg:x="489" fg:w="154"/><text x="0.3775%" y="575.50"></text></g><g><title>_int_free (317 samples, 0.08%)</title><rect x="0.1729%" y="565" width="0.0827%" height="15" fill="rgb(241,131,45)" fg:x="663" fg:w="317"/><text x="0.4229%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (172 samples, 0.04%)</title><rect x="0.2619%" y="565" width="0.0449%" height="15" fill="rgb(249,31,29)" fg:x="1004" fg:w="172"/><text x="0.5119%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (100 samples, 0.03%)</title><rect x="0.2807%" y="549" width="0.0261%" height="15" fill="rgb(225,111,53)" fg:x="1076" fg:w="100"/><text x="0.5307%" y="559.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (82 samples, 0.02%)</title><rect x="0.2854%" y="533" width="0.0214%" height="15" fill="rgb(238,160,17)" fg:x="1094" fg:w="82"/><text x="0.5354%" y="543.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (82 samples, 0.02%)</title><rect x="0.2854%" y="517" width="0.0214%" height="15" fill="rgb(214,148,48)" fg:x="1094" fg:w="82"/><text x="0.5354%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (434 samples, 0.11%)</title><rect x="0.3067%" y="565" width="0.1132%" height="15" fill="rgb(232,36,49)" fg:x="1176" fg:w="434"/><text x="0.5567%" y="575.50"></text></g><g><title>[unknown] (1,388 samples, 0.36%)</title><rect x="0.0623%" y="581" width="0.3620%" height="15" fill="rgb(209,103,24)" fg:x="239" fg:w="1388"/><text x="0.3123%" y="591.50"></text></g><g><title>__do_global_dtors_aux_fini_array_entry (146 samples, 0.04%)</title><rect x="0.4252%" y="581" width="0.0381%" height="15" fill="rgb(229,88,8)" fg:x="1630" fg:w="146"/><text x="0.6752%" y="591.50"></text></g><g><title>alloc::raw_vec::finish_grow (140 samples, 0.04%)</title><rect x="0.4267%" y="565" width="0.0365%" height="15" fill="rgb(213,181,19)" fg:x="1636" fg:w="140"/><text x="0.6767%" y="575.50"></text></g><g><title>fastiron::data::tallies::FluenceDomain&lt;T&gt;::compute (95 samples, 0.02%)</title><rect x="0.4661%" y="373" width="0.0248%" height="15" fill="rgb(254,191,54)" fg:x="1787" fg:w="95"/><text x="0.7161%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (95 samples, 0.02%)</title><rect x="0.4661%" y="357" width="0.0248%" height="15" fill="rgb(241,83,37)" fg:x="1787" fg:w="95"/><text x="0.7161%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (95 samples, 0.02%)</title><rect x="0.4661%" y="341" width="0.0248%" height="15" fill="rgb(233,36,39)" fg:x="1787" fg:w="95"/><text x="0.7161%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (95 samples, 0.02%)</title><rect x="0.4661%" y="325" width="0.0248%" height="15" fill="rgb(226,3,54)" fg:x="1787" fg:w="95"/><text x="0.7161%" y="335.50"></text></g><g><title>fastiron::data::tallies::FluenceDomain&lt;T&gt;::compute::{{closure}} (95 samples, 0.02%)</title><rect x="0.4661%" y="309" width="0.0248%" height="15" fill="rgb(245,192,40)" fg:x="1787" fg:w="95"/><text x="0.7161%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (95 samples, 0.02%)</title><rect x="0.4661%" y="293" width="0.0248%" height="15" fill="rgb(238,167,29)" fg:x="1787" fg:w="95"/><text x="0.7161%" y="303.50"></text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum (95 samples, 0.02%)</title><rect x="0.4661%" y="277" width="0.0248%" height="15" fill="rgb(232,182,51)" fg:x="1787" fg:w="95"/><text x="0.7161%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (95 samples, 0.02%)</title><rect x="0.4661%" y="261" width="0.0248%" height="15" fill="rgb(231,60,39)" fg:x="1787" fg:w="95"/><text x="0.7161%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (95 samples, 0.02%)</title><rect x="0.4661%" y="245" width="0.0248%" height="15" fill="rgb(208,69,12)" fg:x="1787" fg:w="95"/><text x="0.7161%" y="255.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::{{closure}} (89 samples, 0.02%)</title><rect x="0.4677%" y="229" width="0.0232%" height="15" fill="rgb(235,93,37)" fg:x="1793" fg:w="89"/><text x="0.7177%" y="239.50"></text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (89 samples, 0.02%)</title><rect x="0.4677%" y="213" width="0.0232%" height="15" fill="rgb(213,116,39)" fg:x="1793" fg:w="89"/><text x="0.7177%" y="223.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::cycle_finalize (109 samples, 0.03%)</title><rect x="0.4661%" y="453" width="0.0284%" height="15" fill="rgb(222,207,29)" fg:x="1787" fg:w="109"/><text x="0.7161%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (109 samples, 0.03%)</title><rect x="0.4661%" y="437" width="0.0284%" height="15" fill="rgb(206,96,30)" fg:x="1787" fg:w="109"/><text x="0.7161%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (109 samples, 0.03%)</title><rect x="0.4661%" y="421" width="0.0284%" height="15" fill="rgb(218,138,4)" fg:x="1787" fg:w="109"/><text x="0.7161%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (109 samples, 0.03%)</title><rect x="0.4661%" y="405" width="0.0284%" height="15" fill="rgb(250,191,14)" fg:x="1787" fg:w="109"/><text x="0.7161%" y="415.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::cycle_finalize::{{closure}} (109 samples, 0.03%)</title><rect x="0.4661%" y="389" width="0.0284%" height="15" fill="rgb(239,60,40)" fg:x="1787" fg:w="109"/><text x="0.7161%" y="399.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::print_summary (94 samples, 0.02%)</title><rect x="0.4945%" y="453" width="0.0245%" height="15" fill="rgb(206,27,48)" fg:x="1896" fg:w="94"/><text x="0.7445%" y="463.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::scalar_flux_sum (94 samples, 0.02%)</title><rect x="0.4945%" y="437" width="0.0245%" height="15" fill="rgb(225,35,8)" fg:x="1896" fg:w="94"/><text x="0.7445%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (94 samples, 0.02%)</title><rect x="0.4945%" y="421" width="0.0245%" height="15" fill="rgb(250,213,24)" fg:x="1896" fg:w="94"/><text x="0.7445%" y="431.50"></text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum (94 samples, 0.02%)</title><rect x="0.4945%" y="405" width="0.0245%" height="15" fill="rgb(247,123,22)" fg:x="1896" fg:w="94"/><text x="0.7445%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (94 samples, 0.02%)</title><rect x="0.4945%" y="389" width="0.0245%" height="15" fill="rgb(231,138,38)" fg:x="1896" fg:w="94"/><text x="0.7445%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (94 samples, 0.02%)</title><rect x="0.4945%" y="373" width="0.0245%" height="15" fill="rgb(231,145,46)" fg:x="1896" fg:w="94"/><text x="0.7445%" y="383.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (94 samples, 0.02%)</title><rect x="0.4945%" y="357" width="0.0245%" height="15" fill="rgb(251,118,11)" fg:x="1896" fg:w="94"/><text x="0.7445%" y="367.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::scalar_flux_sum::{{closure}} (94 samples, 0.02%)</title><rect x="0.4945%" y="341" width="0.0245%" height="15" fill="rgb(217,147,25)" fg:x="1896" fg:w="94"/><text x="0.7445%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (94 samples, 0.02%)</title><rect x="0.4945%" y="325" width="0.0245%" height="15" fill="rgb(247,81,37)" fg:x="1896" fg:w="94"/><text x="0.7445%" y="335.50"></text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum (94 samples, 0.02%)</title><rect x="0.4945%" y="309" width="0.0245%" height="15" fill="rgb(209,12,38)" fg:x="1896" fg:w="94"/><text x="0.7445%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (94 samples, 0.02%)</title><rect x="0.4945%" y="293" width="0.0245%" height="15" fill="rgb(227,1,9)" fg:x="1896" fg:w="94"/><text x="0.7445%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (94 samples, 0.02%)</title><rect x="0.4945%" y="277" width="0.0245%" height="15" fill="rgb(248,47,43)" fg:x="1896" fg:w="94"/><text x="0.7445%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (94 samples, 0.02%)</title><rect x="0.4945%" y="261" width="0.0245%" height="15" fill="rgb(221,10,30)" fg:x="1896" fg:w="94"/><text x="0.7445%" y="271.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::scalar_flux_sum::{{closure}}::{{closure}} (93 samples, 0.02%)</title><rect x="0.4948%" y="245" width="0.0243%" height="15" fill="rgb(210,229,1)" fg:x="1897" fg:w="93"/><text x="0.7448%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (93 samples, 0.02%)</title><rect x="0.4948%" y="229" width="0.0243%" height="15" fill="rgb(222,148,37)" fg:x="1897" fg:w="93"/><text x="0.7448%" y="239.50"></text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum (93 samples, 0.02%)</title><rect x="0.4948%" y="213" width="0.0243%" height="15" fill="rgb(234,67,33)" fg:x="1897" fg:w="93"/><text x="0.7448%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (93 samples, 0.02%)</title><rect x="0.4948%" y="197" width="0.0243%" height="15" fill="rgb(247,98,35)" fg:x="1897" fg:w="93"/><text x="0.7448%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (93 samples, 0.02%)</title><rect x="0.4948%" y="181" width="0.0243%" height="15" fill="rgb(247,138,52)" fg:x="1897" fg:w="93"/><text x="0.7448%" y="191.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::{{closure}} (85 samples, 0.02%)</title><rect x="0.4969%" y="165" width="0.0222%" height="15" fill="rgb(213,79,30)" fg:x="1905" fg:w="85"/><text x="0.7469%" y="175.50"></text></g><g><title>&lt;f32 as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (85 samples, 0.02%)</title><rect x="0.4969%" y="149" width="0.0222%" height="15" fill="rgb(246,177,23)" fg:x="1905" fg:w="85"/><text x="0.7469%" y="159.50"></text></g><g><title>fastiron::cycle_finalize (233 samples, 0.06%)</title><rect x="0.4661%" y="469" width="0.0608%" height="15" fill="rgb(230,62,27)" fg:x="1787" fg:w="233"/><text x="0.7161%" y="479.50"></text></g><g><title>fastiron::montecarlo::MonteCarlo&lt;T&gt;::clear_cross_section_cache (49 samples, 0.01%)</title><rect x="0.5269%" y="453" width="0.0128%" height="15" fill="rgb(216,154,8)" fg:x="2020" fg:w="49"/><text x="0.7769%" y="463.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (49 samples, 0.01%)</title><rect x="0.5269%" y="437" width="0.0128%" height="15" fill="rgb(244,35,45)" fg:x="2020" fg:w="49"/><text x="0.7769%" y="447.50"></text></g><g><title>fastiron::montecarlo::MonteCarlo&lt;T&gt;::clear_cross_section_cache::{{closure}} (49 samples, 0.01%)</title><rect x="0.5269%" y="421" width="0.0128%" height="15" fill="rgb(251,115,12)" fg:x="2020" fg:w="49"/><text x="0.7769%" y="431.50"></text></g><g><title>fastiron::geometry::mc_domain::MCDomain&lt;T&gt;::clear_cross_section_cache (49 samples, 0.01%)</title><rect x="0.5269%" y="405" width="0.0128%" height="15" fill="rgb(240,54,50)" fg:x="2020" fg:w="49"/><text x="0.7769%" y="415.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (49 samples, 0.01%)</title><rect x="0.5269%" y="389" width="0.0128%" height="15" fill="rgb(233,84,52)" fg:x="2020" fg:w="49"/><text x="0.7769%" y="399.50"></text></g><g><title>fastiron::geometry::mc_domain::MCDomain&lt;T&gt;::clear_cross_section_cache::{{closure}} (42 samples, 0.01%)</title><rect x="0.5287%" y="373" width="0.0110%" height="15" fill="rgb(207,117,47)" fg:x="2027" fg:w="42"/><text x="0.7787%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (42 samples, 0.01%)</title><rect x="0.5287%" y="357" width="0.0110%" height="15" fill="rgb(249,43,39)" fg:x="2027" fg:w="42"/><text x="0.7787%" y="367.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (42 samples, 0.01%)</title><rect x="0.5287%" y="341" width="0.0110%" height="15" fill="rgb(209,38,44)" fg:x="2027" fg:w="42"/><text x="0.7787%" y="351.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (50 samples, 0.01%)</title><rect x="0.5397%" y="421" width="0.0130%" height="15" fill="rgb(236,212,23)" fg:x="2069" fg:w="50"/><text x="0.7897%" y="431.50"></text></g><g><title>fastiron::simulation::population_control::population_control_guts::{{closure}} (47 samples, 0.01%)</title><rect x="0.5404%" y="405" width="0.0123%" height="15" fill="rgb(242,79,21)" fg:x="2072" fg:w="47"/><text x="0.7904%" y="415.50"></text></g><g><title>fastiron::simulation::population_control::population_control (96 samples, 0.03%)</title><rect x="0.5397%" y="453" width="0.0250%" height="15" fill="rgb(211,96,35)" fg:x="2069" fg:w="96"/><text x="0.7897%" y="463.50"></text></g><g><title>fastiron::simulation::population_control::population_control_guts (96 samples, 0.03%)</title><rect x="0.5397%" y="437" width="0.0250%" height="15" fill="rgb(253,215,40)" fg:x="2069" fg:w="96"/><text x="0.7897%" y="447.50"></text></g><g><title>fastiron::particles::particle_container::ParticleContainer&lt;T&gt;::clean_extra_vaults (46 samples, 0.01%)</title><rect x="0.5527%" y="421" width="0.0120%" height="15" fill="rgb(211,81,21)" fg:x="2119" fg:w="46"/><text x="0.8027%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (46 samples, 0.01%)</title><rect x="0.5527%" y="405" width="0.0120%" height="15" fill="rgb(208,190,38)" fg:x="2119" fg:w="46"/><text x="0.8027%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (46 samples, 0.01%)</title><rect x="0.5527%" y="389" width="0.0120%" height="15" fill="rgb(235,213,38)" fg:x="2119" fg:w="46"/><text x="0.8027%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (46 samples, 0.01%)</title><rect x="0.5527%" y="373" width="0.0120%" height="15" fill="rgb(237,122,38)" fg:x="2119" fg:w="46"/><text x="0.8027%" y="383.50"></text></g><g><title>[libc.so.6] (46 samples, 0.01%)</title><rect x="0.5527%" y="357" width="0.0120%" height="15" fill="rgb(244,218,35)" fg:x="2119" fg:w="46"/><text x="0.8027%" y="367.50"></text></g><g><title>fastiron::simulation::mct::cell_position_3dg (53 samples, 0.01%)</title><rect x="0.5850%" y="101" width="0.0138%" height="15" fill="rgb(240,68,47)" fg:x="2243" fg:w="53"/><text x="0.8350%" y="111.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (53 samples, 0.01%)</title><rect x="0.5850%" y="85" width="0.0138%" height="15" fill="rgb(210,16,53)" fg:x="2243" fg:w="53"/><text x="0.8350%" y="95.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (53 samples, 0.01%)</title><rect x="0.5850%" y="69" width="0.0138%" height="15" fill="rgb(235,124,12)" fg:x="2243" fg:w="53"/><text x="0.8350%" y="79.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (53 samples, 0.01%)</title><rect x="0.5850%" y="53" width="0.0138%" height="15" fill="rgb(224,169,11)" fg:x="2243" fg:w="53"/><text x="0.8350%" y="63.50"></text></g><g><title>fastiron::simulation::mct::cell_position_3dg::{{closure}} (50 samples, 0.01%)</title><rect x="0.5858%" y="37" width="0.0130%" height="15" fill="rgb(250,166,2)" fg:x="2246" fg:w="50"/><text x="0.8358%" y="47.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::cross (40 samples, 0.01%)</title><rect x="0.5997%" y="85" width="0.0104%" height="15" fill="rgb(242,216,29)" fg:x="2299" fg:w="40"/><text x="0.8497%" y="95.50"></text></g><g><title>fastiron::simulation::mct::mct_cell_volume_3dg_vector_tetdet (81 samples, 0.02%)</title><rect x="0.5989%" y="101" width="0.0211%" height="15" fill="rgb(230,116,27)" fg:x="2296" fg:w="81"/><text x="0.8489%" y="111.50"></text></g><g><title>fastiron::simulation::mct::generate_coordinate_3dg (186 samples, 0.05%)</title><rect x="0.5804%" y="117" width="0.0485%" height="15" fill="rgb(228,99,48)" fg:x="2225" fg:w="186"/><text x="0.8304%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (216 samples, 0.06%)</title><rect x="0.5744%" y="245" width="0.0563%" height="15" fill="rgb(253,11,6)" fg:x="2202" fg:w="216"/><text x="0.8244%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (216 samples, 0.06%)</title><rect x="0.5744%" y="229" width="0.0563%" height="15" fill="rgb(247,143,39)" fg:x="2202" fg:w="216"/><text x="0.8244%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (216 samples, 0.06%)</title><rect x="0.5744%" y="213" width="0.0563%" height="15" fill="rgb(236,97,10)" fg:x="2202" fg:w="216"/><text x="0.8244%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (216 samples, 0.06%)</title><rect x="0.5744%" y="197" width="0.0563%" height="15" fill="rgb(233,208,19)" fg:x="2202" fg:w="216"/><text x="0.8244%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (216 samples, 0.06%)</title><rect x="0.5744%" y="181" width="0.0563%" height="15" fill="rgb(216,164,2)" fg:x="2202" fg:w="216"/><text x="0.8244%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (216 samples, 0.06%)</title><rect x="0.5744%" y="165" width="0.0563%" height="15" fill="rgb(220,129,5)" fg:x="2202" fg:w="216"/><text x="0.8244%" y="175.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (216 samples, 0.06%)</title><rect x="0.5744%" y="149" width="0.0563%" height="15" fill="rgb(242,17,10)" fg:x="2202" fg:w="216"/><text x="0.8244%" y="159.50"></text></g><g><title>fastiron::simulation::population_control::source_now::{{closure}}::{{closure}}::{{closure}} (215 samples, 0.06%)</title><rect x="0.5746%" y="133" width="0.0561%" height="15" fill="rgb(242,107,0)" fg:x="2203" fg:w="215"/><text x="0.8246%" y="143.50"></text></g><g><title>fastiron::simulation::population_control::source_now (219 samples, 0.06%)</title><rect x="0.5741%" y="453" width="0.0571%" height="15" fill="rgb(251,28,31)" fg:x="2201" fg:w="219"/><text x="0.8241%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (218 samples, 0.06%)</title><rect x="0.5744%" y="437" width="0.0569%" height="15" fill="rgb(233,223,10)" fg:x="2202" fg:w="218"/><text x="0.8244%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (218 samples, 0.06%)</title><rect x="0.5744%" y="421" width="0.0569%" height="15" fill="rgb(215,21,27)" fg:x="2202" fg:w="218"/><text x="0.8244%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (218 samples, 0.06%)</title><rect x="0.5744%" y="405" width="0.0569%" height="15" fill="rgb(232,23,21)" fg:x="2202" fg:w="218"/><text x="0.8244%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (218 samples, 0.06%)</title><rect x="0.5744%" y="389" width="0.0569%" height="15" fill="rgb(244,5,23)" fg:x="2202" fg:w="218"/><text x="0.8244%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (218 samples, 0.06%)</title><rect x="0.5744%" y="373" width="0.0569%" height="15" fill="rgb(226,81,46)" fg:x="2202" fg:w="218"/><text x="0.8244%" y="383.50"></text></g><g><title>fastiron::simulation::population_control::source_now::{{closure}} (218 samples, 0.06%)</title><rect x="0.5744%" y="357" width="0.0569%" height="15" fill="rgb(247,70,30)" fg:x="2202" fg:w="218"/><text x="0.8244%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (218 samples, 0.06%)</title><rect x="0.5744%" y="341" width="0.0569%" height="15" fill="rgb(212,68,19)" fg:x="2202" fg:w="218"/><text x="0.8244%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (218 samples, 0.06%)</title><rect x="0.5744%" y="325" width="0.0569%" height="15" fill="rgb(240,187,13)" fg:x="2202" fg:w="218"/><text x="0.8244%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (218 samples, 0.06%)</title><rect x="0.5744%" y="309" width="0.0569%" height="15" fill="rgb(223,113,26)" fg:x="2202" fg:w="218"/><text x="0.8244%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (218 samples, 0.06%)</title><rect x="0.5744%" y="293" width="0.0569%" height="15" fill="rgb(206,192,2)" fg:x="2202" fg:w="218"/><text x="0.8244%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (218 samples, 0.06%)</title><rect x="0.5744%" y="277" width="0.0569%" height="15" fill="rgb(241,108,4)" fg:x="2202" fg:w="218"/><text x="0.8244%" y="287.50"></text></g><g><title>fastiron::simulation::population_control::source_now::{{closure}}::{{closure}} (218 samples, 0.06%)</title><rect x="0.5744%" y="261" width="0.0569%" height="15" fill="rgb(247,173,49)" fg:x="2202" fg:w="218"/><text x="0.8244%" y="271.50"></text></g><g><title>fastiron::cycle_init (401 samples, 0.10%)</title><rect x="0.5269%" y="469" width="0.1046%" height="15" fill="rgb(224,114,35)" fg:x="2020" fg:w="401"/><text x="0.7769%" y="479.50"></text></g><g><title>fastiron::main (1,232 samples, 0.32%)</title><rect x="0.6341%" y="421" width="0.3213%" height="15" fill="rgb(245,159,27)" fg:x="2431" fg:w="1232"/><text x="0.8841%" y="431.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_energy_groups (327 samples, 0.09%)</title><rect x="0.9969%" y="405" width="0.0853%" height="15" fill="rgb(245,172,44)" fg:x="3822" fg:w="327"/><text x="1.2469%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (41 samples, 0.01%)</title><rect x="1.0715%" y="389" width="0.0107%" height="15" fill="rgb(236,23,11)" fg:x="4108" fg:w="41"/><text x="1.3215%" y="399.50"></text></g><g><title>fastiron::main (266 samples, 0.07%)</title><rect x="1.0822%" y="405" width="0.0694%" height="15" fill="rgb(205,117,38)" fg:x="4149" fg:w="266"/><text x="1.3322%" y="415.50"></text></g><g><title>fastiron::particles::mc_particle::MCParticle&lt;T&gt;::new (360 samples, 0.09%)</title><rect x="1.1516%" y="405" width="0.0939%" height="15" fill="rgb(237,72,25)" fg:x="4415" fg:w="360"/><text x="1.4016%" y="415.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt; as core::clone::Clone&gt;::clone (360 samples, 0.09%)</title><rect x="1.1516%" y="389" width="0.0939%" height="15" fill="rgb(244,70,9)" fg:x="4415" fg:w="360"/><text x="1.4016%" y="399.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (85 samples, 0.02%)</title><rect x="1.2789%" y="389" width="0.0222%" height="15" fill="rgb(217,125,39)" fg:x="4903" fg:w="85"/><text x="1.5289%" y="399.50"></text></g><g><title>fastiron::main (2,000 samples, 0.52%)</title><rect x="1.3010%" y="389" width="0.5217%" height="15" fill="rgb(235,36,10)" fg:x="4988" fg:w="2000"/><text x="1.5510%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (580 samples, 0.15%)</title><rect x="3.5163%" y="341" width="0.1513%" height="15" fill="rgb(251,123,47)" fg:x="13481" fg:w="580"/><text x="3.7663%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (583 samples, 0.15%)</title><rect x="3.5163%" y="373" width="0.1521%" height="15" fill="rgb(221,13,13)" fg:x="13481" fg:w="583"/><text x="3.7663%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (583 samples, 0.15%)</title><rect x="3.5163%" y="357" width="0.1521%" height="15" fill="rgb(238,131,9)" fg:x="13481" fg:w="583"/><text x="3.7663%" y="367.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (55 samples, 0.01%)</title><rect x="3.6683%" y="373" width="0.0143%" height="15" fill="rgb(211,50,8)" fg:x="14064" fg:w="55"/><text x="3.9183%" y="383.50"></text></g><g><title>&lt;f32 as core::ops::arith::SubAssign&gt;::sub_assign (10,630 samples, 2.77%)</title><rect x="3.6827%" y="373" width="2.7726%" height="15" fill="rgb(245,182,24)" fg:x="14119" fg:w="10630"/><text x="3.9327%" y="383.50">&lt;f..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (46 samples, 0.01%)</title><rect x="6.4553%" y="373" width="0.0120%" height="15" fill="rgb(242,14,37)" fg:x="24749" fg:w="46"/><text x="6.7053%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (107 samples, 0.03%)</title><rect x="6.4673%" y="373" width="0.0279%" height="15" fill="rgb(246,228,12)" fg:x="24795" fg:w="107"/><text x="6.7173%" y="383.50"></text></g><g><title>core::ptr::write (86 samples, 0.02%)</title><rect x="6.4728%" y="357" width="0.0224%" height="15" fill="rgb(213,55,15)" fg:x="24816" fg:w="86"/><text x="6.7228%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (4,489 samples, 1.17%)</title><rect x="6.4952%" y="373" width="1.1709%" height="15" fill="rgb(209,9,3)" fg:x="24902" fg:w="4489"/><text x="6.7452%" y="383.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (200 samples, 0.05%)</title><rect x="7.6661%" y="373" width="0.0522%" height="15" fill="rgb(230,59,30)" fg:x="29391" fg:w="200"/><text x="7.9161%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (200 samples, 0.05%)</title><rect x="7.6661%" y="357" width="0.0522%" height="15" fill="rgb(209,121,21)" fg:x="29391" fg:w="200"/><text x="7.9161%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (170 samples, 0.04%)</title><rect x="7.6739%" y="341" width="0.0443%" height="15" fill="rgb(220,109,13)" fg:x="29421" fg:w="170"/><text x="7.9239%" y="351.50"></text></g><g><title>_int_free (1,096 samples, 0.29%)</title><rect x="7.9050%" y="245" width="0.2859%" height="15" fill="rgb(232,18,1)" fg:x="30307" fg:w="1096"/><text x="8.1550%" y="255.50"></text></g><g><title>tcache_put (243 samples, 0.06%)</title><rect x="8.1275%" y="229" width="0.0634%" height="15" fill="rgb(215,41,42)" fg:x="31160" fg:w="243"/><text x="8.3775%" y="239.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,831 samples, 0.48%)</title><rect x="7.7183%" y="325" width="0.4776%" height="15" fill="rgb(224,123,36)" fg:x="29591" fg:w="1831"/><text x="7.9683%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (1,831 samples, 0.48%)</title><rect x="7.7183%" y="309" width="0.4776%" height="15" fill="rgb(240,125,3)" fg:x="29591" fg:w="1831"/><text x="7.9683%" y="319.50"></text></g><g><title>__rdl_dealloc (1,831 samples, 0.48%)</title><rect x="7.7183%" y="293" width="0.4776%" height="15" fill="rgb(205,98,50)" fg:x="29591" fg:w="1831"/><text x="7.9683%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1,831 samples, 0.48%)</title><rect x="7.7183%" y="277" width="0.4776%" height="15" fill="rgb(205,185,37)" fg:x="29591" fg:w="1831"/><text x="7.9683%" y="287.50"></text></g><g><title>__GI___libc_free (1,830 samples, 0.48%)</title><rect x="7.7186%" y="261" width="0.4773%" height="15" fill="rgb(238,207,15)" fg:x="29592" fg:w="1830"/><text x="7.9686%" y="271.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,900 samples, 0.50%)</title><rect x="7.7183%" y="341" width="0.4956%" height="15" fill="rgb(213,199,42)" fg:x="29591" fg:w="1900"/><text x="7.9683%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (69 samples, 0.02%)</title><rect x="8.1959%" y="325" width="0.0180%" height="15" fill="rgb(235,201,11)" fg:x="31422" fg:w="69"/><text x="8.4459%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (1,942 samples, 0.51%)</title><rect x="7.7183%" y="373" width="0.5065%" height="15" fill="rgb(207,46,11)" fg:x="29591" fg:w="1942"/><text x="7.9683%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (1,942 samples, 0.51%)</title><rect x="7.7183%" y="357" width="0.5065%" height="15" fill="rgb(241,35,35)" fg:x="29591" fg:w="1942"/><text x="7.9683%" y="367.50"></text></g><g><title>fastiron::main (42 samples, 0.01%)</title><rect x="8.2139%" y="341" width="0.0110%" height="15" fill="rgb(243,32,47)" fg:x="31491" fg:w="42"/><text x="8.4639%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (180 samples, 0.05%)</title><rect x="8.5710%" y="357" width="0.0469%" height="15" fill="rgb(247,202,23)" fg:x="32860" fg:w="180"/><text x="8.8210%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (180 samples, 0.05%)</title><rect x="8.5710%" y="341" width="0.0469%" height="15" fill="rgb(219,102,11)" fg:x="32860" fg:w="180"/><text x="8.8210%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (180 samples, 0.05%)</title><rect x="8.5710%" y="325" width="0.0469%" height="15" fill="rgb(243,110,44)" fg:x="32860" fg:w="180"/><text x="8.8210%" y="335.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_energy_groups (1,881 samples, 0.49%)</title><rect x="8.2248%" y="373" width="0.4906%" height="15" fill="rgb(222,74,54)" fg:x="31533" fg:w="1881"/><text x="8.4748%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (319 samples, 0.08%)</title><rect x="8.6322%" y="357" width="0.0832%" height="15" fill="rgb(216,99,12)" fg:x="33095" fg:w="319"/><text x="8.8822%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (781 samples, 0.20%)</title><rect x="8.7160%" y="357" width="0.2037%" height="15" fill="rgb(226,22,26)" fg:x="33416" fg:w="781"/><text x="8.9660%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (781 samples, 0.20%)</title><rect x="8.7160%" y="341" width="0.2037%" height="15" fill="rgb(217,163,10)" fg:x="33416" fg:w="781"/><text x="8.9660%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (781 samples, 0.20%)</title><rect x="8.7160%" y="325" width="0.2037%" height="15" fill="rgb(213,25,53)" fg:x="33416" fg:w="781"/><text x="8.9660%" y="335.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_number_reactions (1,303 samples, 0.34%)</title><rect x="8.7155%" y="373" width="0.3399%" height="15" fill="rgb(252,105,26)" fg:x="33414" fg:w="1303"/><text x="8.9655%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (520 samples, 0.14%)</title><rect x="8.9197%" y="357" width="0.1356%" height="15" fill="rgb(220,39,43)" fg:x="34197" fg:w="520"/><text x="9.1697%" y="367.50"></text></g><g><title>__GI___libc_malloc (121 samples, 0.03%)</title><rect x="9.1359%" y="229" width="0.0316%" height="15" fill="rgb(229,68,48)" fg:x="35026" fg:w="121"/><text x="9.3859%" y="239.50"></text></g><g><title>tcache_get (52 samples, 0.01%)</title><rect x="9.1539%" y="213" width="0.0136%" height="15" fill="rgb(252,8,32)" fg:x="35095" fg:w="52"/><text x="9.4039%" y="223.50"></text></g><g><title>alloc::raw_vec::finish_grow (162 samples, 0.04%)</title><rect x="9.1286%" y="245" width="0.0423%" height="15" fill="rgb(223,20,43)" fg:x="34998" fg:w="162"/><text x="9.3786%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (260 samples, 0.07%)</title><rect x="9.1145%" y="309" width="0.0678%" height="15" fill="rgb(229,81,49)" fg:x="34944" fg:w="260"/><text x="9.3645%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (258 samples, 0.07%)</title><rect x="9.1150%" y="293" width="0.0673%" height="15" fill="rgb(236,28,36)" fg:x="34946" fg:w="258"/><text x="9.3650%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (255 samples, 0.07%)</title><rect x="9.1158%" y="277" width="0.0665%" height="15" fill="rgb(249,185,26)" fg:x="34949" fg:w="255"/><text x="9.3658%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (255 samples, 0.07%)</title><rect x="9.1158%" y="261" width="0.0665%" height="15" fill="rgb(249,174,33)" fg:x="34949" fg:w="255"/><text x="9.3658%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (300 samples, 0.08%)</title><rect x="9.1137%" y="357" width="0.0782%" height="15" fill="rgb(233,201,37)" fg:x="34941" fg:w="300"/><text x="9.3637%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (300 samples, 0.08%)</title><rect x="9.1137%" y="341" width="0.0782%" height="15" fill="rgb(221,78,26)" fg:x="34941" fg:w="300"/><text x="9.3637%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (300 samples, 0.08%)</title><rect x="9.1137%" y="325" width="0.0782%" height="15" fill="rgb(250,127,30)" fg:x="34941" fg:w="300"/><text x="9.3637%" y="335.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (80 samples, 0.02%)</title><rect x="9.1962%" y="357" width="0.0209%" height="15" fill="rgb(230,49,44)" fg:x="35257" fg:w="80"/><text x="9.4462%" y="367.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (190 samples, 0.05%)</title><rect x="9.2170%" y="357" width="0.0496%" height="15" fill="rgb(229,67,23)" fg:x="35337" fg:w="190"/><text x="9.4670%" y="367.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (179 samples, 0.05%)</title><rect x="9.2666%" y="357" width="0.0467%" height="15" fill="rgb(249,83,47)" fg:x="35527" fg:w="179"/><text x="9.5166%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (72 samples, 0.02%)</title><rect x="9.3728%" y="309" width="0.0188%" height="15" fill="rgb(215,43,3)" fg:x="35934" fg:w="72"/><text x="9.6228%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (75 samples, 0.02%)</title><rect x="9.4437%" y="293" width="0.0196%" height="15" fill="rgb(238,154,13)" fg:x="36206" fg:w="75"/><text x="9.6937%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (75 samples, 0.02%)</title><rect x="9.4437%" y="277" width="0.0196%" height="15" fill="rgb(219,56,2)" fg:x="36206" fg:w="75"/><text x="9.6937%" y="287.50"></text></g><g><title>alloc::alloc::alloc (44 samples, 0.01%)</title><rect x="9.4518%" y="261" width="0.0115%" height="15" fill="rgb(233,0,4)" fg:x="36237" fg:w="44"/><text x="9.7018%" y="271.50"></text></g><g><title>__rdl_alloc (44 samples, 0.01%)</title><rect x="9.4518%" y="245" width="0.0115%" height="15" fill="rgb(235,30,7)" fg:x="36237" fg:w="44"/><text x="9.7018%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (44 samples, 0.01%)</title><rect x="9.4518%" y="229" width="0.0115%" height="15" fill="rgb(250,79,13)" fg:x="36237" fg:w="44"/><text x="9.7018%" y="239.50"></text></g><g><title>checked_request2size (87 samples, 0.02%)</title><rect x="9.7697%" y="277" width="0.0227%" height="15" fill="rgb(211,146,34)" fg:x="37456" fg:w="87"/><text x="10.0197%" y="287.50"></text></g><g><title>__GI___libc_malloc (1,898 samples, 0.50%)</title><rect x="9.4633%" y="293" width="0.4951%" height="15" fill="rgb(228,22,38)" fg:x="36281" fg:w="1898"/><text x="9.7133%" y="303.50"></text></g><g><title>tcache_get (636 samples, 0.17%)</title><rect x="9.7924%" y="277" width="0.1659%" height="15" fill="rgb(235,168,5)" fg:x="37543" fg:w="636"/><text x="10.0424%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,232 samples, 0.58%)</title><rect x="9.4022%" y="309" width="0.5822%" height="15" fill="rgb(221,155,16)" fg:x="36047" fg:w="2232"/><text x="9.6522%" y="319.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (100 samples, 0.03%)</title><rect x="9.9583%" y="293" width="0.0261%" height="15" fill="rgb(215,215,53)" fg:x="38179" fg:w="100"/><text x="10.2083%" y="303.50"></text></g><g><title>core::alloc::layout::Layout::array (51 samples, 0.01%)</title><rect x="9.9844%" y="309" width="0.0133%" height="15" fill="rgb(223,4,10)" fg:x="38279" fg:w="51"/><text x="10.2344%" y="319.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (51 samples, 0.01%)</title><rect x="9.9844%" y="293" width="0.0133%" height="15" fill="rgb(234,103,6)" fg:x="38279" fg:w="51"/><text x="10.2344%" y="303.50"></text></g><g><title>core::cmp::max (174 samples, 0.05%)</title><rect x="9.9977%" y="309" width="0.0454%" height="15" fill="rgb(227,97,0)" fg:x="38330" fg:w="174"/><text x="10.2477%" y="319.50"></text></g><g><title>core::cmp::Ord::max (174 samples, 0.05%)</title><rect x="9.9977%" y="293" width="0.0454%" height="15" fill="rgb(234,150,53)" fg:x="38330" fg:w="174"/><text x="10.2477%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (174 samples, 0.05%)</title><rect x="9.9977%" y="277" width="0.0454%" height="15" fill="rgb(228,201,54)" fg:x="38330" fg:w="174"/><text x="10.2477%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2,633 samples, 0.69%)</title><rect x="9.3566%" y="325" width="0.6868%" height="15" fill="rgb(222,22,37)" fg:x="35872" fg:w="2633"/><text x="9.6066%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2,693 samples, 0.70%)</title><rect x="9.3566%" y="341" width="0.7024%" height="15" fill="rgb(237,53,32)" fg:x="35872" fg:w="2693"/><text x="9.6066%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (60 samples, 0.02%)</title><rect x="10.0434%" y="325" width="0.0156%" height="15" fill="rgb(233,25,53)" fg:x="38505" fg:w="60"/><text x="10.2934%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2,844 samples, 0.74%)</title><rect x="9.3208%" y="357" width="0.7418%" height="15" fill="rgb(210,40,34)" fg:x="35735" fg:w="2844"/><text x="9.5708%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (70 samples, 0.02%)</title><rect x="10.0627%" y="357" width="0.0183%" height="15" fill="rgb(241,220,44)" fg:x="38579" fg:w="70"/><text x="10.3127%" y="367.50"></text></g><g><title>_int_malloc (136 samples, 0.04%)</title><rect x="10.1307%" y="197" width="0.0355%" height="15" fill="rgb(235,28,35)" fg:x="38840" fg:w="136"/><text x="10.3807%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (330 samples, 0.09%)</title><rect x="10.0809%" y="309" width="0.0861%" height="15" fill="rgb(210,56,17)" fg:x="38649" fg:w="330"/><text x="10.3309%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (322 samples, 0.08%)</title><rect x="10.0830%" y="293" width="0.0840%" height="15" fill="rgb(224,130,29)" fg:x="38657" fg:w="322"/><text x="10.3330%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (322 samples, 0.08%)</title><rect x="10.0830%" y="277" width="0.0840%" height="15" fill="rgb(235,212,8)" fg:x="38657" fg:w="322"/><text x="10.3330%" y="287.50"></text></g><g><title>alloc::alloc::alloc_zeroed (322 samples, 0.08%)</title><rect x="10.0830%" y="261" width="0.0840%" height="15" fill="rgb(223,33,50)" fg:x="38657" fg:w="322"/><text x="10.3330%" y="271.50"></text></g><g><title>__rdl_alloc_zeroed (322 samples, 0.08%)</title><rect x="10.0830%" y="245" width="0.0840%" height="15" fill="rgb(219,149,13)" fg:x="38657" fg:w="322"/><text x="10.3330%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (322 samples, 0.08%)</title><rect x="10.0830%" y="229" width="0.0840%" height="15" fill="rgb(250,156,29)" fg:x="38657" fg:w="322"/><text x="10.3330%" y="239.50"></text></g><g><title>__libc_calloc (316 samples, 0.08%)</title><rect x="10.0846%" y="213" width="0.0824%" height="15" fill="rgb(216,193,19)" fg:x="38663" fg:w="316"/><text x="10.3346%" y="223.50"></text></g><g><title>alloc::vec::from_elem (334 samples, 0.09%)</title><rect x="10.0809%" y="357" width="0.0871%" height="15" fill="rgb(216,135,14)" fg:x="38649" fg:w="334"/><text x="10.3309%" y="367.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (334 samples, 0.09%)</title><rect x="10.0809%" y="341" width="0.0871%" height="15" fill="rgb(241,47,5)" fg:x="38649" fg:w="334"/><text x="10.3309%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (334 samples, 0.09%)</title><rect x="10.0809%" y="325" width="0.0871%" height="15" fill="rgb(233,42,35)" fg:x="38649" fg:w="334"/><text x="10.3309%" y="335.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (40 samples, 0.01%)</title><rect x="10.1832%" y="293" width="0.0104%" height="15" fill="rgb(231,13,6)" fg:x="39041" fg:w="40"/><text x="10.4332%" y="303.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearDataReaction&lt;T&gt;::sample_collision::{{closure}} (218 samples, 0.06%)</title><rect x="10.1680%" y="309" width="0.0569%" height="15" fill="rgb(207,181,40)" fg:x="38983" fg:w="218"/><text x="10.4180%" y="319.50"></text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (113 samples, 0.03%)</title><rect x="10.1954%" y="293" width="0.0295%" height="15" fill="rgb(254,173,49)" fg:x="39088" fg:w="113"/><text x="10.4454%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (223 samples, 0.06%)</title><rect x="10.1680%" y="357" width="0.0582%" height="15" fill="rgb(221,1,38)" fg:x="38983" fg:w="223"/><text x="10.4180%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (223 samples, 0.06%)</title><rect x="10.1680%" y="341" width="0.0582%" height="15" fill="rgb(206,124,46)" fg:x="38983" fg:w="223"/><text x="10.4180%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (223 samples, 0.06%)</title><rect x="10.1680%" y="325" width="0.0582%" height="15" fill="rgb(249,21,11)" fg:x="38983" fg:w="223"/><text x="10.4180%" y="335.50"></text></g><g><title>_int_free (76 samples, 0.02%)</title><rect x="10.2348%" y="229" width="0.0198%" height="15" fill="rgb(222,201,40)" fg:x="39239" fg:w="76"/><text x="10.4848%" y="239.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f32&gt;&gt; (112 samples, 0.03%)</title><rect x="10.2262%" y="357" width="0.0292%" height="15" fill="rgb(235,61,29)" fg:x="39206" fg:w="112"/><text x="10.4762%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f32&gt;&gt; (112 samples, 0.03%)</title><rect x="10.2262%" y="341" width="0.0292%" height="15" fill="rgb(219,207,3)" fg:x="39206" fg:w="112"/><text x="10.4762%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (112 samples, 0.03%)</title><rect x="10.2262%" y="325" width="0.0292%" height="15" fill="rgb(222,56,46)" fg:x="39206" fg:w="112"/><text x="10.4762%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (112 samples, 0.03%)</title><rect x="10.2262%" y="309" width="0.0292%" height="15" fill="rgb(239,76,54)" fg:x="39206" fg:w="112"/><text x="10.4762%" y="319.50"></text></g><g><title>alloc::alloc::dealloc (112 samples, 0.03%)</title><rect x="10.2262%" y="293" width="0.0292%" height="15" fill="rgb(231,124,27)" fg:x="39206" fg:w="112"/><text x="10.4762%" y="303.50"></text></g><g><title>__rdl_dealloc (112 samples, 0.03%)</title><rect x="10.2262%" y="277" width="0.0292%" height="15" fill="rgb(249,195,6)" fg:x="39206" fg:w="112"/><text x="10.4762%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (107 samples, 0.03%)</title><rect x="10.2275%" y="261" width="0.0279%" height="15" fill="rgb(237,174,47)" fg:x="39211" fg:w="107"/><text x="10.4775%" y="271.50"></text></g><g><title>__GI___libc_free (101 samples, 0.03%)</title><rect x="10.2291%" y="245" width="0.0263%" height="15" fill="rgb(206,201,31)" fg:x="39217" fg:w="101"/><text x="10.4791%" y="255.50"></text></g><g><title>fastiron::main (118 samples, 0.03%)</title><rect x="10.2554%" y="357" width="0.0308%" height="15" fill="rgb(231,57,52)" fg:x="39318" fg:w="118"/><text x="10.5054%" y="367.50"></text></g><g><title>&lt;f32 as num_traits::cast::FromPrimitive&gt;::from_f64 (156 samples, 0.04%)</title><rect x="10.3556%" y="341" width="0.0407%" height="15" fill="rgb(248,177,22)" fg:x="39702" fg:w="156"/><text x="10.6056%" y="351.50"></text></g><g><title>&lt;f64 as num_traits::cast::ToPrimitive&gt;::to_f32 (156 samples, 0.04%)</title><rect x="10.3556%" y="325" width="0.0407%" height="15" fill="rgb(215,211,37)" fg:x="39702" fg:w="156"/><text x="10.6056%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (42 samples, 0.01%)</title><rect x="10.3963%" y="341" width="0.0110%" height="15" fill="rgb(241,128,51)" fg:x="39858" fg:w="42"/><text x="10.6463%" y="351.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearDataReaction&lt;T&gt;::sample_collision (5,201 samples, 1.36%)</title><rect x="9.0553%" y="373" width="1.3566%" height="15" fill="rgb(227,165,31)" fg:x="34717" fg:w="5201"/><text x="9.3053%" y="383.50"></text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (482 samples, 0.13%)</title><rect x="10.2862%" y="357" width="0.1257%" height="15" fill="rgb(228,167,24)" fg:x="39436" fg:w="482"/><text x="10.5362%" y="367.50"></text></g><g><title>fastiron::main (5,556 samples, 1.45%)</title><rect x="10.4119%" y="373" width="1.4492%" height="15" fill="rgb(228,143,12)" fg:x="39918" fg:w="5556"/><text x="10.6619%" y="383.50"></text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (44 samples, 0.01%)</title><rect x="12.0799%" y="357" width="0.0115%" height="15" fill="rgb(249,149,8)" fg:x="46313" fg:w="44"/><text x="12.3299%" y="367.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (90 samples, 0.02%)</title><rect x="12.0914%" y="357" width="0.0235%" height="15" fill="rgb(243,35,44)" fg:x="46357" fg:w="90"/><text x="12.3414%" y="367.50"></text></g><g><title>&lt;f32 as num_traits::float::Float&gt;::ln (438 samples, 0.11%)</title><rect x="12.1154%" y="357" width="0.1142%" height="15" fill="rgb(246,89,9)" fg:x="46449" fg:w="438"/><text x="12.3654%" y="367.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::ln (434 samples, 0.11%)</title><rect x="12.1164%" y="341" width="0.1132%" height="15" fill="rgb(233,213,13)" fg:x="46453" fg:w="434"/><text x="12.3664%" y="351.50"></text></g><g><title>__logf_fma (434 samples, 0.11%)</title><rect x="12.1164%" y="325" width="0.1132%" height="15" fill="rgb(233,141,41)" fg:x="46453" fg:w="434"/><text x="12.3664%" y="335.50"></text></g><g><title>asuint (41 samples, 0.01%)</title><rect x="12.2190%" y="309" width="0.0107%" height="15" fill="rgb(239,167,4)" fg:x="46846" fg:w="41"/><text x="12.4690%" y="319.50"></text></g><g><title>abstop12 (64 samples, 0.02%)</title><rect x="12.3455%" y="309" width="0.0167%" height="15" fill="rgb(209,217,16)" fg:x="47331" fg:w="64"/><text x="12.5955%" y="319.50"></text></g><g><title>reduce_fast (561 samples, 0.15%)</title><rect x="12.3622%" y="309" width="0.1463%" height="15" fill="rgb(219,88,35)" fg:x="47395" fg:w="561"/><text x="12.6122%" y="319.50"></text></g><g><title>&lt;f32 as num_traits::float::Float&gt;::sin (2,262 samples, 0.59%)</title><rect x="12.2296%" y="357" width="0.5900%" height="15" fill="rgb(220,193,23)" fg:x="46887" fg:w="2262"/><text x="12.4796%" y="367.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sin (2,261 samples, 0.59%)</title><rect x="12.2299%" y="341" width="0.5897%" height="15" fill="rgb(230,90,52)" fg:x="46888" fg:w="2261"/><text x="12.4799%" y="351.50"></text></g><g><title>__sincosf_fma (2,256 samples, 0.59%)</title><rect x="12.2312%" y="325" width="0.5884%" height="15" fill="rgb(252,106,19)" fg:x="46893" fg:w="2256"/><text x="12.4812%" y="335.50"></text></g><g><title>sincosf_poly (1,193 samples, 0.31%)</title><rect x="12.5085%" y="309" width="0.3112%" height="15" fill="rgb(206,74,20)" fg:x="47956" fg:w="1193"/><text x="12.7585%" y="319.50"></text></g><g><title>v2df_to_sf (310 samples, 0.08%)</title><rect x="12.7388%" y="293" width="0.0809%" height="15" fill="rgb(230,138,44)" fg:x="48839" fg:w="310"/><text x="12.9888%" y="303.50"></text></g><g><title>&lt;f32 as num_traits::float::Float&gt;::sqrt (351 samples, 0.09%)</title><rect x="12.8197%" y="357" width="0.0916%" height="15" fill="rgb(235,182,43)" fg:x="49149" fg:w="351"/><text x="13.0697%" y="367.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (324 samples, 0.08%)</title><rect x="12.8267%" y="341" width="0.0845%" height="15" fill="rgb(242,16,51)" fg:x="49176" fg:w="324"/><text x="13.0767%" y="351.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (164 samples, 0.04%)</title><rect x="12.9112%" y="357" width="0.0428%" height="15" fill="rgb(248,9,4)" fg:x="49500" fg:w="164"/><text x="13.1612%" y="367.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (117 samples, 0.03%)</title><rect x="12.9235%" y="341" width="0.0305%" height="15" fill="rgb(210,31,22)" fg:x="49547" fg:w="117"/><text x="13.1735%" y="351.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (142 samples, 0.04%)</title><rect x="13.0106%" y="341" width="0.0370%" height="15" fill="rgb(239,54,39)" fg:x="49881" fg:w="142"/><text x="13.2606%" y="351.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (427 samples, 0.11%)</title><rect x="13.0476%" y="341" width="0.1114%" height="15" fill="rgb(230,99,41)" fg:x="50023" fg:w="427"/><text x="13.2976%" y="351.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (271 samples, 0.07%)</title><rect x="13.1590%" y="341" width="0.0707%" height="15" fill="rgb(253,106,12)" fg:x="50450" fg:w="271"/><text x="13.4090%" y="351.50"></text></g><g><title>&lt;f32 as num_traits::float::Float&gt;::sqrt (159 samples, 0.04%)</title><rect x="13.2297%" y="341" width="0.0415%" height="15" fill="rgb(213,46,41)" fg:x="50721" fg:w="159"/><text x="13.4797%" y="351.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::sqrt (159 samples, 0.04%)</title><rect x="13.2297%" y="325" width="0.0415%" height="15" fill="rgb(215,133,35)" fg:x="50721" fg:w="159"/><text x="13.4797%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (47 samples, 0.01%)</title><rect x="13.2712%" y="341" width="0.0123%" height="15" fill="rgb(213,28,5)" fg:x="50880" fg:w="47"/><text x="13.5212%" y="351.50"></text></g><g><title>fastiron::data::direction_cosine::DirectionCosine&lt;T&gt;::rotate_3d_vector (1,304 samples, 0.34%)</title><rect x="12.9540%" y="357" width="0.3401%" height="15" fill="rgb(215,77,49)" fg:x="49664" fg:w="1304"/><text x="13.2040%" y="367.50"></text></g><g><title>fastiron::main (41 samples, 0.01%)</title><rect x="13.2834%" y="341" width="0.0107%" height="15" fill="rgb(248,100,22)" fg:x="50927" fg:w="41"/><text x="13.5334%" y="351.50"></text></g><g><title>fastiron::main (70 samples, 0.02%)</title><rect x="13.2941%" y="357" width="0.0183%" height="15" fill="rgb(208,67,9)" fg:x="50968" fg:w="70"/><text x="13.5441%" y="367.50"></text></g><g><title>&lt;f32 as num_traits::cast::FromPrimitive&gt;::from_f64 (103 samples, 0.03%)</title><rect x="13.3499%" y="341" width="0.0269%" height="15" fill="rgb(219,133,21)" fg:x="51182" fg:w="103"/><text x="13.5999%" y="351.50"></text></g><g><title>&lt;f64 as num_traits::cast::ToPrimitive&gt;::to_f32 (103 samples, 0.03%)</title><rect x="13.3499%" y="325" width="0.0269%" height="15" fill="rgb(246,46,29)" fg:x="51182" fg:w="103"/><text x="13.5999%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_add (46 samples, 0.01%)</title><rect x="13.3768%" y="341" width="0.0120%" height="15" fill="rgb(246,185,52)" fg:x="51285" fg:w="46"/><text x="13.6268%" y="351.50"></text></g><g><title>fastiron::simulation::collision_event::update_trajectory (5,900 samples, 1.54%)</title><rect x="11.8611%" y="373" width="1.5389%" height="15" fill="rgb(252,136,11)" fg:x="45474" fg:w="5900"/><text x="12.1111%" y="383.50"></text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (336 samples, 0.09%)</title><rect x="13.3124%" y="357" width="0.0876%" height="15" fill="rgb(219,138,53)" fg:x="51038" fg:w="336"/><text x="13.5624%" y="367.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_mul (43 samples, 0.01%)</title><rect x="13.3888%" y="341" width="0.0112%" height="15" fill="rgb(211,51,23)" fg:x="51331" fg:w="43"/><text x="13.6388%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,865 samples, 0.49%)</title><rect x="17.3613%" y="357" width="0.4865%" height="15" fill="rgb(247,221,28)" fg:x="66561" fg:w="1865"/><text x="17.6113%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,865 samples, 0.49%)</title><rect x="17.3613%" y="341" width="0.4865%" height="15" fill="rgb(251,222,45)" fg:x="66561" fg:w="1865"/><text x="17.6113%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,865 samples, 0.49%)</title><rect x="17.3613%" y="325" width="0.4865%" height="15" fill="rgb(217,162,53)" fg:x="66561" fg:w="1865"/><text x="17.6113%" y="335.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (16,275 samples, 4.25%)</title><rect x="17.8477%" y="357" width="4.2450%" height="15" fill="rgb(229,93,14)" fg:x="68426" fg:w="16275"/><text x="18.0977%" y="367.50">&lt;f32 ..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f32&gt;::eq (2,168 samples, 0.57%)</title><rect x="22.0928%" y="357" width="0.5655%" height="15" fill="rgb(209,67,49)" fg:x="84701" fg:w="2168"/><text x="22.3428%" y="367.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_reaction_cross_section (12,679 samples, 3.31%)</title><rect x="22.6582%" y="357" width="3.3071%" height="15" fill="rgb(213,87,29)" fg:x="86869" fg:w="12679"/><text x="22.9082%" y="367.50">fas..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6,546 samples, 1.71%)</title><rect x="24.2579%" y="341" width="1.7074%" height="15" fill="rgb(205,151,52)" fg:x="93002" fg:w="6546"/><text x="24.5079%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6,546 samples, 1.71%)</title><rect x="24.2579%" y="325" width="1.7074%" height="15" fill="rgb(253,215,39)" fg:x="93002" fg:w="6546"/><text x="24.5079%" y="335.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6,546 samples, 1.71%)</title><rect x="24.2579%" y="309" width="1.7074%" height="15" fill="rgb(221,220,41)" fg:x="93002" fg:w="6546"/><text x="24.5079%" y="319.50"></text></g><g><title>fastiron::simulation::macro_cross_section::macroscopic_cross_section (51,303 samples, 13.38%)</title><rect x="13.4000%" y="373" width="13.3815%" height="15" fill="rgb(218,133,21)" fg:x="51374" fg:w="51303"/><text x="13.6500%" y="383.50">fastiron::simulation..</text></g><g><title>fastiron::main (3,129 samples, 0.82%)</title><rect x="25.9653%" y="357" width="0.8161%" height="15" fill="rgb(221,193,43)" fg:x="99548" fg:w="3129"/><text x="26.2153%" y="367.50"></text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (140 samples, 0.04%)</title><rect x="26.7815%" y="373" width="0.0365%" height="15" fill="rgb(240,128,52)" fg:x="102677" fg:w="140"/><text x="27.0315%" y="383.50"></text></g><g><title>&lt;f32 as num_traits::cast::FromPrimitive&gt;::from_f64 (63 samples, 0.02%)</title><rect x="26.8016%" y="357" width="0.0164%" height="15" fill="rgb(253,114,12)" fg:x="102754" fg:w="63"/><text x="27.0516%" y="367.50"></text></g><g><title>&lt;f64 as num_traits::cast::ToPrimitive&gt;::to_f32 (63 samples, 0.02%)</title><rect x="26.8016%" y="341" width="0.0164%" height="15" fill="rgb(215,223,47)" fg:x="102754" fg:w="63"/><text x="27.0516%" y="351.50"></text></g><g><title>fastiron::simulation::collision_event::collision_event (95,859 samples, 25.00%)</title><rect x="1.8227%" y="389" width="25.0031%" height="15" fill="rgb(248,225,23)" fg:x="6988" fg:w="95859"/><text x="2.0727%" y="399.50">fastiron::simulation::collision_event::c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (86 samples, 0.02%)</title><rect x="26.8861%" y="373" width="0.0224%" height="15" fill="rgb(250,108,0)" fg:x="103078" fg:w="86"/><text x="27.1361%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (86 samples, 0.02%)</title><rect x="26.8861%" y="357" width="0.0224%" height="15" fill="rgb(228,208,7)" fg:x="103078" fg:w="86"/><text x="27.1361%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (86 samples, 0.02%)</title><rect x="26.8861%" y="341" width="0.0224%" height="15" fill="rgb(244,45,10)" fg:x="103078" fg:w="86"/><text x="27.1361%" y="351.50"></text></g><g><title>fastiron::simulation::mc_facet_crossing_event::facet_crossing_event (656 samples, 0.17%)</title><rect x="26.8258%" y="389" width="0.1711%" height="15" fill="rgb(207,125,25)" fg:x="102847" fg:w="656"/><text x="27.0758%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (339 samples, 0.09%)</title><rect x="26.9085%" y="373" width="0.0884%" height="15" fill="rgb(210,195,18)" fg:x="103164" fg:w="339"/><text x="27.1585%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (107 samples, 0.03%)</title><rect x="28.1858%" y="373" width="0.0279%" height="15" fill="rgb(249,80,12)" fg:x="108061" fg:w="107"/><text x="28.4358%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (107 samples, 0.03%)</title><rect x="28.1858%" y="357" width="0.0279%" height="15" fill="rgb(221,65,9)" fg:x="108061" fg:w="107"/><text x="28.4358%" y="367.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (107 samples, 0.03%)</title><rect x="28.1858%" y="341" width="0.0279%" height="15" fill="rgb(235,49,36)" fg:x="108061" fg:w="107"/><text x="28.4358%" y="351.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (12,850 samples, 3.35%)</title><rect x="28.2137%" y="373" width="3.3517%" height="15" fill="rgb(225,32,20)" fg:x="108168" fg:w="12850"/><text x="28.4637%" y="383.50">&lt;f3..</text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (1,009 samples, 0.26%)</title><rect x="31.5654%" y="373" width="0.2632%" height="15" fill="rgb(215,141,46)" fg:x="121018" fg:w="1009"/><text x="31.8154%" y="383.50"></text></g><g><title>&lt;f32 as core::ops::arith::SubAssign&gt;::sub_assign (709 samples, 0.18%)</title><rect x="31.8343%" y="373" width="0.1849%" height="15" fill="rgb(250,160,47)" fg:x="122049" fg:w="709"/><text x="32.0843%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f32&gt;::eq (263 samples, 0.07%)</title><rect x="32.0195%" y="373" width="0.0686%" height="15" fill="rgb(216,222,40)" fg:x="122759" fg:w="263"/><text x="32.2695%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (510 samples, 0.13%)</title><rect x="32.0881%" y="373" width="0.1330%" height="15" fill="rgb(234,217,39)" fg:x="123022" fg:w="510"/><text x="32.3381%" y="383.50"></text></g><g><title>fastiron::main (194 samples, 0.05%)</title><rect x="32.2211%" y="373" width="0.0506%" height="15" fill="rgb(207,178,40)" fg:x="123532" fg:w="194"/><text x="32.4711%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (216 samples, 0.06%)</title><rect x="35.3444%" y="357" width="0.0563%" height="15" fill="rgb(221,136,13)" fg:x="135506" fg:w="216"/><text x="35.5944%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (216 samples, 0.06%)</title><rect x="35.3444%" y="341" width="0.0563%" height="15" fill="rgb(249,199,10)" fg:x="135506" fg:w="216"/><text x="35.5944%" y="351.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (216 samples, 0.06%)</title><rect x="35.3444%" y="325" width="0.0563%" height="15" fill="rgb(249,222,13)" fg:x="135506" fg:w="216"/><text x="35.5944%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (47 samples, 0.01%)</title><rect x="35.4007%" y="357" width="0.0123%" height="15" fill="rgb(244,185,38)" fg:x="135722" fg:w="47"/><text x="35.6507%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::gt (235 samples, 0.06%)</title><rect x="35.4129%" y="357" width="0.0613%" height="15" fill="rgb(236,202,9)" fg:x="135769" fg:w="235"/><text x="35.6629%" y="367.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (688 samples, 0.18%)</title><rect x="35.4761%" y="293" width="0.1795%" height="15" fill="rgb(250,229,37)" fg:x="136011" fg:w="688"/><text x="35.7261%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (659 samples, 0.17%)</title><rect x="35.7604%" y="277" width="0.1719%" height="15" fill="rgb(206,174,23)" fg:x="137101" fg:w="659"/><text x="36.0104%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (368 samples, 0.10%)</title><rect x="35.9377%" y="261" width="0.0960%" height="15" fill="rgb(211,33,43)" fg:x="137781" fg:w="368"/><text x="36.1877%" y="271.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (368 samples, 0.10%)</title><rect x="35.9377%" y="245" width="0.0960%" height="15" fill="rgb(245,58,50)" fg:x="137781" fg:w="368"/><text x="36.1877%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (368 samples, 0.10%)</title><rect x="35.9377%" y="229" width="0.0960%" height="15" fill="rgb(244,68,36)" fg:x="137781" fg:w="368"/><text x="36.1877%" y="239.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (581 samples, 0.15%)</title><rect x="36.0416%" y="229" width="0.1515%" height="15" fill="rgb(232,229,15)" fg:x="138179" fg:w="581"/><text x="36.2916%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (581 samples, 0.15%)</title><rect x="36.0416%" y="213" width="0.1515%" height="15" fill="rgb(254,30,23)" fg:x="138179" fg:w="581"/><text x="36.2916%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (220 samples, 0.06%)</title><rect x="36.1357%" y="197" width="0.0574%" height="15" fill="rgb(235,160,14)" fg:x="138540" fg:w="220"/><text x="36.3857%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1,276 samples, 0.33%)</title><rect x="36.2938%" y="197" width="0.3328%" height="15" fill="rgb(212,155,44)" fg:x="139146" fg:w="1276"/><text x="36.5438%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,276 samples, 0.33%)</title><rect x="36.2938%" y="181" width="0.3328%" height="15" fill="rgb(226,2,50)" fg:x="139146" fg:w="1276"/><text x="36.5438%" y="191.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,276 samples, 0.33%)</title><rect x="36.2938%" y="165" width="0.3328%" height="15" fill="rgb(234,177,6)" fg:x="139146" fg:w="1276"/><text x="36.5438%" y="175.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_total_cross_section::{{closure}} (5,144 samples, 1.34%)</title><rect x="36.1931%" y="213" width="1.3417%" height="15" fill="rgb(217,24,9)" fg:x="138760" fg:w="5144"/><text x="36.4431%" y="223.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (3,482 samples, 0.91%)</title><rect x="36.6266%" y="197" width="0.9082%" height="15" fill="rgb(220,13,46)" fg:x="140422" fg:w="3482"/><text x="36.8766%" y="207.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_total_cross_section (6,325 samples, 1.65%)</title><rect x="35.9367%" y="277" width="1.6498%" height="15" fill="rgb(239,221,27)" fg:x="137777" fg:w="6325"/><text x="36.1867%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (5,923 samples, 1.54%)</title><rect x="36.0416%" y="261" width="1.5449%" height="15" fill="rgb(222,198,25)" fg:x="138179" fg:w="5923"/><text x="36.2916%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (5,923 samples, 1.54%)</title><rect x="36.0416%" y="245" width="1.5449%" height="15" fill="rgb(211,99,13)" fg:x="138179" fg:w="5923"/><text x="36.2916%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (5,342 samples, 1.39%)</title><rect x="36.1931%" y="229" width="1.3934%" height="15" fill="rgb(232,111,31)" fg:x="138760" fg:w="5342"/><text x="36.4431%" y="239.50"></text></g><g><title>fastiron::main (198 samples, 0.05%)</title><rect x="37.5348%" y="213" width="0.0516%" height="15" fill="rgb(245,82,37)" fg:x="143904" fg:w="198"/><text x="37.7848%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,290 samples, 2.16%)</title><rect x="35.4742%" y="341" width="2.1623%" height="15" fill="rgb(227,149,46)" fg:x="136004" fg:w="8290"/><text x="35.7242%" y="351.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (8,283 samples, 2.16%)</title><rect x="35.4761%" y="325" width="2.1605%" height="15" fill="rgb(218,36,50)" fg:x="136011" fg:w="8283"/><text x="35.7261%" y="335.50">c..</text></g><g><title>fastiron::simulation::macro_cross_section::weighted_macroscopic_cross_section::{{closure}} (8,283 samples, 2.16%)</title><rect x="35.4761%" y="309" width="2.1605%" height="15" fill="rgb(226,80,48)" fg:x="136011" fg:w="8283"/><text x="35.7261%" y="319.50">f..</text></g><g><title>fastiron::simulation::macro_cross_section::macroscopic_total_cross_section (7,586 samples, 1.98%)</title><rect x="35.6579%" y="293" width="1.9787%" height="15" fill="rgb(238,224,15)" fg:x="136708" fg:w="7586"/><text x="35.9079%" y="303.50">f..</text></g><g><title>fastiron::main (192 samples, 0.05%)</title><rect x="37.5865%" y="277" width="0.0501%" height="15" fill="rgb(241,136,10)" fg:x="144102" fg:w="192"/><text x="37.8365%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8,315 samples, 2.17%)</title><rect x="35.4742%" y="357" width="2.1688%" height="15" fill="rgb(208,32,45)" fg:x="136004" fg:w="8315"/><text x="35.7242%" y="367.50">c..</text></g><g><title>fastiron::simulation::macro_cross_section::weighted_macroscopic_cross_section (20,599 samples, 5.37%)</title><rect x="32.2717%" y="373" width="5.3729%" height="15" fill="rgb(207,135,9)" fg:x="123726" fg:w="20599"/><text x="32.5217%" y="383.50">fastiro..</text></g><g><title>fastiron::simulation::mc_segment_outcome::find_min (265 samples, 0.07%)</title><rect x="37.6446%" y="373" width="0.0691%" height="15" fill="rgb(206,86,44)" fg:x="144325" fg:w="265"/><text x="37.8946%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (265 samples, 0.07%)</title><rect x="37.6446%" y="357" width="0.0691%" height="15" fill="rgb(245,177,15)" fg:x="144325" fg:w="265"/><text x="37.8946%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (265 samples, 0.07%)</title><rect x="37.6446%" y="341" width="0.0691%" height="15" fill="rgb(206,64,50)" fg:x="144325" fg:w="265"/><text x="37.8946%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (265 samples, 0.07%)</title><rect x="37.6446%" y="325" width="0.0691%" height="15" fill="rgb(234,36,40)" fg:x="144325" fg:w="265"/><text x="37.8946%" y="335.50"></text></g><g><title>fastiron::simulation::mc_segment_outcome::find_min::{{closure}} (265 samples, 0.07%)</title><rect x="37.6446%" y="309" width="0.0691%" height="15" fill="rgb(213,64,8)" fg:x="144325" fg:w="265"/><text x="37.8946%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (133 samples, 0.03%)</title><rect x="37.6791%" y="293" width="0.0347%" height="15" fill="rgb(210,75,36)" fg:x="144457" fg:w="133"/><text x="37.9291%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::gt (74 samples, 0.02%)</title><rect x="37.7336%" y="357" width="0.0193%" height="15" fill="rgb(229,88,21)" fg:x="144666" fg:w="74"/><text x="37.9836%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (89 samples, 0.02%)</title><rect x="37.7529%" y="357" width="0.0232%" height="15" fill="rgb(252,204,47)" fg:x="144740" fg:w="89"/><text x="38.0029%" y="367.50"></text></g><g><title>fastiron::main (3,204 samples, 0.84%)</title><rect x="37.7761%" y="357" width="0.8357%" height="15" fill="rgb(208,77,27)" fg:x="144829" fg:w="3204"/><text x="38.0261%" y="367.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::clone::Clone&gt;::clone (134 samples, 0.03%)</title><rect x="38.6314%" y="325" width="0.0350%" height="15" fill="rgb(221,76,26)" fg:x="148108" fg:w="134"/><text x="38.8814%" y="335.50"></text></g><g><title>&lt;fastiron::data::direction_cosine::DirectionCosine&lt;T&gt; as core::clone::Clone&gt;::clone (545 samples, 0.14%)</title><rect x="38.6314%" y="341" width="0.1422%" height="15" fill="rgb(225,139,18)" fg:x="148108" fg:w="545"/><text x="38.8814%" y="351.50"></text></g><g><title>fastiron::main (411 samples, 0.11%)</title><rect x="38.6663%" y="325" width="0.1072%" height="15" fill="rgb(230,137,11)" fg:x="148242" fg:w="411"/><text x="38.9163%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4,132 samples, 1.08%)</title><rect x="38.7735%" y="309" width="1.0778%" height="15" fill="rgb(212,28,1)" fg:x="148653" fg:w="4132"/><text x="39.0235%" y="319.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4,132 samples, 1.08%)</title><rect x="38.7735%" y="293" width="1.0778%" height="15" fill="rgb(248,164,17)" fg:x="148653" fg:w="4132"/><text x="39.0235%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (4,056 samples, 1.06%)</title><rect x="38.7933%" y="277" width="1.0579%" height="15" fill="rgb(222,171,42)" fg:x="148729" fg:w="4056"/><text x="39.0433%" y="287.50"></text></g><g><title>fastiron::main (12,226 samples, 3.19%)</title><rect x="39.8513%" y="293" width="3.1889%" height="15" fill="rgb(243,84,45)" fg:x="152785" fg:w="12226"/><text x="40.1013%" y="303.50">fas..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2,666 samples, 0.70%)</title><rect x="49.2274%" y="277" width="0.6954%" height="15" fill="rgb(252,49,23)" fg:x="188732" fg:w="2666"/><text x="49.4774%" y="287.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2,666 samples, 0.70%)</title><rect x="49.2274%" y="261" width="0.6954%" height="15" fill="rgb(215,19,7)" fg:x="188732" fg:w="2666"/><text x="49.4774%" y="271.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2,666 samples, 0.70%)</title><rect x="49.2274%" y="245" width="0.6954%" height="15" fill="rgb(238,81,41)" fg:x="188732" fg:w="2666"/><text x="49.4774%" y="255.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (6,180 samples, 1.61%)</title><rect x="49.9228%" y="277" width="1.6119%" height="15" fill="rgb(210,199,37)" fg:x="191398" fg:w="6180"/><text x="50.1728%" y="287.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (5,384 samples, 1.40%)</title><rect x="51.5347%" y="277" width="1.4043%" height="15" fill="rgb(244,192,49)" fg:x="197578" fg:w="5384"/><text x="51.7847%" y="287.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::le (884 samples, 0.23%)</title><rect x="52.9391%" y="277" width="0.2306%" height="15" fill="rgb(226,211,11)" fg:x="202962" fg:w="884"/><text x="53.1891%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (36,068 samples, 9.41%)</title><rect x="53.1696%" y="277" width="9.4077%" height="15" fill="rgb(236,162,54)" fg:x="203846" fg:w="36068"/><text x="53.4196%" y="287.50">core::option:..</text></g><g><title>fastiron::main (10,002 samples, 2.61%)</title><rect x="62.5773%" y="277" width="2.6088%" height="15" fill="rgb(220,229,9)" fg:x="239914" fg:w="10002"/><text x="62.8273%" y="287.50">fa..</text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (11,475 samples, 2.99%)</title><rect x="79.7192%" y="261" width="2.9931%" height="15" fill="rgb(250,87,22)" fg:x="305634" fg:w="11475"/><text x="79.9692%" y="271.50">&lt;f3..</text></g><g><title>&lt;f32 as core::ops::arith::Div&gt;::div (1,910 samples, 0.50%)</title><rect x="82.7123%" y="261" width="0.4982%" height="15" fill="rgb(239,43,17)" fg:x="317109" fg:w="1910"/><text x="82.9623%" y="271.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (8,742 samples, 2.28%)</title><rect x="83.2105%" y="261" width="2.2802%" height="15" fill="rgb(231,177,25)" fg:x="319019" fg:w="8742"/><text x="83.4605%" y="271.50">&lt;..</text></g><g><title>&lt;f32 as core::ops::arith::Neg&gt;::neg (1,815 samples, 0.47%)</title><rect x="85.4907%" y="261" width="0.4734%" height="15" fill="rgb(219,179,1)" fg:x="327761" fg:w="1815"/><text x="85.7407%" y="271.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (12,003 samples, 3.13%)</title><rect x="85.9641%" y="261" width="3.1308%" height="15" fill="rgb(238,219,53)" fg:x="329576" fg:w="12003"/><text x="86.2141%" y="271.50">&lt;f3..</text></g><g><title>&lt;f32 as num_traits::float::Float&gt;::abs (1,754 samples, 0.46%)</title><rect x="89.0949%" y="261" width="0.4575%" height="15" fill="rgb(232,167,36)" fg:x="341579" fg:w="1754"/><text x="89.3449%" y="271.50"></text></g><g><title>std::f32::&lt;impl f32&gt;::abs (1,754 samples, 0.46%)</title><rect x="89.0949%" y="245" width="0.4575%" height="15" fill="rgb(244,19,51)" fg:x="341579" fg:w="1754"/><text x="89.3449%" y="255.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Add&gt;::add (2,186 samples, 0.57%)</title><rect x="89.5524%" y="261" width="0.5702%" height="15" fill="rgb(224,6,22)" fg:x="343333" fg:w="2186"/><text x="89.8024%" y="271.50"></text></g><g><title>&lt;f32 as core::ops::arith::Add&gt;::add (2,186 samples, 0.57%)</title><rect x="89.5524%" y="245" width="0.5702%" height="15" fill="rgb(224,145,5)" fg:x="343333" fg:w="2186"/><text x="89.8024%" y="255.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (3,512 samples, 0.92%)</title><rect x="90.1225%" y="261" width="0.9160%" height="15" fill="rgb(234,130,49)" fg:x="345519" fg:w="3512"/><text x="90.3725%" y="271.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (3,512 samples, 0.92%)</title><rect x="90.1225%" y="245" width="0.9160%" height="15" fill="rgb(254,6,2)" fg:x="345519" fg:w="3512"/><text x="90.3725%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::gt (1,986 samples, 0.52%)</title><rect x="91.0386%" y="261" width="0.5180%" height="15" fill="rgb(208,96,46)" fg:x="349031" fg:w="1986"/><text x="91.2886%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::lt (7,866 samples, 2.05%)</title><rect x="91.5566%" y="261" width="2.0517%" height="15" fill="rgb(239,3,39)" fg:x="351017" fg:w="7866"/><text x="91.8066%" y="271.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (212,972 samples, 55.55%)</title><rect x="38.7735%" y="341" width="55.5500%" height="15" fill="rgb(233,210,1)" fg:x="148653" fg:w="212972"/><text x="39.0235%" y="351.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (212,972 samples, 55.55%)</title><rect x="38.7735%" y="325" width="55.5500%" height="15" fill="rgb(244,137,37)" fg:x="148653" fg:w="212972"/><text x="39.0235%" y="335.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (208,840 samples, 54.47%)</title><rect x="39.8513%" y="309" width="54.4722%" height="15" fill="rgb(240,136,2)" fg:x="152785" fg:w="208840"/><text x="40.1013%" y="319.50">core::iter::traits::iterator::Iterator::for_each::call::{{closure}}</text></g><g><title>fastiron::simulation::mct::mct_nf_3dg::{{closure}} (196,614 samples, 51.28%)</title><rect x="43.0402%" y="293" width="51.2833%" height="15" fill="rgb(239,18,37)" fg:x="165011" fg:w="196614"/><text x="43.2902%" y="303.50">fastiron::simulation::mct::mct_nf_3dg::{{closure}}</text></g><g><title>fastiron::simulation::mct::mct_nf_3dg_dist_to_segment (111,709 samples, 29.14%)</title><rect x="65.1862%" y="277" width="29.1373%" height="15" fill="rgb(218,185,22)" fg:x="249916" fg:w="111709"/><text x="65.4362%" y="287.50">fastiron::simulation::mct::mct_nf_3dg_dist_to_s..</text></g><g><title>fastiron::main (2,742 samples, 0.72%)</title><rect x="93.6083%" y="261" width="0.7152%" height="15" fill="rgb(225,218,4)" fg:x="358883" fg:w="2742"/><text x="93.8583%" y="271.50"></text></g><g><title>fastiron::main (219 samples, 0.06%)</title><rect x="94.3235%" y="341" width="0.0571%" height="15" fill="rgb(230,182,32)" fg:x="361625" fg:w="219"/><text x="94.5735%" y="351.50"></text></g><g><title>&lt;f32 as core::ops::arith::MulAssign&gt;::mul_assign (56 samples, 0.01%)</title><rect x="94.5619%" y="325" width="0.0146%" height="15" fill="rgb(242,56,43)" fg:x="362539" fg:w="56"/><text x="94.8119%" y="335.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (211 samples, 0.06%)</title><rect x="94.5820%" y="293" width="0.0550%" height="15" fill="rgb(233,99,24)" fg:x="362616" fg:w="211"/><text x="94.8320%" y="303.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::AddAssign&gt;::add_assign (280 samples, 0.07%)</title><rect x="94.5820%" y="309" width="0.0730%" height="15" fill="rgb(234,209,42)" fg:x="362616" fg:w="280"/><text x="94.8320%" y="319.50"></text></g><g><title>fastiron::main (69 samples, 0.02%)</title><rect x="94.6370%" y="293" width="0.0180%" height="15" fill="rgb(227,7,12)" fg:x="362827" fg:w="69"/><text x="94.8870%" y="303.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (210 samples, 0.05%)</title><rect x="94.6550%" y="309" width="0.0548%" height="15" fill="rgb(245,203,43)" fg:x="362896" fg:w="210"/><text x="94.9050%" y="319.50"></text></g><g><title>&lt;f32 as core::ops::arith::Mul&gt;::mul (210 samples, 0.05%)</title><rect x="94.6550%" y="293" width="0.0548%" height="15" fill="rgb(238,205,33)" fg:x="362896" fg:w="210"/><text x="94.9050%" y="303.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Sub&gt;::sub (321 samples, 0.08%)</title><rect x="94.7098%" y="309" width="0.0837%" height="15" fill="rgb(231,56,7)" fg:x="363106" fg:w="321"/><text x="94.9598%" y="319.50"></text></g><g><title>&lt;f32 as core::ops::arith::Sub&gt;::sub (311 samples, 0.08%)</title><rect x="94.7124%" y="293" width="0.0811%" height="15" fill="rgb(244,186,29)" fg:x="363116" fg:w="311"/><text x="94.9624%" y="303.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::DivAssign&lt;T&gt;&gt;::div_assign (678 samples, 0.18%)</title><rect x="94.7935%" y="293" width="0.1768%" height="15" fill="rgb(234,111,31)" fg:x="363427" fg:w="678"/><text x="95.0435%" y="303.50"></text></g><g><title>&lt;f32 as core::ops::arith::DivAssign&gt;::div_assign (678 samples, 0.18%)</title><rect x="94.7935%" y="277" width="0.1768%" height="15" fill="rgb(241,149,10)" fg:x="363427" fg:w="678"/><text x="95.0435%" y="287.50"></text></g><g><title>fastiron::main (110 samples, 0.03%)</title><rect x="94.9704%" y="245" width="0.0287%" height="15" fill="rgb(249,206,44)" fg:x="364105" fg:w="110"/><text x="95.2204%" y="255.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (367 samples, 0.10%)</title><rect x="95.1086%" y="197" width="0.0957%" height="15" fill="rgb(251,153,30)" fg:x="364635" fg:w="367"/><text x="95.3586%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (398 samples, 0.10%)</title><rect x="95.1086%" y="229" width="0.1038%" height="15" fill="rgb(239,152,38)" fg:x="364635" fg:w="398"/><text x="95.3586%" y="239.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (398 samples, 0.10%)</title><rect x="95.1086%" y="213" width="0.1038%" height="15" fill="rgb(249,139,47)" fg:x="364635" fg:w="398"/><text x="95.3586%" y="223.50"></text></g><g><title>fastiron::simulation::mct::mct_nf_3dg_move_particle (3,966 samples, 1.03%)</title><rect x="94.5820%" y="325" width="1.0345%" height="15" fill="rgb(244,64,35)" fg:x="362616" fg:w="3966"/><text x="94.8320%" y="335.50"></text></g><g><title>fastiron::simulation::mct::cell_position_3dg (3,155 samples, 0.82%)</title><rect x="94.7935%" y="309" width="0.8229%" height="15" fill="rgb(216,46,15)" fg:x="363427" fg:w="3155"/><text x="95.0435%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,477 samples, 0.65%)</title><rect x="94.9704%" y="293" width="0.6461%" height="15" fill="rgb(250,74,19)" fg:x="364105" fg:w="2477"/><text x="95.2204%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2,477 samples, 0.65%)</title><rect x="94.9704%" y="277" width="0.6461%" height="15" fill="rgb(249,42,33)" fg:x="364105" fg:w="2477"/><text x="95.2204%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2,477 samples, 0.65%)</title><rect x="94.9704%" y="261" width="0.6461%" height="15" fill="rgb(242,149,17)" fg:x="364105" fg:w="2477"/><text x="95.2204%" y="271.50"></text></g><g><title>fastiron::simulation::mct::cell_position_3dg::{{closure}} (2,367 samples, 0.62%)</title><rect x="94.9991%" y="245" width="0.6174%" height="15" fill="rgb(244,29,21)" fg:x="364215" fg:w="2367"/><text x="95.2491%" y="255.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::AddAssign&gt;::add_assign (1,549 samples, 0.40%)</title><rect x="95.2124%" y="229" width="0.4040%" height="15" fill="rgb(220,130,37)" fg:x="365033" fg:w="1549"/><text x="95.4624%" y="239.50"></text></g><g><title>&lt;f32 as core::ops::arith::AddAssign&gt;::add_assign (1,549 samples, 0.40%)</title><rect x="95.2124%" y="213" width="0.4040%" height="15" fill="rgb(211,67,2)" fg:x="365033" fg:w="1549"/><text x="95.4624%" y="223.50"></text></g><g><title>&lt;fastiron::geometry::facets::MCNearestFacet&lt;T&gt; as core::default::Default&gt;::default (72 samples, 0.02%)</title><rect x="95.7471%" y="309" width="0.0188%" height="15" fill="rgb(235,68,52)" fg:x="367083" fg:w="72"/><text x="95.9971%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f32&gt;::eq (124 samples, 0.03%)</title><rect x="95.7659%" y="309" width="0.0323%" height="15" fill="rgb(246,142,3)" fg:x="367155" fg:w="124"/><text x="96.0159%" y="319.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (864 samples, 0.23%)</title><rect x="95.8196%" y="245" width="0.2254%" height="15" fill="rgb(241,25,7)" fg:x="367361" fg:w="864"/><text x="96.0696%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (864 samples, 0.23%)</title><rect x="95.8196%" y="229" width="0.2254%" height="15" fill="rgb(242,119,39)" fg:x="367361" fg:w="864"/><text x="96.0696%" y="239.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (3,125 samples, 0.82%)</title><rect x="95.7983%" y="261" width="0.8151%" height="15" fill="rgb(241,98,45)" fg:x="367279" fg:w="3125"/><text x="96.0483%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2,179 samples, 0.57%)</title><rect x="96.0450%" y="245" width="0.5684%" height="15" fill="rgb(254,28,30)" fg:x="368225" fg:w="2179"/><text x="96.2950%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (3,585 samples, 0.94%)</title><rect x="95.7983%" y="277" width="0.9351%" height="15" fill="rgb(241,142,54)" fg:x="367279" fg:w="3585"/><text x="96.0483%" y="287.50"></text></g><g><title>fastiron::main (460 samples, 0.12%)</title><rect x="96.6134%" y="261" width="0.1200%" height="15" fill="rgb(222,85,15)" fg:x="370404" fg:w="460"/><text x="96.8634%" y="271.50"></text></g><g><title>fastiron::main (1,455 samples, 0.38%)</title><rect x="96.7333%" y="261" width="0.3795%" height="15" fill="rgb(210,85,47)" fg:x="370864" fg:w="1455"/><text x="96.9833%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::gt (1,440 samples, 0.38%)</title><rect x="98.8103%" y="245" width="0.3756%" height="15" fill="rgb(224,206,25)" fg:x="378827" fg:w="1440"/><text x="99.0603%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (15,250 samples, 3.98%)</title><rect x="95.7983%" y="293" width="3.9777%" height="15" fill="rgb(243,201,19)" fg:x="367279" fg:w="15250"/><text x="96.0483%" y="303.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (11,665 samples, 3.04%)</title><rect x="96.7333%" y="277" width="3.0426%" height="15" fill="rgb(236,59,4)" fg:x="370864" fg:w="11665"/><text x="96.9833%" y="287.50">cor..</text></g><g><title>fastiron::simulation::mct::mct_nf_compute_nearest::{{closure}} (10,210 samples, 2.66%)</title><rect x="97.1128%" y="261" width="2.6631%" height="15" fill="rgb(254,179,45)" fg:x="372319" fg:w="10210"/><text x="97.3628%" y="271.50">fa..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f32&gt;::le (2,262 samples, 0.59%)</title><rect x="99.1859%" y="245" width="0.5900%" height="15" fill="rgb(226,14,10)" fg:x="380267" fg:w="2262"/><text x="99.4359%" y="255.50"></text></g><g><title>fastiron::simulation::mc_segment_outcome::outcome (279,295 samples, 72.85%)</title><rect x="26.9969%" y="389" width="72.8492%" height="15" fill="rgb(244,27,41)" fg:x="103503" fg:w="279295"/><text x="27.2469%" y="399.50">fastiron::simulation::mc_segment_outcome::outcome</text></g><g><title>fastiron::simulation::mct::nearest_facet (238,208 samples, 62.13%)</title><rect x="37.7138%" y="373" width="62.1324%" height="15" fill="rgb(235,35,32)" fg:x="144590" fg:w="238208"/><text x="37.9638%" y="383.50">fastiron::simulation::mct::nearest_facet</text></g><g><title>fastiron::simulation::mct::mct_nf_3dg (234,765 samples, 61.23%)</title><rect x="38.6118%" y="357" width="61.2343%" height="15" fill="rgb(218,68,31)" fg:x="148033" fg:w="234765"/><text x="38.8618%" y="367.50">fastiron::simulation::mct::mct_nf_3dg</text></g><g><title>fastiron::simulation::mct::mct_nf_find_nearest (20,954 samples, 5.47%)</title><rect x="94.3806%" y="341" width="5.4655%" height="15" fill="rgb(207,120,37)" fg:x="361844" fg:w="20954"/><text x="94.6306%" y="351.50">fastiro..</text></g><g><title>fastiron::simulation::mct::mct_nf_compute_nearest (16,216 samples, 4.23%)</title><rect x="95.6165%" y="325" width="4.2297%" height="15" fill="rgb(227,98,0)" fg:x="366582" fg:w="16216"/><text x="95.8665%" y="335.50">fasti..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15,519 samples, 4.05%)</title><rect x="95.7983%" y="309" width="4.0479%" height="15" fill="rgb(207,7,3)" fg:x="367279" fg:w="15519"/><text x="96.0483%" y="319.50">core..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call (269 samples, 0.07%)</title><rect x="99.7759%" y="293" width="0.0702%" height="15" fill="rgb(206,98,19)" fg:x="382529" fg:w="269"/><text x="100.0259%" y="303.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::dot (81 samples, 0.02%)</title><rect x="99.8774%" y="373" width="0.0211%" height="15" fill="rgb(217,5,26)" fg:x="382918" fg:w="81"/><text x="100.1274%" y="383.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (380,588 samples, 99.27%)</title><rect x="0.6315%" y="453" width="99.2697%" height="15" fill="rgb(235,190,38)" fg:x="2421" fg:w="380588"/><text x="0.8815%" y="463.50">&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each</text></g><g><title>fastiron::cycle_tracking::{{closure}} (380,582 samples, 99.27%)</title><rect x="0.6330%" y="437" width="99.2681%" height="15" fill="rgb(247,86,24)" fg:x="2427" fg:w="380582"/><text x="0.8830%" y="447.50">fastiron::cycle_tracking::{{closure}}</text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_guts (379,346 samples, 98.95%)</title><rect x="0.9554%" y="421" width="98.9457%" height="15" fill="rgb(205,101,16)" fg:x="3663" fg:w="379346"/><text x="1.2054%" y="431.50">fastiron::simulation::cycle_tracking::cycle_tracking_guts</text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_function (378,234 samples, 98.66%)</title><rect x="1.2455%" y="405" width="98.6557%" height="15" fill="rgb(246,168,33)" fg:x="4775" fg:w="378234"/><text x="1.4955%" y="415.50">fastiron::simulation::cycle_tracking::cycle_tracking_function</text></g><g><title>fastiron::simulation::mct::reflect_particle (211 samples, 0.06%)</title><rect x="99.8461%" y="389" width="0.0550%" height="15" fill="rgb(231,114,1)" fg:x="382798" fg:w="211"/><text x="100.0961%" y="399.50"></text></g><g><title>fastiron::main (44 samples, 0.01%)</title><rect x="99.9011%" y="453" width="0.0115%" height="15" fill="rgb(207,184,53)" fg:x="383009" fg:w="44"/><text x="100.1511%" y="463.50"></text></g><g><title>fastiron::particles::particle_container::ParticleContainer&lt;T&gt;::clean_extra_vaults (283 samples, 0.07%)</title><rect x="99.9126%" y="453" width="0.0738%" height="15" fill="rgb(224,95,51)" fg:x="383053" fg:w="283"/><text x="100.1626%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (283 samples, 0.07%)</title><rect x="99.9126%" y="437" width="0.0738%" height="15" fill="rgb(212,188,45)" fg:x="383053" fg:w="283"/><text x="100.1626%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (283 samples, 0.07%)</title><rect x="99.9126%" y="421" width="0.0738%" height="15" fill="rgb(223,154,38)" fg:x="383053" fg:w="283"/><text x="100.1626%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (283 samples, 0.07%)</title><rect x="99.9126%" y="405" width="0.0738%" height="15" fill="rgb(251,22,52)" fg:x="383053" fg:w="283"/><text x="100.1626%" y="415.50"></text></g><g><title>[libc.so.6] (283 samples, 0.07%)</title><rect x="99.9126%" y="389" width="0.0738%" height="15" fill="rgb(229,209,22)" fg:x="383053" fg:w="283"/><text x="100.1626%" y="399.50"></text></g><g><title>fastiron::cycle_tracking (380,916 samples, 99.36%)</title><rect x="0.6315%" y="469" width="99.3552%" height="15" fill="rgb(234,138,34)" fg:x="2421" fg:w="380916"/><text x="0.8815%" y="479.50">fastiron::cycle_tracking</text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood (43 samples, 0.01%)</title><rect x="99.9867%" y="341" width="0.0112%" height="15" fill="rgb(212,95,11)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (43 samples, 0.01%)</title><rect x="99.9867%" y="325" width="0.0112%" height="15" fill="rgb(240,179,47)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (43 samples, 0.01%)</title><rect x="99.9867%" y="309" width="0.0112%" height="15" fill="rgb(240,163,11)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (43 samples, 0.01%)</title><rect x="99.9867%" y="293" width="0.0112%" height="15" fill="rgb(236,37,12)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="303.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood::{{closure}} (43 samples, 0.01%)</title><rect x="99.9867%" y="277" width="0.0112%" height="15" fill="rgb(232,164,16)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (43 samples, 0.01%)</title><rect x="99.9867%" y="261" width="0.0112%" height="15" fill="rgb(244,205,15)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (43 samples, 0.01%)</title><rect x="99.9867%" y="245" width="0.0112%" height="15" fill="rgb(223,117,47)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (43 samples, 0.01%)</title><rect x="99.9867%" y="229" width="0.0112%" height="15" fill="rgb(244,107,35)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="239.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood::{{closure}}::{{closure}} (43 samples, 0.01%)</title><rect x="99.9867%" y="213" width="0.0112%" height="15" fill="rgb(205,140,8)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (43 samples, 0.01%)</title><rect x="99.9867%" y="197" width="0.0112%" height="15" fill="rgb(228,84,46)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (43 samples, 0.01%)</title><rect x="99.9867%" y="181" width="0.0112%" height="15" fill="rgb(254,188,9)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (43 samples, 0.01%)</title><rect x="99.9867%" y="165" width="0.0112%" height="15" fill="rgb(206,112,54)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="175.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood::{{closure}}::{{closure}}::{{closure}} (43 samples, 0.01%)</title><rect x="99.9867%" y="149" width="0.0112%" height="15" fill="rgb(216,84,49)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (43 samples, 0.01%)</title><rect x="99.9867%" y="133" width="0.0112%" height="15" fill="rgb(214,194,35)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="143.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (43 samples, 0.01%)</title><rect x="99.9867%" y="117" width="0.0112%" height="15" fill="rgb(249,28,3)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (43 samples, 0.01%)</title><rect x="99.9867%" y="101" width="0.0112%" height="15" fill="rgb(222,56,52)" fg:x="383337" fg:w="43"/><text x="100.2367%" y="111.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::assign_cells_to_domain (44 samples, 0.01%)</title><rect x="99.9867%" y="357" width="0.0115%" height="15" fill="rgb(245,217,50)" fg:x="383337" fg:w="44"/><text x="100.2367%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (45 samples, 0.01%)</title><rect x="99.9867%" y="437" width="0.0117%" height="15" fill="rgb(213,201,24)" fg:x="383337" fg:w="45"/><text x="100.2367%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (45 samples, 0.01%)</title><rect x="99.9867%" y="421" width="0.0117%" height="15" fill="rgb(248,116,28)" fg:x="383337" fg:w="45"/><text x="100.2367%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (45 samples, 0.01%)</title><rect x="99.9867%" y="405" width="0.0117%" height="15" fill="rgb(219,72,43)" fg:x="383337" fg:w="45"/><text x="100.2367%" y="415.50"></text></g><g><title>fastiron::init::init_mesh::{{closure}} (45 samples, 0.01%)</title><rect x="99.9867%" y="389" width="0.0117%" height="15" fill="rgb(209,138,14)" fg:x="383337" fg:w="45"/><text x="100.2367%" y="399.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::build_mesh_partition (45 samples, 0.01%)</title><rect x="99.9867%" y="373" width="0.0117%" height="15" fill="rgb(222,18,33)" fg:x="383337" fg:w="45"/><text x="100.2367%" y="383.50"></text></g><g><title>fastiron::init::init_mesh (48 samples, 0.01%)</title><rect x="99.9867%" y="453" width="0.0125%" height="15" fill="rgb(213,199,7)" fg:x="383337" fg:w="48"/><text x="100.2367%" y="463.50"></text></g><g><title>__libc_start_main_impl (381,606 samples, 99.54%)</title><rect x="0.4645%" y="565" width="99.5352%" height="15" fill="rgb(250,110,10)" fg:x="1781" fg:w="381606"/><text x="0.7145%" y="575.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (381,606 samples, 99.54%)</title><rect x="0.4645%" y="549" width="99.5352%" height="15" fill="rgb(248,123,6)" fg:x="1781" fg:w="381606"/><text x="0.7145%" y="559.50">__libc_start_call_main</text></g><g><title>main (381,606 samples, 99.54%)</title><rect x="0.4645%" y="533" width="99.5352%" height="15" fill="rgb(206,91,31)" fg:x="1781" fg:w="381606"/><text x="0.7145%" y="543.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (381,606 samples, 99.54%)</title><rect x="0.4645%" y="517" width="99.5352%" height="15" fill="rgb(211,154,13)" fg:x="1781" fg:w="381606"/><text x="0.7145%" y="527.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (381,606 samples, 99.54%)</title><rect x="0.4645%" y="501" width="99.5352%" height="15" fill="rgb(225,148,7)" fg:x="1781" fg:w="381606"/><text x="0.7145%" y="511.50">core::ops::function::FnOnce::call_once</text></g><g><title>fastiron::main (381,606 samples, 99.54%)</title><rect x="0.4645%" y="485" width="99.5352%" height="15" fill="rgb(220,160,43)" fg:x="1781" fg:w="381606"/><text x="0.7145%" y="495.50">fastiron::main</text></g><g><title>fastiron::init::init_mc (50 samples, 0.01%)</title><rect x="99.9867%" y="469" width="0.0130%" height="15" fill="rgb(213,52,39)" fg:x="383337" fg:w="50"/><text x="100.2367%" y="479.50"></text></g><g><title>all (383,388 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(243,137,7)" fg:x="0" fg:w="383388"/><text x="0.2500%" y="623.50"></text></g><g><title>fastiron (383,388 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(230,79,13)" fg:x="0" fg:w="383388"/><text x="0.2500%" y="607.50">fastiron</text></g><g><title>_start (381,612 samples, 99.54%)</title><rect x="0.4632%" y="581" width="99.5368%" height="15" fill="rgb(247,105,23)" fg:x="1776" fg:w="381612"/><text x="0.7132%" y="591.50">_start</text></g></svg></svg>