<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="1213"><g><title>_int_malloc (1 samples, 0.08%)</title><rect x="0.0000%" y="613" width="0.0824%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.16%)</title><rect x="0.0824%" y="485" width="0.1649%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.3324%" y="495.50"></text></g><g><title>[[heap]] (4 samples, 0.33%)</title><rect x="0.0000%" y="629" width="0.3298%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="4"/><text x="0.2500%" y="639.50"></text></g><g><title>fastiron::main (3 samples, 0.25%)</title><rect x="0.0824%" y="613" width="0.2473%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="3"/><text x="0.3324%" y="623.50"></text></g><g><title>fastiron::cycle_tracking (3 samples, 0.25%)</title><rect x="0.0824%" y="597" width="0.2473%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="3"/><text x="0.3324%" y="607.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (3 samples, 0.25%)</title><rect x="0.0824%" y="581" width="0.2473%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="3"/><text x="0.3324%" y="591.50"></text></g><g><title>fastiron::cycle_tracking::{{closure}} (3 samples, 0.25%)</title><rect x="0.0824%" y="565" width="0.2473%" height="15" fill="rgb(207,160,47)" fg:x="1" fg:w="3"/><text x="0.3324%" y="575.50"></text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_guts (3 samples, 0.25%)</title><rect x="0.0824%" y="549" width="0.2473%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="3"/><text x="0.3324%" y="559.50"></text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_function (3 samples, 0.25%)</title><rect x="0.0824%" y="533" width="0.2473%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="3"/><text x="0.3324%" y="543.50"></text></g><g><title>fastiron::simulation::collision_event::collision_event (3 samples, 0.25%)</title><rect x="0.0824%" y="517" width="0.2473%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="3"/><text x="0.3324%" y="527.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearDataReaction&lt;T&gt;::sample_collision (3 samples, 0.25%)</title><rect x="0.0824%" y="501" width="0.2473%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="3"/><text x="0.3324%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (1 samples, 0.08%)</title><rect x="0.2473%" y="485" width="0.0824%" height="15" fill="rgb(240,193,28)" fg:x="3" fg:w="1"/><text x="0.4973%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (1 samples, 0.08%)</title><rect x="0.2473%" y="469" width="0.0824%" height="15" fill="rgb(216,20,37)" fg:x="3" fg:w="1"/><text x="0.4973%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="0.2473%" y="453" width="0.0824%" height="15" fill="rgb(206,188,39)" fg:x="3" fg:w="1"/><text x="0.4973%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.08%)</title><rect x="0.2473%" y="437" width="0.0824%" height="15" fill="rgb(217,207,13)" fg:x="3" fg:w="1"/><text x="0.4973%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.08%)</title><rect x="0.2473%" y="421" width="0.0824%" height="15" fill="rgb(231,73,38)" fg:x="3" fg:w="1"/><text x="0.4973%" y="431.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.08%)</title><rect x="0.2473%" y="405" width="0.0824%" height="15" fill="rgb(225,20,46)" fg:x="3" fg:w="1"/><text x="0.4973%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.08%)</title><rect x="0.2473%" y="389" width="0.0824%" height="15" fill="rgb(210,31,41)" fg:x="3" fg:w="1"/><text x="0.4973%" y="399.50"></text></g><g><title>__GI___libc_free (4 samples, 0.33%)</title><rect x="0.3298%" y="613" width="0.3298%" height="15" fill="rgb(221,200,47)" fg:x="4" fg:w="4"/><text x="0.5798%" y="623.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.08%)</title><rect x="0.6595%" y="613" width="0.0824%" height="15" fill="rgb(226,26,5)" fg:x="8" fg:w="1"/><text x="0.9095%" y="623.50"></text></g><g><title>_int_free (1 samples, 0.08%)</title><rect x="0.7420%" y="613" width="0.0824%" height="15" fill="rgb(249,33,26)" fg:x="9" fg:w="1"/><text x="0.9920%" y="623.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.16%)</title><rect x="0.8244%" y="613" width="0.1649%" height="15" fill="rgb(235,183,28)" fg:x="10" fg:w="2"/><text x="1.0744%" y="623.50"></text></g><g><title>core::fmt::Formatter::pad_formatted_parts (1 samples, 0.08%)</title><rect x="0.9893%" y="613" width="0.0824%" height="15" fill="rgb(221,5,38)" fg:x="12" fg:w="1"/><text x="1.2393%" y="623.50"></text></g><g><title>core::fmt::Formatter::padding (1 samples, 0.08%)</title><rect x="0.9893%" y="597" width="0.0824%" height="15" fill="rgb(247,18,42)" fg:x="12" fg:w="1"/><text x="1.2393%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.08%)</title><rect x="1.0717%" y="501" width="0.0824%" height="15" fill="rgb(241,131,45)" fg:x="13" fg:w="1"/><text x="1.3217%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="1.0717%" y="485" width="0.0824%" height="15" fill="rgb(249,31,29)" fg:x="13" fg:w="1"/><text x="1.3217%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="1.0717%" y="469" width="0.0824%" height="15" fill="rgb(225,111,53)" fg:x="13" fg:w="1"/><text x="1.3217%" y="479.50"></text></g><g><title>fastiron::geometry::mc_domain::MCMeshDomain&lt;T&gt;::new::{{closure}} (1 samples, 0.08%)</title><rect x="1.0717%" y="453" width="0.0824%" height="15" fill="rgb(238,160,17)" fg:x="13" fg:w="1"/><text x="1.3217%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.08%)</title><rect x="1.0717%" y="437" width="0.0824%" height="15" fill="rgb(214,148,48)" fg:x="13" fg:w="1"/><text x="1.3217%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="1.0717%" y="421" width="0.0824%" height="15" fill="rgb(232,36,49)" fg:x="13" fg:w="1"/><text x="1.3217%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="1.0717%" y="405" width="0.0824%" height="15" fill="rgb(209,103,24)" fg:x="13" fg:w="1"/><text x="1.3217%" y="415.50"></text></g><g><title>fastiron::geometry::mc_domain::MCMeshDomain&lt;T&gt;::new::{{closure}}::{{closure}} (1 samples, 0.08%)</title><rect x="1.0717%" y="389" width="0.0824%" height="15" fill="rgb(229,88,8)" fg:x="13" fg:w="1"/><text x="1.3217%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.08%)</title><rect x="1.0717%" y="373" width="0.0824%" height="15" fill="rgb(213,181,19)" fg:x="13" fg:w="1"/><text x="1.3217%" y="383.50"></text></g><g><title>[unknown] (11 samples, 0.91%)</title><rect x="0.3298%" y="629" width="0.9068%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="11"/><text x="0.5798%" y="639.50"></text></g><g><title>fastiron::main (2 samples, 0.16%)</title><rect x="1.0717%" y="613" width="0.1649%" height="15" fill="rgb(241,83,37)" fg:x="13" fg:w="2"/><text x="1.3217%" y="623.50"></text></g><g><title>fastiron::init::init_mc (2 samples, 0.16%)</title><rect x="1.0717%" y="597" width="0.1649%" height="15" fill="rgb(233,36,39)" fg:x="13" fg:w="2"/><text x="1.3217%" y="607.50"></text></g><g><title>fastiron::init::init_mesh (2 samples, 0.16%)</title><rect x="1.0717%" y="581" width="0.1649%" height="15" fill="rgb(226,3,54)" fg:x="13" fg:w="2"/><text x="1.3217%" y="591.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (2 samples, 0.16%)</title><rect x="1.0717%" y="565" width="0.1649%" height="15" fill="rgb(245,192,40)" fg:x="13" fg:w="2"/><text x="1.3217%" y="575.50"></text></g><g><title>fastiron::init::init_mesh::{{closure}} (2 samples, 0.16%)</title><rect x="1.0717%" y="549" width="0.1649%" height="15" fill="rgb(238,167,29)" fg:x="13" fg:w="2"/><text x="1.3217%" y="559.50"></text></g><g><title>fastiron::geometry::mc_domain::MCDomain&lt;T&gt;::new (2 samples, 0.16%)</title><rect x="1.0717%" y="533" width="0.1649%" height="15" fill="rgb(232,182,51)" fg:x="13" fg:w="2"/><text x="1.3217%" y="543.50"></text></g><g><title>fastiron::geometry::mc_domain::MCMeshDomain&lt;T&gt;::new (2 samples, 0.16%)</title><rect x="1.0717%" y="517" width="0.1649%" height="15" fill="rgb(231,60,39)" fg:x="13" fg:w="2"/><text x="1.3217%" y="527.50"></text></g><g><title>fastiron::geometry::mc_domain::bootstrap_node_map (1 samples, 0.08%)</title><rect x="1.1542%" y="501" width="0.0824%" height="15" fill="rgb(208,69,12)" fg:x="14" fg:w="1"/><text x="1.4042%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.08%)</title><rect x="1.1542%" y="485" width="0.0824%" height="15" fill="rgb(235,93,37)" fg:x="14" fg:w="1"/><text x="1.4042%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="1.1542%" y="469" width="0.0824%" height="15" fill="rgb(213,116,39)" fg:x="14" fg:w="1"/><text x="1.4042%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="1.1542%" y="453" width="0.0824%" height="15" fill="rgb(222,207,29)" fg:x="14" fg:w="1"/><text x="1.4042%" y="463.50"></text></g><g><title>fastiron::geometry::mc_domain::bootstrap_node_map::{{closure}} (1 samples, 0.08%)</title><rect x="1.1542%" y="437" width="0.0824%" height="15" fill="rgb(206,96,30)" fg:x="14" fg:w="1"/><text x="1.4042%" y="447.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (1 samples, 0.08%)</title><rect x="1.1542%" y="421" width="0.0824%" height="15" fill="rgb(218,138,4)" fg:x="14" fg:w="1"/><text x="1.4042%" y="431.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (1 samples, 0.08%)</title><rect x="1.1542%" y="405" width="0.0824%" height="15" fill="rgb(250,191,14)" fg:x="14" fg:w="1"/><text x="1.4042%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.08%)</title><rect x="1.1542%" y="389" width="0.0824%" height="15" fill="rgb(239,60,40)" fg:x="14" fg:w="1"/><text x="1.4042%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.08%)</title><rect x="1.1542%" y="373" width="0.0824%" height="15" fill="rgb(206,27,48)" fg:x="14" fg:w="1"/><text x="1.4042%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.08%)</title><rect x="1.1542%" y="357" width="0.0824%" height="15" fill="rgb(225,35,8)" fg:x="14" fg:w="1"/><text x="1.4042%" y="367.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.08%)</title><rect x="1.1542%" y="341" width="0.0824%" height="15" fill="rgb(250,213,24)" fg:x="14" fg:w="1"/><text x="1.4042%" y="351.50"></text></g><g><title>__GI___libc_free (1 samples, 0.08%)</title><rect x="1.2366%" y="629" width="0.0824%" height="15" fill="rgb(247,123,22)" fg:x="15" fg:w="1"/><text x="1.4866%" y="639.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::cycle_finalize (1 samples, 0.08%)</title><rect x="1.7312%" y="501" width="0.0824%" height="15" fill="rgb(231,138,38)" fg:x="21" fg:w="1"/><text x="1.9812%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.08%)</title><rect x="1.7312%" y="485" width="0.0824%" height="15" fill="rgb(231,145,46)" fg:x="21" fg:w="1"/><text x="1.9812%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="1.7312%" y="469" width="0.0824%" height="15" fill="rgb(251,118,11)" fg:x="21" fg:w="1"/><text x="1.9812%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="1.7312%" y="453" width="0.0824%" height="15" fill="rgb(217,147,25)" fg:x="21" fg:w="1"/><text x="1.9812%" y="463.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::cycle_finalize::{{closure}} (1 samples, 0.08%)</title><rect x="1.7312%" y="437" width="0.0824%" height="15" fill="rgb(247,81,37)" fg:x="21" fg:w="1"/><text x="1.9812%" y="447.50"></text></g><g><title>fastiron::data::tallies::ScalarFluxDomain&lt;T&gt;::reset (1 samples, 0.08%)</title><rect x="1.7312%" y="421" width="0.0824%" height="15" fill="rgb(209,12,38)" fg:x="21" fg:w="1"/><text x="1.9812%" y="431.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1 samples, 0.08%)</title><rect x="1.7312%" y="405" width="0.0824%" height="15" fill="rgb(227,1,9)" fg:x="21" fg:w="1"/><text x="1.9812%" y="415.50"></text></g><g><title>fastiron::data::tallies::ScalarFluxDomain&lt;T&gt;::reset::{{closure}} (1 samples, 0.08%)</title><rect x="1.7312%" y="389" width="0.0824%" height="15" fill="rgb(248,47,43)" fg:x="21" fg:w="1"/><text x="1.9812%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (1 samples, 0.08%)</title><rect x="1.7312%" y="373" width="0.0824%" height="15" fill="rgb(221,10,30)" fg:x="21" fg:w="1"/><text x="1.9812%" y="383.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (1 samples, 0.08%)</title><rect x="1.7312%" y="357" width="0.0824%" height="15" fill="rgb(210,229,1)" fg:x="21" fg:w="1"/><text x="1.9812%" y="367.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::print_summary (6 samples, 0.49%)</title><rect x="1.8137%" y="501" width="0.4946%" height="15" fill="rgb(222,148,37)" fg:x="22" fg:w="6"/><text x="2.0637%" y="511.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::scalar_flux_sum (6 samples, 0.49%)</title><rect x="1.8137%" y="485" width="0.4946%" height="15" fill="rgb(234,67,33)" fg:x="22" fg:w="6"/><text x="2.0637%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (6 samples, 0.49%)</title><rect x="1.8137%" y="469" width="0.4946%" height="15" fill="rgb(247,98,35)" fg:x="22" fg:w="6"/><text x="2.0637%" y="479.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (6 samples, 0.49%)</title><rect x="1.8137%" y="453" width="0.4946%" height="15" fill="rgb(247,138,52)" fg:x="22" fg:w="6"/><text x="2.0637%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.49%)</title><rect x="1.8137%" y="437" width="0.4946%" height="15" fill="rgb(213,79,30)" fg:x="22" fg:w="6"/><text x="2.0637%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.49%)</title><rect x="1.8137%" y="421" width="0.4946%" height="15" fill="rgb(246,177,23)" fg:x="22" fg:w="6"/><text x="2.0637%" y="431.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (6 samples, 0.49%)</title><rect x="1.8137%" y="405" width="0.4946%" height="15" fill="rgb(230,62,27)" fg:x="22" fg:w="6"/><text x="2.0637%" y="415.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::scalar_flux_sum::{{closure}} (6 samples, 0.49%)</title><rect x="1.8137%" y="389" width="0.4946%" height="15" fill="rgb(216,154,8)" fg:x="22" fg:w="6"/><text x="2.0637%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (6 samples, 0.49%)</title><rect x="1.8137%" y="373" width="0.4946%" height="15" fill="rgb(244,35,45)" fg:x="22" fg:w="6"/><text x="2.0637%" y="383.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (6 samples, 0.49%)</title><rect x="1.8137%" y="357" width="0.4946%" height="15" fill="rgb(251,115,12)" fg:x="22" fg:w="6"/><text x="2.0637%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.49%)</title><rect x="1.8137%" y="341" width="0.4946%" height="15" fill="rgb(240,54,50)" fg:x="22" fg:w="6"/><text x="2.0637%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.49%)</title><rect x="1.8137%" y="325" width="0.4946%" height="15" fill="rgb(233,84,52)" fg:x="22" fg:w="6"/><text x="2.0637%" y="335.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (6 samples, 0.49%)</title><rect x="1.8137%" y="309" width="0.4946%" height="15" fill="rgb(207,117,47)" fg:x="22" fg:w="6"/><text x="2.0637%" y="319.50"></text></g><g><title>fastiron::data::tallies::Tallies&lt;T&gt;::scalar_flux_sum::{{closure}}::{{closure}} (6 samples, 0.49%)</title><rect x="1.8137%" y="293" width="0.4946%" height="15" fill="rgb(249,43,39)" fg:x="22" fg:w="6"/><text x="2.0637%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (6 samples, 0.49%)</title><rect x="1.8137%" y="277" width="0.4946%" height="15" fill="rgb(209,38,44)" fg:x="22" fg:w="6"/><text x="2.0637%" y="287.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (6 samples, 0.49%)</title><rect x="1.8137%" y="261" width="0.4946%" height="15" fill="rgb(236,212,23)" fg:x="22" fg:w="6"/><text x="2.0637%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::copied::Copied&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.49%)</title><rect x="1.8137%" y="245" width="0.4946%" height="15" fill="rgb(242,79,21)" fg:x="22" fg:w="6"/><text x="2.0637%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (6 samples, 0.49%)</title><rect x="1.8137%" y="229" width="0.4946%" height="15" fill="rgb(211,96,35)" fg:x="22" fg:w="6"/><text x="2.0637%" y="239.50"></text></g><g><title>core::iter::adapters::copied::copy_fold::{{closure}} (6 samples, 0.49%)</title><rect x="1.8137%" y="213" width="0.4946%" height="15" fill="rgb(253,215,40)" fg:x="22" fg:w="6"/><text x="2.0637%" y="223.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (6 samples, 0.49%)</title><rect x="1.8137%" y="197" width="0.4946%" height="15" fill="rgb(211,81,21)" fg:x="22" fg:w="6"/><text x="2.0637%" y="207.50"></text></g><g><title>fastiron::cycle_finalize (8 samples, 0.66%)</title><rect x="1.7312%" y="517" width="0.6595%" height="15" fill="rgb(208,190,38)" fg:x="21" fg:w="8"/><text x="1.9812%" y="527.50"></text></g><g><title>fastiron::montecarlo::MonteCarlo&lt;T&gt;::update_spectrum (1 samples, 0.08%)</title><rect x="2.3083%" y="501" width="0.0824%" height="15" fill="rgb(235,213,38)" fg:x="28" fg:w="1"/><text x="2.5583%" y="511.50"></text></g><g><title>fastiron::montecarlo::MonteCarlo&lt;T&gt;::update_spectrum::{{closure}} (1 samples, 0.08%)</title><rect x="2.3083%" y="485" width="0.0824%" height="15" fill="rgb(237,122,38)" fg:x="28" fg:w="1"/><text x="2.5583%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1 samples, 0.08%)</title><rect x="2.3083%" y="469" width="0.0824%" height="15" fill="rgb(244,218,35)" fg:x="28" fg:w="1"/><text x="2.5583%" y="479.50"></text></g><g><title>fastiron::montecarlo::MonteCarlo&lt;T&gt;::update_spectrum::{{closure}}::{{closure}} (1 samples, 0.08%)</title><rect x="2.3083%" y="453" width="0.0824%" height="15" fill="rgb(240,68,47)" fg:x="28" fg:w="1"/><text x="2.5583%" y="463.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_energy_groups (1 samples, 0.08%)</title><rect x="2.3083%" y="437" width="0.0824%" height="15" fill="rgb(210,16,53)" fg:x="28" fg:w="1"/><text x="2.5583%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (1 samples, 0.08%)</title><rect x="2.3083%" y="421" width="0.0824%" height="15" fill="rgb(235,124,12)" fg:x="28" fg:w="1"/><text x="2.5583%" y="431.50"></text></g><g><title>fastiron::montecarlo::MonteCarlo&lt;T&gt;::clear_cross_section_cache (1 samples, 0.08%)</title><rect x="2.3908%" y="501" width="0.0824%" height="15" fill="rgb(224,169,11)" fg:x="29" fg:w="1"/><text x="2.6408%" y="511.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1 samples, 0.08%)</title><rect x="2.3908%" y="485" width="0.0824%" height="15" fill="rgb(250,166,2)" fg:x="29" fg:w="1"/><text x="2.6408%" y="495.50"></text></g><g><title>fastiron::montecarlo::MonteCarlo&lt;T&gt;::clear_cross_section_cache::{{closure}} (1 samples, 0.08%)</title><rect x="2.3908%" y="469" width="0.0824%" height="15" fill="rgb(242,216,29)" fg:x="29" fg:w="1"/><text x="2.6408%" y="479.50"></text></g><g><title>fastiron::geometry::mc_domain::MCDomain&lt;T&gt;::clear_cross_section_cache (1 samples, 0.08%)</title><rect x="2.3908%" y="453" width="0.0824%" height="15" fill="rgb(230,116,27)" fg:x="29" fg:w="1"/><text x="2.6408%" y="463.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1 samples, 0.08%)</title><rect x="2.3908%" y="437" width="0.0824%" height="15" fill="rgb(228,99,48)" fg:x="29" fg:w="1"/><text x="2.6408%" y="447.50"></text></g><g><title>fastiron::geometry::mc_domain::MCDomain&lt;T&gt;::clear_cross_section_cache::{{closure}} (1 samples, 0.08%)</title><rect x="2.3908%" y="421" width="0.0824%" height="15" fill="rgb(253,11,6)" fg:x="29" fg:w="1"/><text x="2.6408%" y="431.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::fill (1 samples, 0.08%)</title><rect x="2.3908%" y="405" width="0.0824%" height="15" fill="rgb(247,143,39)" fg:x="29" fg:w="1"/><text x="2.6408%" y="415.50"></text></g><g><title>&lt;[T] as core::slice::specialize::SpecFill&lt;T&gt;&gt;::spec_fill (1 samples, 0.08%)</title><rect x="2.3908%" y="389" width="0.0824%" height="15" fill="rgb(236,97,10)" fg:x="29" fg:w="1"/><text x="2.6408%" y="399.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.08%)</title><rect x="2.4732%" y="373" width="0.0824%" height="15" fill="rgb(233,208,19)" fg:x="30" fg:w="1"/><text x="2.7232%" y="383.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (2 samples, 0.16%)</title><rect x="2.4732%" y="469" width="0.1649%" height="15" fill="rgb(216,164,2)" fg:x="30" fg:w="2"/><text x="2.7232%" y="479.50"></text></g><g><title>fastiron::simulation::population_control::population_control_guts::{{closure}} (2 samples, 0.16%)</title><rect x="2.4732%" y="453" width="0.1649%" height="15" fill="rgb(220,129,5)" fg:x="30" fg:w="2"/><text x="2.7232%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.16%)</title><rect x="2.4732%" y="437" width="0.1649%" height="15" fill="rgb(242,17,10)" fg:x="30" fg:w="2"/><text x="2.7232%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.16%)</title><rect x="2.4732%" y="421" width="0.1649%" height="15" fill="rgb(242,107,0)" fg:x="30" fg:w="2"/><text x="2.7232%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (2 samples, 0.16%)</title><rect x="2.4732%" y="405" width="0.1649%" height="15" fill="rgb(251,28,31)" fg:x="30" fg:w="2"/><text x="2.7232%" y="415.50"></text></g><g><title>fastiron::simulation::population_control::population_control_guts::{{closure}}::{{closure}} (2 samples, 0.16%)</title><rect x="2.4732%" y="389" width="0.1649%" height="15" fill="rgb(233,223,10)" fg:x="30" fg:w="2"/><text x="2.7232%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.08%)</title><rect x="2.5556%" y="373" width="0.0824%" height="15" fill="rgb(215,21,27)" fg:x="31" fg:w="1"/><text x="2.8056%" y="383.50"></text></g><g><title>fastiron::simulation::population_control::population_control (4 samples, 0.33%)</title><rect x="2.4732%" y="501" width="0.3298%" height="15" fill="rgb(232,23,21)" fg:x="30" fg:w="4"/><text x="2.7232%" y="511.50"></text></g><g><title>fastiron::simulation::population_control::population_control_guts (4 samples, 0.33%)</title><rect x="2.4732%" y="485" width="0.3298%" height="15" fill="rgb(244,5,23)" fg:x="30" fg:w="4"/><text x="2.7232%" y="495.50"></text></g><g><title>fastiron::particles::particle_container::ParticleContainer&lt;T&gt;::clean_extra_vaults (2 samples, 0.16%)</title><rect x="2.6381%" y="469" width="0.1649%" height="15" fill="rgb(226,81,46)" fg:x="32" fg:w="2"/><text x="2.8881%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append (2 samples, 0.16%)</title><rect x="2.6381%" y="453" width="0.1649%" height="15" fill="rgb(247,70,30)" fg:x="32" fg:w="2"/><text x="2.8881%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.16%)</title><rect x="2.6381%" y="437" width="0.1649%" height="15" fill="rgb(212,68,19)" fg:x="32" fg:w="2"/><text x="2.8881%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.16%)</title><rect x="2.6381%" y="421" width="0.1649%" height="15" fill="rgb(240,187,13)" fg:x="32" fg:w="2"/><text x="2.8881%" y="431.50"></text></g><g><title>[libc.so.6] (2 samples, 0.16%)</title><rect x="2.6381%" y="405" width="0.1649%" height="15" fill="rgb(223,113,26)" fg:x="32" fg:w="2"/><text x="2.8881%" y="415.50"></text></g><g><title>fastiron::simulation::population_control::roulette_low_weight_particles (2 samples, 0.16%)</title><rect x="2.8030%" y="501" width="0.1649%" height="15" fill="rgb(206,192,2)" fg:x="34" fg:w="2"/><text x="3.0530%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut (2 samples, 0.16%)</title><rect x="2.8030%" y="485" width="0.1649%" height="15" fill="rgb(241,108,4)" fg:x="34" fg:w="2"/><text x="3.0530%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain_mut::process_loop (2 samples, 0.16%)</title><rect x="2.8030%" y="469" width="0.1649%" height="15" fill="rgb(247,173,49)" fg:x="34" fg:w="2"/><text x="3.0530%" y="479.50"></text></g><g><title>fastiron::simulation::population_control::roulette_low_weight_particles::{{closure}} (2 samples, 0.16%)</title><rect x="2.8030%" y="453" width="0.1649%" height="15" fill="rgb(224,114,35)" fg:x="34" fg:w="2"/><text x="3.0530%" y="463.50"></text></g><g><title>fastiron::main (1 samples, 0.08%)</title><rect x="2.9678%" y="181" width="0.0824%" height="15" fill="rgb(245,159,27)" fg:x="36" fg:w="1"/><text x="3.2178%" y="191.50"></text></g><g><title>fastiron::simulation::mct::cell_position_3dg (1 samples, 0.08%)</title><rect x="3.0503%" y="149" width="0.0824%" height="15" fill="rgb(245,172,44)" fg:x="37" fg:w="1"/><text x="3.3003%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.08%)</title><rect x="3.0503%" y="133" width="0.0824%" height="15" fill="rgb(236,23,11)" fg:x="37" fg:w="1"/><text x="3.3003%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="3.0503%" y="117" width="0.0824%" height="15" fill="rgb(205,117,38)" fg:x="37" fg:w="1"/><text x="3.3003%" y="127.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="3.0503%" y="101" width="0.0824%" height="15" fill="rgb(237,72,25)" fg:x="37" fg:w="1"/><text x="3.3003%" y="111.50"></text></g><g><title>fastiron::simulation::mct::cell_position_3dg::{{closure}} (1 samples, 0.08%)</title><rect x="3.0503%" y="85" width="0.0824%" height="15" fill="rgb(244,70,9)" fg:x="37" fg:w="1"/><text x="3.3003%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.08%)</title><rect x="3.0503%" y="69" width="0.0824%" height="15" fill="rgb(217,125,39)" fg:x="37" fg:w="1"/><text x="3.3003%" y="79.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.08%)</title><rect x="3.0503%" y="53" width="0.0824%" height="15" fill="rgb(235,36,10)" fg:x="37" fg:w="1"/><text x="3.3003%" y="63.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.08%)</title><rect x="3.0503%" y="37" width="0.0824%" height="15" fill="rgb(251,123,47)" fg:x="37" fg:w="1"/><text x="3.3003%" y="47.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Sub&gt;::sub (1 samples, 0.08%)</title><rect x="3.1327%" y="133" width="0.0824%" height="15" fill="rgb(221,13,13)" fg:x="38" fg:w="1"/><text x="3.3827%" y="143.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (1 samples, 0.08%)</title><rect x="3.1327%" y="117" width="0.0824%" height="15" fill="rgb(238,131,9)" fg:x="38" fg:w="1"/><text x="3.3827%" y="127.50"></text></g><g><title>fastiron::cycle_init (11 samples, 0.91%)</title><rect x="2.3908%" y="517" width="0.9068%" height="15" fill="rgb(211,50,8)" fg:x="29" fg:w="11"/><text x="2.6408%" y="527.50"></text></g><g><title>fastiron::simulation::population_control::source_now (4 samples, 0.33%)</title><rect x="2.9678%" y="501" width="0.3298%" height="15" fill="rgb(245,182,24)" fg:x="36" fg:w="4"/><text x="3.2178%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.33%)</title><rect x="2.9678%" y="485" width="0.3298%" height="15" fill="rgb(242,14,37)" fg:x="36" fg:w="4"/><text x="3.2178%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.33%)</title><rect x="2.9678%" y="469" width="0.3298%" height="15" fill="rgb(246,228,12)" fg:x="36" fg:w="4"/><text x="3.2178%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.33%)</title><rect x="2.9678%" y="453" width="0.3298%" height="15" fill="rgb(213,55,15)" fg:x="36" fg:w="4"/><text x="3.2178%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (4 samples, 0.33%)</title><rect x="2.9678%" y="437" width="0.3298%" height="15" fill="rgb(209,9,3)" fg:x="36" fg:w="4"/><text x="3.2178%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4 samples, 0.33%)</title><rect x="2.9678%" y="421" width="0.3298%" height="15" fill="rgb(230,59,30)" fg:x="36" fg:w="4"/><text x="3.2178%" y="431.50"></text></g><g><title>fastiron::simulation::population_control::source_now::{{closure}} (4 samples, 0.33%)</title><rect x="2.9678%" y="405" width="0.3298%" height="15" fill="rgb(209,121,21)" fg:x="36" fg:w="4"/><text x="3.2178%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.33%)</title><rect x="2.9678%" y="389" width="0.3298%" height="15" fill="rgb(220,109,13)" fg:x="36" fg:w="4"/><text x="3.2178%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.33%)</title><rect x="2.9678%" y="373" width="0.3298%" height="15" fill="rgb(232,18,1)" fg:x="36" fg:w="4"/><text x="3.2178%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.33%)</title><rect x="2.9678%" y="357" width="0.3298%" height="15" fill="rgb(215,41,42)" fg:x="36" fg:w="4"/><text x="3.2178%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (4 samples, 0.33%)</title><rect x="2.9678%" y="341" width="0.3298%" height="15" fill="rgb(224,123,36)" fg:x="36" fg:w="4"/><text x="3.2178%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (4 samples, 0.33%)</title><rect x="2.9678%" y="325" width="0.3298%" height="15" fill="rgb(240,125,3)" fg:x="36" fg:w="4"/><text x="3.2178%" y="335.50"></text></g><g><title>fastiron::simulation::population_control::source_now::{{closure}}::{{closure}} (4 samples, 0.33%)</title><rect x="2.9678%" y="309" width="0.3298%" height="15" fill="rgb(205,98,50)" fg:x="36" fg:w="4"/><text x="3.2178%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (4 samples, 0.33%)</title><rect x="2.9678%" y="293" width="0.3298%" height="15" fill="rgb(205,185,37)" fg:x="36" fg:w="4"/><text x="3.2178%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.33%)</title><rect x="2.9678%" y="277" width="0.3298%" height="15" fill="rgb(238,207,15)" fg:x="36" fg:w="4"/><text x="3.2178%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (4 samples, 0.33%)</title><rect x="2.9678%" y="261" width="0.3298%" height="15" fill="rgb(213,199,42)" fg:x="36" fg:w="4"/><text x="3.2178%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (4 samples, 0.33%)</title><rect x="2.9678%" y="245" width="0.3298%" height="15" fill="rgb(235,201,11)" fg:x="36" fg:w="4"/><text x="3.2178%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (4 samples, 0.33%)</title><rect x="2.9678%" y="229" width="0.3298%" height="15" fill="rgb(207,46,11)" fg:x="36" fg:w="4"/><text x="3.2178%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (4 samples, 0.33%)</title><rect x="2.9678%" y="213" width="0.3298%" height="15" fill="rgb(241,35,35)" fg:x="36" fg:w="4"/><text x="3.2178%" y="223.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (4 samples, 0.33%)</title><rect x="2.9678%" y="197" width="0.3298%" height="15" fill="rgb(243,32,47)" fg:x="36" fg:w="4"/><text x="3.2178%" y="207.50"></text></g><g><title>fastiron::simulation::population_control::source_now::{{closure}}::{{closure}}::{{closure}} (3 samples, 0.25%)</title><rect x="3.0503%" y="181" width="0.2473%" height="15" fill="rgb(247,202,23)" fg:x="37" fg:w="3"/><text x="3.3003%" y="191.50"></text></g><g><title>fastiron::simulation::mct::generate_coordinate_3dg (3 samples, 0.25%)</title><rect x="3.0503%" y="165" width="0.2473%" height="15" fill="rgb(219,102,11)" fg:x="37" fg:w="3"/><text x="3.3003%" y="175.50"></text></g><g><title>fastiron::simulation::mct::mct_cell_volume_3dg_vector_tetdet (2 samples, 0.16%)</title><rect x="3.1327%" y="149" width="0.1649%" height="15" fill="rgb(243,110,44)" fg:x="38" fg:w="2"/><text x="3.3827%" y="159.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::dot (1 samples, 0.08%)</title><rect x="3.2152%" y="133" width="0.0824%" height="15" fill="rgb(222,74,54)" fg:x="39" fg:w="1"/><text x="3.4652%" y="143.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_energy_groups (2 samples, 0.16%)</title><rect x="3.3800%" y="453" width="0.1649%" height="15" fill="rgb(216,99,12)" fg:x="41" fg:w="2"/><text x="3.6300%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.08%)</title><rect x="3.4625%" y="437" width="0.0824%" height="15" fill="rgb(226,22,26)" fg:x="42" fg:w="1"/><text x="3.7125%" y="447.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.08%)</title><rect x="3.4625%" y="421" width="0.0824%" height="15" fill="rgb(217,163,10)" fg:x="42" fg:w="1"/><text x="3.7125%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.08%)</title><rect x="3.4625%" y="405" width="0.0824%" height="15" fill="rgb(213,25,53)" fg:x="42" fg:w="1"/><text x="3.7125%" y="415.50"></text></g><g><title>fastiron::main (2 samples, 0.16%)</title><rect x="3.5449%" y="453" width="0.1649%" height="15" fill="rgb(252,105,26)" fg:x="43" fg:w="2"/><text x="3.7949%" y="463.50"></text></g><g><title>fastiron::particles::mc_particle::MCParticle&lt;T&gt;::new (3 samples, 0.25%)</title><rect x="3.7098%" y="453" width="0.2473%" height="15" fill="rgb(220,39,43)" fg:x="45" fg:w="3"/><text x="3.9598%" y="463.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::MCBaseParticle&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.7923%" y="437" width="0.1649%" height="15" fill="rgb(229,68,48)" fg:x="46" fg:w="2"/><text x="4.0423%" y="447.50"></text></g><g><title>&lt;fastiron::particles::mc_base_particle::Species as core::clone::Clone&gt;::clone (2 samples, 0.16%)</title><rect x="3.7923%" y="421" width="0.1649%" height="15" fill="rgb(252,8,32)" fg:x="46" fg:w="2"/><text x="4.0423%" y="431.50"></text></g><g><title>fastiron::main (8 samples, 0.66%)</title><rect x="3.9571%" y="437" width="0.6595%" height="15" fill="rgb(223,20,43)" fg:x="48" fg:w="8"/><text x="4.2071%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (4 samples, 0.33%)</title><rect x="5.1113%" y="421" width="0.3298%" height="15" fill="rgb(229,81,49)" fg:x="62" fg:w="4"/><text x="5.3613%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.33%)</title><rect x="5.1113%" y="405" width="0.3298%" height="15" fill="rgb(236,28,36)" fg:x="62" fg:w="4"/><text x="5.3613%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.33%)</title><rect x="5.1113%" y="389" width="0.3298%" height="15" fill="rgb(249,185,26)" fg:x="62" fg:w="4"/><text x="5.3613%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::SubAssign&gt;::sub_assign (26 samples, 2.14%)</title><rect x="5.4411%" y="421" width="2.1434%" height="15" fill="rgb(249,174,33)" fg:x="66" fg:w="26"/><text x="5.6911%" y="431.50">&lt;..</text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::is_sign_negative (26 samples, 2.14%)</title><rect x="7.5845%" y="421" width="2.1434%" height="15" fill="rgb(233,201,37)" fg:x="92" fg:w="26"/><text x="7.8345%" y="431.50">&lt;..</text></g><g><title>core::f64::&lt;impl f64&gt;::is_sign_negative (26 samples, 2.14%)</title><rect x="7.5845%" y="405" width="2.1434%" height="15" fill="rgb(221,78,26)" fg:x="92" fg:w="26"/><text x="7.8345%" y="415.50">c..</text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.08%)</title><rect x="9.8928%" y="389" width="0.0824%" height="15" fill="rgb(250,127,30)" fg:x="120" fg:w="1"/><text x="10.1428%" y="399.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1 samples, 0.08%)</title><rect x="9.8928%" y="373" width="0.0824%" height="15" fill="rgb(230,49,44)" fg:x="120" fg:w="1"/><text x="10.1428%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (7 samples, 0.58%)</title><rect x="9.9753%" y="389" width="0.5771%" height="15" fill="rgb(229,67,23)" fg:x="121" fg:w="7"/><text x="10.2253%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (11 samples, 0.91%)</title><rect x="9.7279%" y="421" width="0.9068%" height="15" fill="rgb(249,83,47)" fg:x="118" fg:w="11"/><text x="9.9779%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (11 samples, 0.91%)</title><rect x="9.7279%" y="405" width="0.9068%" height="15" fill="rgb(215,43,3)" fg:x="118" fg:w="11"/><text x="9.9779%" y="415.50"></text></g><g><title>fastiron::main (1 samples, 0.08%)</title><rect x="10.5523%" y="389" width="0.0824%" height="15" fill="rgb(238,154,13)" fg:x="128" fg:w="1"/><text x="10.8023%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.41%)</title><rect x="10.6348%" y="373" width="0.4122%" height="15" fill="rgb(219,56,2)" fg:x="129" fg:w="5"/><text x="10.8848%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.41%)</title><rect x="10.6348%" y="357" width="0.4122%" height="15" fill="rgb(233,0,4)" fg:x="129" fg:w="5"/><text x="10.8848%" y="367.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.41%)</title><rect x="10.6348%" y="341" width="0.4122%" height="15" fill="rgb(235,30,7)" fg:x="129" fg:w="5"/><text x="10.8848%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.41%)</title><rect x="10.6348%" y="325" width="0.4122%" height="15" fill="rgb(250,79,13)" fg:x="129" fg:w="5"/><text x="10.8848%" y="335.50"></text></g><g><title>__GI___libc_free (5 samples, 0.41%)</title><rect x="10.6348%" y="309" width="0.4122%" height="15" fill="rgb(211,146,34)" fg:x="129" fg:w="5"/><text x="10.8848%" y="319.50"></text></g><g><title>_int_free (4 samples, 0.33%)</title><rect x="10.7172%" y="293" width="0.3298%" height="15" fill="rgb(228,22,38)" fg:x="130" fg:w="4"/><text x="10.9672%" y="303.50"></text></g><g><title>tcache_put (1 samples, 0.08%)</title><rect x="10.9646%" y="277" width="0.0824%" height="15" fill="rgb(235,168,5)" fg:x="133" fg:w="1"/><text x="11.2146%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (7 samples, 0.58%)</title><rect x="10.6348%" y="421" width="0.5771%" height="15" fill="rgb(221,155,16)" fg:x="129" fg:w="7"/><text x="10.8848%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (7 samples, 0.58%)</title><rect x="10.6348%" y="405" width="0.5771%" height="15" fill="rgb(215,215,53)" fg:x="129" fg:w="7"/><text x="10.8848%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.58%)</title><rect x="10.6348%" y="389" width="0.5771%" height="15" fill="rgb(223,4,10)" fg:x="129" fg:w="7"/><text x="10.8848%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.16%)</title><rect x="11.0470%" y="373" width="0.1649%" height="15" fill="rgb(234,103,6)" fg:x="134" fg:w="2"/><text x="11.2970%" y="383.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_energy_groups (6 samples, 0.49%)</title><rect x="11.2119%" y="421" width="0.4946%" height="15" fill="rgb(227,97,0)" fg:x="136" fg:w="6"/><text x="11.4619%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.08%)</title><rect x="11.6241%" y="405" width="0.0824%" height="15" fill="rgb(234,150,53)" fg:x="141" fg:w="1"/><text x="11.8741%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.08%)</title><rect x="11.6241%" y="389" width="0.0824%" height="15" fill="rgb(228,201,54)" fg:x="141" fg:w="1"/><text x="11.8741%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.08%)</title><rect x="11.6241%" y="373" width="0.0824%" height="15" fill="rgb(222,22,37)" fg:x="141" fg:w="1"/><text x="11.8741%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.25%)</title><rect x="11.7065%" y="405" width="0.2473%" height="15" fill="rgb(237,53,32)" fg:x="142" fg:w="3"/><text x="11.9565%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.25%)</title><rect x="11.7065%" y="389" width="0.2473%" height="15" fill="rgb(233,25,53)" fg:x="142" fg:w="3"/><text x="11.9565%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.25%)</title><rect x="11.7065%" y="373" width="0.2473%" height="15" fill="rgb(210,40,34)" fg:x="142" fg:w="3"/><text x="11.9565%" y="383.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_number_reactions (5 samples, 0.41%)</title><rect x="11.7065%" y="421" width="0.4122%" height="15" fill="rgb(241,220,44)" fg:x="142" fg:w="5"/><text x="11.9565%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (2 samples, 0.16%)</title><rect x="11.9538%" y="405" width="0.1649%" height="15" fill="rgb(235,28,35)" fg:x="145" fg:w="2"/><text x="12.2038%" y="415.50"></text></g><g><title>checked_request2size (1 samples, 0.08%)</title><rect x="12.3660%" y="261" width="0.0824%" height="15" fill="rgb(210,56,17)" fg:x="150" fg:w="1"/><text x="12.6160%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.33%)</title><rect x="12.2012%" y="357" width="0.3298%" height="15" fill="rgb(224,130,29)" fg:x="148" fg:w="4"/><text x="12.4512%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.33%)</title><rect x="12.2012%" y="341" width="0.3298%" height="15" fill="rgb(235,212,8)" fg:x="148" fg:w="4"/><text x="12.4512%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.33%)</title><rect x="12.2012%" y="325" width="0.3298%" height="15" fill="rgb(223,33,50)" fg:x="148" fg:w="4"/><text x="12.4512%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.33%)</title><rect x="12.2012%" y="309" width="0.3298%" height="15" fill="rgb(219,149,13)" fg:x="148" fg:w="4"/><text x="12.4512%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.33%)</title><rect x="12.2012%" y="293" width="0.3298%" height="15" fill="rgb(250,156,29)" fg:x="148" fg:w="4"/><text x="12.4512%" y="303.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.16%)</title><rect x="12.3660%" y="277" width="0.1649%" height="15" fill="rgb(216,193,19)" fg:x="150" fg:w="2"/><text x="12.6160%" y="287.50"></text></g><g><title>tcache_get (1 samples, 0.08%)</title><rect x="12.4485%" y="261" width="0.0824%" height="15" fill="rgb(216,135,14)" fg:x="151" fg:w="1"/><text x="12.6985%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::Extend&lt;&amp;T&gt;&gt;::extend (5 samples, 0.41%)</title><rect x="12.2012%" y="405" width="0.4122%" height="15" fill="rgb(241,47,5)" fg:x="148" fg:w="5"/><text x="12.4512%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.41%)</title><rect x="12.2012%" y="389" width="0.4122%" height="15" fill="rgb(233,42,35)" fg:x="148" fg:w="5"/><text x="12.4512%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5 samples, 0.41%)</title><rect x="12.2012%" y="373" width="0.4122%" height="15" fill="rgb(231,13,6)" fg:x="148" fg:w="5"/><text x="12.4512%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.08%)</title><rect x="12.5309%" y="357" width="0.0824%" height="15" fill="rgb(207,181,40)" fg:x="152" fg:w="1"/><text x="12.7809%" y="367.50"></text></g><g><title>[libc.so.6] (1 samples, 0.08%)</title><rect x="12.5309%" y="341" width="0.0824%" height="15" fill="rgb(254,173,49)" fg:x="152" fg:w="1"/><text x="12.7809%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (1 samples, 0.08%)</title><rect x="12.6134%" y="405" width="0.0824%" height="15" fill="rgb(221,1,38)" fg:x="153" fg:w="1"/><text x="12.8634%" y="415.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1 samples, 0.08%)</title><rect x="12.6958%" y="405" width="0.0824%" height="15" fill="rgb(206,124,46)" fg:x="154" fg:w="1"/><text x="12.9458%" y="415.50"></text></g><g><title>&lt;f64 as num_traits::cast::ToPrimitive&gt;::to_usize (1 samples, 0.08%)</title><rect x="12.7782%" y="405" width="0.0824%" height="15" fill="rgb(249,21,11)" fg:x="155" fg:w="1"/><text x="13.0282%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.08%)</title><rect x="12.9431%" y="341" width="0.0824%" height="15" fill="rgb(222,201,40)" fg:x="157" fg:w="1"/><text x="13.1931%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.08%)</title><rect x="12.9431%" y="325" width="0.0824%" height="15" fill="rgb(235,61,29)" fg:x="157" fg:w="1"/><text x="13.1931%" y="335.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.74%)</title><rect x="13.0256%" y="341" width="0.7420%" height="15" fill="rgb(219,207,3)" fg:x="158" fg:w="9"/><text x="13.2756%" y="351.50"></text></g><g><title>tcache_get (2 samples, 0.16%)</title><rect x="13.6026%" y="325" width="0.1649%" height="15" fill="rgb(222,56,46)" fg:x="165" fg:w="2"/><text x="13.8526%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (12 samples, 0.99%)</title><rect x="12.8607%" y="405" width="0.9893%" height="15" fill="rgb(239,76,54)" fg:x="156" fg:w="12"/><text x="13.1107%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.99%)</title><rect x="12.8607%" y="389" width="0.9893%" height="15" fill="rgb(231,124,27)" fg:x="156" fg:w="12"/><text x="13.1107%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (12 samples, 0.99%)</title><rect x="12.8607%" y="373" width="0.9893%" height="15" fill="rgb(249,195,6)" fg:x="156" fg:w="12"/><text x="13.1107%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 0.99%)</title><rect x="12.8607%" y="357" width="0.9893%" height="15" fill="rgb(237,174,47)" fg:x="156" fg:w="12"/><text x="13.1107%" y="367.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.08%)</title><rect x="13.7675%" y="341" width="0.0824%" height="15" fill="rgb(206,201,31)" fg:x="167" fg:w="1"/><text x="14.0175%" y="351.50"></text></g><g><title>alloc::vec::from_elem (2 samples, 0.16%)</title><rect x="13.8500%" y="405" width="0.1649%" height="15" fill="rgb(231,57,52)" fg:x="168" fg:w="2"/><text x="14.1000%" y="415.50"></text></g><g><title>&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2 samples, 0.16%)</title><rect x="13.8500%" y="389" width="0.1649%" height="15" fill="rgb(248,177,22)" fg:x="168" fg:w="2"/><text x="14.1000%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (2 samples, 0.16%)</title><rect x="13.8500%" y="373" width="0.1649%" height="15" fill="rgb(215,211,37)" fg:x="168" fg:w="2"/><text x="14.1000%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.16%)</title><rect x="13.8500%" y="357" width="0.1649%" height="15" fill="rgb(241,128,51)" fg:x="168" fg:w="2"/><text x="14.1000%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (2 samples, 0.16%)</title><rect x="13.8500%" y="341" width="0.1649%" height="15" fill="rgb(227,165,31)" fg:x="168" fg:w="2"/><text x="14.1000%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.16%)</title><rect x="13.8500%" y="325" width="0.1649%" height="15" fill="rgb(228,167,24)" fg:x="168" fg:w="2"/><text x="14.1000%" y="335.50"></text></g><g><title>alloc::alloc::alloc_zeroed (2 samples, 0.16%)</title><rect x="13.8500%" y="309" width="0.1649%" height="15" fill="rgb(228,143,12)" fg:x="168" fg:w="2"/><text x="14.1000%" y="319.50"></text></g><g><title>__rdl_alloc_zeroed (2 samples, 0.16%)</title><rect x="13.8500%" y="293" width="0.1649%" height="15" fill="rgb(249,149,8)" fg:x="168" fg:w="2"/><text x="14.1000%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (2 samples, 0.16%)</title><rect x="13.8500%" y="277" width="0.1649%" height="15" fill="rgb(243,35,44)" fg:x="168" fg:w="2"/><text x="14.1000%" y="287.50"></text></g><g><title>__libc_calloc (2 samples, 0.16%)</title><rect x="13.8500%" y="261" width="0.1649%" height="15" fill="rgb(246,89,9)" fg:x="168" fg:w="2"/><text x="14.1000%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (1 samples, 0.08%)</title><rect x="14.0148%" y="341" width="0.0824%" height="15" fill="rgb(233,213,13)" fg:x="170" fg:w="1"/><text x="14.2648%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.25%)</title><rect x="14.0148%" y="405" width="0.2473%" height="15" fill="rgb(233,141,41)" fg:x="170" fg:w="3"/><text x="14.2648%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.25%)</title><rect x="14.0148%" y="389" width="0.2473%" height="15" fill="rgb(239,167,4)" fg:x="170" fg:w="3"/><text x="14.2648%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3 samples, 0.25%)</title><rect x="14.0148%" y="373" width="0.2473%" height="15" fill="rgb(209,217,16)" fg:x="170" fg:w="3"/><text x="14.2648%" y="383.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearDataReaction&lt;T&gt;::sample_collision::{{closure}} (3 samples, 0.25%)</title><rect x="14.0148%" y="357" width="0.2473%" height="15" fill="rgb(219,88,35)" fg:x="170" fg:w="3"/><text x="14.2648%" y="367.50"></text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (2 samples, 0.16%)</title><rect x="14.0973%" y="341" width="0.1649%" height="15" fill="rgb(220,193,23)" fg:x="171" fg:w="2"/><text x="14.3473%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (1 samples, 0.08%)</title><rect x="14.2622%" y="405" width="0.0824%" height="15" fill="rgb(230,90,52)" fg:x="173" fg:w="1"/><text x="14.5122%" y="415.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (1 samples, 0.08%)</title><rect x="14.2622%" y="389" width="0.0824%" height="15" fill="rgb(252,106,19)" fg:x="173" fg:w="1"/><text x="14.5122%" y="399.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.08%)</title><rect x="14.2622%" y="373" width="0.0824%" height="15" fill="rgb(206,74,20)" fg:x="173" fg:w="1"/><text x="14.5122%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.08%)</title><rect x="14.2622%" y="357" width="0.0824%" height="15" fill="rgb(230,138,44)" fg:x="173" fg:w="1"/><text x="14.5122%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.08%)</title><rect x="14.2622%" y="341" width="0.0824%" height="15" fill="rgb(235,182,43)" fg:x="173" fg:w="1"/><text x="14.5122%" y="351.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.08%)</title><rect x="14.2622%" y="325" width="0.0824%" height="15" fill="rgb(242,16,51)" fg:x="173" fg:w="1"/><text x="14.5122%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.08%)</title><rect x="14.2622%" y="309" width="0.0824%" height="15" fill="rgb(248,9,4)" fg:x="173" fg:w="1"/><text x="14.5122%" y="319.50"></text></g><g><title>__GI___libc_free (1 samples, 0.08%)</title><rect x="14.2622%" y="293" width="0.0824%" height="15" fill="rgb(210,31,22)" fg:x="173" fg:w="1"/><text x="14.5122%" y="303.50"></text></g><g><title>_int_free (1 samples, 0.08%)</title><rect x="14.2622%" y="277" width="0.0824%" height="15" fill="rgb(239,54,39)" fg:x="173" fg:w="1"/><text x="14.5122%" y="287.50"></text></g><g><title>fastiron::main (2 samples, 0.16%)</title><rect x="14.3446%" y="405" width="0.1649%" height="15" fill="rgb(230,99,41)" fg:x="174" fg:w="2"/><text x="14.5946%" y="415.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearDataReaction&lt;T&gt;::sample_collision (30 samples, 2.47%)</title><rect x="12.1187%" y="421" width="2.4732%" height="15" fill="rgb(253,106,12)" fg:x="147" fg:w="30"/><text x="12.3687%" y="431.50">fa..</text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (1 samples, 0.08%)</title><rect x="14.5095%" y="405" width="0.0824%" height="15" fill="rgb(213,46,41)" fg:x="176" fg:w="1"/><text x="14.7595%" y="415.50"></text></g><g><title>fastiron::main (9 samples, 0.74%)</title><rect x="14.5919%" y="421" width="0.7420%" height="15" fill="rgb(215,133,35)" fg:x="177" fg:w="9"/><text x="14.8419%" y="431.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (1 samples, 0.08%)</title><rect x="15.3339%" y="405" width="0.0824%" height="15" fill="rgb(213,28,5)" fg:x="186" fg:w="1"/><text x="15.5839%" y="415.50"></text></g><g><title>__ieee754_log_fma (7 samples, 0.58%)</title><rect x="15.4163%" y="341" width="0.5771%" height="15" fill="rgb(215,77,49)" fg:x="187" fg:w="7"/><text x="15.6663%" y="351.50"></text></g><g><title>__log (1 samples, 0.08%)</title><rect x="15.9934%" y="341" width="0.0824%" height="15" fill="rgb(248,100,22)" fg:x="194" fg:w="1"/><text x="16.2434%" y="351.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::ln (9 samples, 0.74%)</title><rect x="15.4163%" y="405" width="0.7420%" height="15" fill="rgb(208,67,9)" fg:x="187" fg:w="9"/><text x="15.6663%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln (9 samples, 0.74%)</title><rect x="15.4163%" y="389" width="0.7420%" height="15" fill="rgb(219,133,21)" fg:x="187" fg:w="9"/><text x="15.6663%" y="399.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::log_wrapper (9 samples, 0.74%)</title><rect x="15.4163%" y="373" width="0.7420%" height="15" fill="rgb(246,46,29)" fg:x="187" fg:w="9"/><text x="15.6663%" y="383.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::ln::{{closure}} (9 samples, 0.74%)</title><rect x="15.4163%" y="357" width="0.7420%" height="15" fill="rgb(246,185,52)" fg:x="187" fg:w="9"/><text x="15.6663%" y="367.50"></text></g><g><title>cij (1 samples, 0.08%)</title><rect x="16.0758%" y="341" width="0.0824%" height="15" fill="rgb(252,136,11)" fg:x="195" fg:w="1"/><text x="16.3258%" y="351.50"></text></g><g><title>do_cos (5 samples, 0.41%)</title><rect x="16.4880%" y="357" width="0.4122%" height="15" fill="rgb(219,138,53)" fg:x="200" fg:w="5"/><text x="16.7380%" y="367.50"></text></g><g><title>do_sin (14 samples, 1.15%)</title><rect x="16.9002%" y="357" width="1.1542%" height="15" fill="rgb(211,51,23)" fg:x="205" fg:w="14"/><text x="17.1502%" y="367.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::sin (28 samples, 2.31%)</title><rect x="16.1583%" y="405" width="2.3083%" height="15" fill="rgb(247,221,28)" fg:x="196" fg:w="28"/><text x="16.4083%" y="415.50">&lt;..</text></g><g><title>std::f64::&lt;impl f64&gt;::sin (28 samples, 2.31%)</title><rect x="16.1583%" y="389" width="2.3083%" height="15" fill="rgb(251,222,45)" fg:x="196" fg:w="28"/><text x="16.4083%" y="399.50">s..</text></g><g><title>__sincos (28 samples, 2.31%)</title><rect x="16.1583%" y="373" width="2.3083%" height="15" fill="rgb(217,162,53)" fg:x="196" fg:w="28"/><text x="16.4083%" y="383.50">_..</text></g><g><title>reduce_sincos (5 samples, 0.41%)</title><rect x="18.0544%" y="357" width="0.4122%" height="15" fill="rgb(229,93,14)" fg:x="219" fg:w="5"/><text x="18.3044%" y="367.50"></text></g><g><title>fastiron::main (1 samples, 0.08%)</title><rect x="18.4666%" y="389" width="0.0824%" height="15" fill="rgb(209,67,49)" fg:x="224" fg:w="1"/><text x="18.7166%" y="399.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::sqrt (6 samples, 0.49%)</title><rect x="18.4666%" y="405" width="0.4946%" height="15" fill="rgb(213,87,29)" fg:x="224" fg:w="6"/><text x="18.7166%" y="415.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (5 samples, 0.41%)</title><rect x="18.5491%" y="389" width="0.4122%" height="15" fill="rgb(205,151,52)" fg:x="225" fg:w="5"/><text x="18.7991%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (4 samples, 0.33%)</title><rect x="18.9613%" y="389" width="0.3298%" height="15" fill="rgb(253,215,39)" fg:x="230" fg:w="4"/><text x="19.2113%" y="399.50"></text></g><g><title>fastiron::data::direction_cosine::DirectionCosine&lt;T&gt;::rotate_3d_vector (6 samples, 0.49%)</title><rect x="18.9613%" y="405" width="0.4946%" height="15" fill="rgb(221,220,41)" fg:x="230" fg:w="6"/><text x="19.2113%" y="415.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (2 samples, 0.16%)</title><rect x="19.2910%" y="389" width="0.1649%" height="15" fill="rgb(218,133,21)" fg:x="234" fg:w="2"/><text x="19.5410%" y="399.50"></text></g><g><title>fastiron::main (1 samples, 0.08%)</title><rect x="19.4559%" y="405" width="0.0824%" height="15" fill="rgb(221,193,43)" fg:x="236" fg:w="1"/><text x="19.7059%" y="415.50"></text></g><g><title>fastiron::simulation::collision_event::update_trajectory (53 samples, 4.37%)</title><rect x="15.3339%" y="421" width="4.3693%" height="15" fill="rgb(240,128,52)" fg:x="186" fg:w="53"/><text x="15.5839%" y="431.50">fasti..</text></g><g><title>fastiron::utils::mc_rng_state::rng_sample (2 samples, 0.16%)</title><rect x="19.5383%" y="405" width="0.1649%" height="15" fill="rgb(253,114,12)" fg:x="237" fg:w="2"/><text x="19.7883%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::overflowing_mul (1 samples, 0.08%)</title><rect x="19.6208%" y="389" width="0.0824%" height="15" fill="rgb(215,223,47)" fg:x="238" fg:w="1"/><text x="19.8708%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (10 samples, 0.82%)</title><rect x="24.4847%" y="405" width="0.8244%" height="15" fill="rgb(248,225,23)" fg:x="297" fg:w="10"/><text x="24.7347%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (10 samples, 0.82%)</title><rect x="24.4847%" y="389" width="0.8244%" height="15" fill="rgb(250,108,0)" fg:x="297" fg:w="10"/><text x="24.7347%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (10 samples, 0.82%)</title><rect x="24.4847%" y="373" width="0.8244%" height="15" fill="rgb(228,208,7)" fg:x="297" fg:w="10"/><text x="24.7347%" y="383.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (52 samples, 4.29%)</title><rect x="25.3092%" y="405" width="4.2869%" height="15" fill="rgb(244,45,10)" fg:x="307" fg:w="52"/><text x="25.5592%" y="415.50">&lt;f64 ..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f64&gt;::eq (1 samples, 0.08%)</title><rect x="29.5960%" y="405" width="0.0824%" height="15" fill="rgb(207,125,25)" fg:x="359" fg:w="1"/><text x="29.8460%" y="415.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_reaction_cross_section (39 samples, 3.22%)</title><rect x="29.6785%" y="405" width="3.2152%" height="15" fill="rgb(210,195,18)" fg:x="360" fg:w="39"/><text x="29.9285%" y="415.50">fas..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (24 samples, 1.98%)</title><rect x="30.9151%" y="389" width="1.9786%" height="15" fill="rgb(249,80,12)" fg:x="375" fg:w="24"/><text x="31.1651%" y="399.50">&lt;..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (24 samples, 1.98%)</title><rect x="30.9151%" y="373" width="1.9786%" height="15" fill="rgb(221,65,9)" fg:x="375" fg:w="24"/><text x="31.1651%" y="383.50">c..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (24 samples, 1.98%)</title><rect x="30.9151%" y="357" width="1.9786%" height="15" fill="rgb(235,49,36)" fg:x="375" fg:w="24"/><text x="31.1651%" y="367.50">&lt;..</text></g><g><title>fastiron::simulation::collision_event::collision_event (351 samples, 28.94%)</title><rect x="4.6167%" y="437" width="28.9365%" height="15" fill="rgb(225,32,20)" fg:x="56" fg:w="351"/><text x="4.8667%" y="447.50">fastiron::simulation::collision_event::collisio..</text></g><g><title>fastiron::simulation::macro_cross_section::macroscopic_cross_section (168 samples, 13.85%)</title><rect x="19.7032%" y="421" width="13.8500%" height="15" fill="rgb(215,141,46)" fg:x="239" fg:w="168"/><text x="19.9532%" y="431.50">fastiron::simulation:..</text></g><g><title>fastiron::main (8 samples, 0.66%)</title><rect x="32.8937%" y="405" width="0.6595%" height="15" fill="rgb(250,160,47)" fg:x="399" fg:w="8"/><text x="33.1437%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.08%)</title><rect x="33.9654%" y="421" width="0.0824%" height="15" fill="rgb(216,222,40)" fg:x="412" fg:w="1"/><text x="34.2154%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.08%)</title><rect x="33.9654%" y="405" width="0.0824%" height="15" fill="rgb(234,217,39)" fg:x="412" fg:w="1"/><text x="34.2154%" y="415.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.08%)</title><rect x="33.9654%" y="389" width="0.0824%" height="15" fill="rgb(207,178,40)" fg:x="412" fg:w="1"/><text x="34.2154%" y="399.50"></text></g><g><title>fastiron::simulation::mc_facet_crossing_event::facet_crossing_event (8 samples, 0.66%)</title><rect x="33.5532%" y="437" width="0.6595%" height="15" fill="rgb(221,136,13)" fg:x="407" fg:w="8"/><text x="33.8032%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (2 samples, 0.16%)</title><rect x="34.0478%" y="421" width="0.1649%" height="15" fill="rgb(249,199,10)" fg:x="413" fg:w="2"/><text x="34.2978%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 0.08%)</title><rect x="36.2737%" y="421" width="0.0824%" height="15" fill="rgb(249,222,13)" fg:x="440" fg:w="1"/><text x="36.5237%" y="431.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 0.08%)</title><rect x="36.2737%" y="405" width="0.0824%" height="15" fill="rgb(244,185,38)" fg:x="440" fg:w="1"/><text x="36.5237%" y="415.50"></text></g><g><title>fastiron::main (1 samples, 0.08%)</title><rect x="36.2737%" y="389" width="0.0824%" height="15" fill="rgb(236,202,9)" fg:x="440" fg:w="1"/><text x="36.5237%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (34 samples, 2.80%)</title><rect x="36.3561%" y="421" width="2.8030%" height="15" fill="rgb(250,229,37)" fg:x="441" fg:w="34"/><text x="36.6061%" y="431.50">&lt;f..</text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (9 samples, 0.74%)</title><rect x="39.1591%" y="421" width="0.7420%" height="15" fill="rgb(206,174,23)" fg:x="475" fg:w="9"/><text x="39.4091%" y="431.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1 samples, 0.08%)</title><rect x="39.9011%" y="421" width="0.0824%" height="15" fill="rgb(211,33,43)" fg:x="484" fg:w="1"/><text x="40.1511%" y="431.50"></text></g><g><title>&lt;f64 as core::ops::arith::SubAssign&gt;::sub_assign (6 samples, 0.49%)</title><rect x="39.9835%" y="421" width="0.4946%" height="15" fill="rgb(245,58,50)" fg:x="485" fg:w="6"/><text x="40.2335%" y="431.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::is_sign_negative (3 samples, 0.25%)</title><rect x="40.4782%" y="421" width="0.2473%" height="15" fill="rgb(244,68,36)" fg:x="491" fg:w="3"/><text x="40.7282%" y="431.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::is_sign_negative (3 samples, 0.25%)</title><rect x="40.4782%" y="405" width="0.2473%" height="15" fill="rgb(232,229,15)" fg:x="491" fg:w="3"/><text x="40.7282%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for f64&gt;::eq (1 samples, 0.08%)</title><rect x="40.7255%" y="421" width="0.0824%" height="15" fill="rgb(254,30,23)" fg:x="494" fg:w="1"/><text x="40.9755%" y="431.50"></text></g><g><title>fastiron::main (3 samples, 0.25%)</title><rect x="40.8079%" y="421" width="0.2473%" height="15" fill="rgb(235,160,14)" fg:x="495" fg:w="3"/><text x="41.0579%" y="431.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::AddAssign&gt;::add_assign (2 samples, 0.16%)</title><rect x="41.0552%" y="405" width="0.1649%" height="15" fill="rgb(212,155,44)" fg:x="498" fg:w="2"/><text x="41.3052%" y="415.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (2 samples, 0.16%)</title><rect x="41.0552%" y="389" width="0.1649%" height="15" fill="rgb(226,2,50)" fg:x="498" fg:w="2"/><text x="41.3052%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1 samples, 0.08%)</title><rect x="41.2201%" y="389" width="0.0824%" height="15" fill="rgb(234,177,6)" fg:x="500" fg:w="1"/><text x="41.4701%" y="399.50"></text></g><g><title>fastiron::particles::mc_particle::MCParticle&lt;T&gt;::move_particle (4 samples, 0.33%)</title><rect x="41.0552%" y="421" width="0.3298%" height="15" fill="rgb(217,24,9)" fg:x="498" fg:w="4"/><text x="41.3052%" y="431.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (2 samples, 0.16%)</title><rect x="41.2201%" y="405" width="0.1649%" height="15" fill="rgb(220,13,46)" fg:x="500" fg:w="2"/><text x="41.4701%" y="415.50"></text></g><g><title>fastiron::main (1 samples, 0.08%)</title><rect x="41.3026%" y="389" width="0.0824%" height="15" fill="rgb(239,221,27)" fg:x="501" fg:w="1"/><text x="41.5526%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.08%)</title><rect x="44.5177%" y="405" width="0.0824%" height="15" fill="rgb(222,198,25)" fg:x="540" fg:w="1"/><text x="44.7677%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.08%)</title><rect x="44.5177%" y="389" width="0.0824%" height="15" fill="rgb(211,99,13)" fg:x="540" fg:w="1"/><text x="44.7677%" y="399.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.08%)</title><rect x="44.5177%" y="373" width="0.0824%" height="15" fill="rgb(232,111,31)" fg:x="540" fg:w="1"/><text x="44.7677%" y="383.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::gt (2 samples, 0.16%)</title><rect x="44.6002%" y="405" width="0.1649%" height="15" fill="rgb(245,82,37)" fg:x="541" fg:w="2"/><text x="44.8502%" y="415.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (3 samples, 0.25%)</title><rect x="44.7650%" y="341" width="0.2473%" height="15" fill="rgb(227,149,46)" fg:x="543" fg:w="3"/><text x="45.0150%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (3 samples, 0.25%)</title><rect x="45.0948%" y="325" width="0.2473%" height="15" fill="rgb(218,36,50)" fg:x="547" fg:w="3"/><text x="45.3448%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.16%)</title><rect x="45.3421%" y="309" width="0.1649%" height="15" fill="rgb(226,80,48)" fg:x="550" fg:w="2"/><text x="45.5921%" y="319.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (2 samples, 0.16%)</title><rect x="45.3421%" y="293" width="0.1649%" height="15" fill="rgb(238,224,15)" fg:x="550" fg:w="2"/><text x="45.5921%" y="303.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (2 samples, 0.16%)</title><rect x="45.3421%" y="277" width="0.1649%" height="15" fill="rgb(241,136,10)" fg:x="550" fg:w="2"/><text x="45.5921%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.16%)</title><rect x="45.5070%" y="277" width="0.1649%" height="15" fill="rgb(208,32,45)" fg:x="552" fg:w="2"/><text x="45.7570%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.16%)</title><rect x="45.5070%" y="261" width="0.1649%" height="15" fill="rgb(207,135,9)" fg:x="552" fg:w="2"/><text x="45.7570%" y="271.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (2 samples, 0.16%)</title><rect x="45.5070%" y="245" width="0.1649%" height="15" fill="rgb(206,86,44)" fg:x="552" fg:w="2"/><text x="45.7570%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.25%)</title><rect x="45.9192%" y="245" width="0.2473%" height="15" fill="rgb(245,177,15)" fg:x="557" fg:w="3"/><text x="46.1692%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3 samples, 0.25%)</title><rect x="45.9192%" y="229" width="0.2473%" height="15" fill="rgb(206,64,50)" fg:x="557" fg:w="3"/><text x="46.1692%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3 samples, 0.25%)</title><rect x="45.9192%" y="213" width="0.2473%" height="15" fill="rgb(234,36,40)" fg:x="557" fg:w="3"/><text x="46.1692%" y="223.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_total_cross_section::{{closure}} (18 samples, 1.48%)</title><rect x="45.6719%" y="261" width="1.4839%" height="15" fill="rgb(213,64,8)" fg:x="554" fg:w="18"/><text x="45.9219%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::AddAssign&gt;::add_assign (12 samples, 0.99%)</title><rect x="46.1665%" y="245" width="0.9893%" height="15" fill="rgb(210,75,36)" fg:x="560" fg:w="12"/><text x="46.4165%" y="255.50"></text></g><g><title>fastiron::data::nuclear_data::NuclearData&lt;T&gt;::get_total_cross_section (26 samples, 2.14%)</title><rect x="45.3421%" y="325" width="2.1434%" height="15" fill="rgb(229,88,21)" fg:x="550" fg:w="26"/><text x="45.5921%" y="335.50">f..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (24 samples, 1.98%)</title><rect x="45.5070%" y="309" width="1.9786%" height="15" fill="rgb(252,204,47)" fg:x="552" fg:w="24"/><text x="45.7570%" y="319.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (24 samples, 1.98%)</title><rect x="45.5070%" y="293" width="1.9786%" height="15" fill="rgb(208,77,27)" fg:x="552" fg:w="24"/><text x="45.7570%" y="303.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (22 samples, 1.81%)</title><rect x="45.6719%" y="277" width="1.8137%" height="15" fill="rgb(221,76,26)" fg:x="554" fg:w="22"/><text x="45.9219%" y="287.50">c..</text></g><g><title>fastiron::main (4 samples, 0.33%)</title><rect x="47.1558%" y="261" width="0.3298%" height="15" fill="rgb(225,139,18)" fg:x="572" fg:w="4"/><text x="47.4058%" y="271.50"></text></g><g><title>fastiron::simulation::macro_cross_section::weighted_macroscopic_cross_section (76 samples, 6.27%)</title><rect x="41.3850%" y="421" width="6.2655%" height="15" fill="rgb(230,137,11)" fg:x="502" fg:w="76"/><text x="41.6350%" y="431.50">fastiron..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (35 samples, 2.89%)</title><rect x="44.7650%" y="405" width="2.8854%" height="15" fill="rgb(212,28,1)" fg:x="543" fg:w="35"/><text x="45.0150%" y="415.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (35 samples, 2.89%)</title><rect x="44.7650%" y="389" width="2.8854%" height="15" fill="rgb(248,164,17)" fg:x="543" fg:w="35"/><text x="45.0150%" y="399.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (35 samples, 2.89%)</title><rect x="44.7650%" y="373" width="2.8854%" height="15" fill="rgb(222,171,42)" fg:x="543" fg:w="35"/><text x="45.0150%" y="383.50">co..</text></g><g><title>fastiron::simulation::macro_cross_section::weighted_macroscopic_cross_section::{{closure}} (35 samples, 2.89%)</title><rect x="44.7650%" y="357" width="2.8854%" height="15" fill="rgb(243,84,45)" fg:x="543" fg:w="35"/><text x="45.0150%" y="367.50">fa..</text></g><g><title>fastiron::simulation::macro_cross_section::macroscopic_total_cross_section (32 samples, 2.64%)</title><rect x="45.0124%" y="341" width="2.6381%" height="15" fill="rgb(252,49,23)" fg:x="546" fg:w="32"/><text x="45.2624%" y="351.50">fa..</text></g><g><title>fastiron::main (2 samples, 0.16%)</title><rect x="47.4856%" y="325" width="0.1649%" height="15" fill="rgb(215,19,7)" fg:x="576" fg:w="2"/><text x="47.7356%" y="335.50"></text></g><g><title>fastiron::simulation::mc_segment_outcome::find_min (3 samples, 0.25%)</title><rect x="47.6505%" y="421" width="0.2473%" height="15" fill="rgb(238,81,41)" fg:x="578" fg:w="3"/><text x="47.9005%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.25%)</title><rect x="47.6505%" y="405" width="0.2473%" height="15" fill="rgb(210,199,37)" fg:x="578" fg:w="3"/><text x="47.9005%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.25%)</title><rect x="47.6505%" y="389" width="0.2473%" height="15" fill="rgb(244,192,49)" fg:x="578" fg:w="3"/><text x="47.9005%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3 samples, 0.25%)</title><rect x="47.6505%" y="373" width="0.2473%" height="15" fill="rgb(226,211,11)" fg:x="578" fg:w="3"/><text x="47.9005%" y="383.50"></text></g><g><title>fastiron::simulation::mc_segment_outcome::find_min::{{closure}} (3 samples, 0.25%)</title><rect x="47.6505%" y="357" width="0.2473%" height="15" fill="rgb(236,162,54)" fg:x="578" fg:w="3"/><text x="47.9005%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (1 samples, 0.08%)</title><rect x="47.8153%" y="341" width="0.0824%" height="15" fill="rgb(220,229,9)" fg:x="580" fg:w="1"/><text x="48.0653%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (1 samples, 0.08%)</title><rect x="47.9802%" y="405" width="0.0824%" height="15" fill="rgb(250,87,22)" fg:x="582" fg:w="1"/><text x="48.2302%" y="415.50"></text></g><g><title>fastiron::main (13 samples, 1.07%)</title><rect x="48.0627%" y="405" width="1.0717%" height="15" fill="rgb(239,43,17)" fg:x="583" fg:w="13"/><text x="48.3127%" y="415.50"></text></g><g><title>[libc.so.6] (9 samples, 0.74%)</title><rect x="48.3924%" y="389" width="0.7420%" height="15" fill="rgb(231,177,25)" fg:x="587" fg:w="9"/><text x="48.6424%" y="399.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (19 samples, 1.57%)</title><rect x="49.1344%" y="357" width="1.5664%" height="15" fill="rgb(219,179,1)" fg:x="596" fg:w="19"/><text x="49.3844%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (19 samples, 1.57%)</title><rect x="49.1344%" y="341" width="1.5664%" height="15" fill="rgb(238,219,53)" fg:x="596" fg:w="19"/><text x="49.3844%" y="351.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (18 samples, 1.48%)</title><rect x="49.2168%" y="325" width="1.4839%" height="15" fill="rgb(232,167,36)" fg:x="597" fg:w="18"/><text x="49.4668%" y="335.50"></text></g><g><title>fastiron::main (46 samples, 3.79%)</title><rect x="50.7007%" y="341" width="3.7923%" height="15" fill="rgb(244,19,51)" fg:x="615" fg:w="46"/><text x="50.9507%" y="351.50">fast..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (9 samples, 0.74%)</title><rect x="60.3462%" y="325" width="0.7420%" height="15" fill="rgb(224,6,22)" fg:x="732" fg:w="9"/><text x="60.5962%" y="335.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (9 samples, 0.74%)</title><rect x="60.3462%" y="309" width="0.7420%" height="15" fill="rgb(224,145,5)" fg:x="732" fg:w="9"/><text x="60.5962%" y="319.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (9 samples, 0.74%)</title><rect x="60.3462%" y="293" width="0.7420%" height="15" fill="rgb(234,130,49)" fg:x="732" fg:w="9"/><text x="60.5962%" y="303.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (28 samples, 2.31%)</title><rect x="61.0882%" y="325" width="2.3083%" height="15" fill="rgb(254,6,2)" fg:x="741" fg:w="28"/><text x="61.3382%" y="335.50">&lt;..</text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (16 samples, 1.32%)</title><rect x="63.3965%" y="325" width="1.3190%" height="15" fill="rgb(208,96,46)" fg:x="769" fg:w="16"/><text x="63.6465%" y="335.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::le (6 samples, 0.49%)</title><rect x="64.7156%" y="325" width="0.4946%" height="15" fill="rgb(239,3,39)" fg:x="785" fg:w="6"/><text x="64.9656%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (109 samples, 8.99%)</title><rect x="65.2102%" y="325" width="8.9860%" height="15" fill="rgb(233,210,1)" fg:x="791" fg:w="109"/><text x="65.4602%" y="335.50">core::option:..</text></g><g><title>fastiron::main (18 samples, 1.48%)</title><rect x="74.1962%" y="325" width="1.4839%" height="15" fill="rgb(244,137,37)" fg:x="900" fg:w="18"/><text x="74.4462%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (24 samples, 1.98%)</title><rect x="82.9349%" y="309" width="1.9786%" height="15" fill="rgb(240,136,2)" fg:x="1006" fg:w="24"/><text x="83.1849%" y="319.50">&lt;..</text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (15 samples, 1.24%)</title><rect x="84.9134%" y="309" width="1.2366%" height="15" fill="rgb(239,18,37)" fg:x="1030" fg:w="15"/><text x="85.1634%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (11 samples, 0.91%)</title><rect x="86.1500%" y="309" width="0.9068%" height="15" fill="rgb(218,185,22)" fg:x="1045" fg:w="11"/><text x="86.4000%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Neg&gt;::neg (2 samples, 0.16%)</title><rect x="87.0569%" y="309" width="0.1649%" height="15" fill="rgb(225,218,4)" fg:x="1056" fg:w="2"/><text x="87.3069%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (22 samples, 1.81%)</title><rect x="87.2218%" y="309" width="1.8137%" height="15" fill="rgb(230,182,32)" fg:x="1058" fg:w="22"/><text x="87.4718%" y="319.50">&lt;..</text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::abs (2 samples, 0.16%)</title><rect x="89.0354%" y="309" width="0.1649%" height="15" fill="rgb(242,56,43)" fg:x="1080" fg:w="2"/><text x="89.2854%" y="319.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::abs (2 samples, 0.16%)</title><rect x="89.0354%" y="293" width="0.1649%" height="15" fill="rgb(233,99,24)" fg:x="1080" fg:w="2"/><text x="89.2854%" y="303.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Add&gt;::add (12 samples, 0.99%)</title><rect x="89.2003%" y="309" width="0.9893%" height="15" fill="rgb(234,209,42)" fg:x="1082" fg:w="12"/><text x="89.4503%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (12 samples, 0.99%)</title><rect x="89.2003%" y="293" width="0.9893%" height="15" fill="rgb(227,7,12)" fg:x="1082" fg:w="12"/><text x="89.4503%" y="303.50"></text></g><g><title>&lt;fastiron::data::mc_vector::MCVector&lt;T&gt; as core::ops::arith::Mul&lt;T&gt;&gt;::mul (11 samples, 0.91%)</title><rect x="90.1896%" y="309" width="0.9068%" height="15" fill="rgb(245,203,43)" fg:x="1094" fg:w="11"/><text x="90.4396%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (11 samples, 0.91%)</title><rect x="90.1896%" y="293" width="0.9068%" height="15" fill="rgb(238,205,33)" fg:x="1094" fg:w="11"/><text x="90.4396%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::gt (5 samples, 0.41%)</title><rect x="91.0965%" y="309" width="0.4122%" height="15" fill="rgb(231,56,7)" fg:x="1105" fg:w="5"/><text x="91.3465%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (19 samples, 1.57%)</title><rect x="91.5087%" y="309" width="1.5664%" height="15" fill="rgb(244,186,29)" fg:x="1110" fg:w="19"/><text x="91.7587%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (536 samples, 44.19%)</title><rect x="49.1344%" y="389" width="44.1880%" height="15" fill="rgb(234,111,31)" fg:x="596" fg:w="536"/><text x="49.3844%" y="399.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>core::iter::traits::iterator::Iterator::fold (536 samples, 44.19%)</title><rect x="49.1344%" y="373" width="44.1880%" height="15" fill="rgb(241,149,10)" fg:x="596" fg:w="536"/><text x="49.3844%" y="383.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (517 samples, 42.62%)</title><rect x="50.7007%" y="357" width="42.6216%" height="15" fill="rgb(249,206,44)" fg:x="615" fg:w="517"/><text x="50.9507%" y="367.50">core::iter::traits::iterator::Iterator::for_each::call::{{closure}}</text></g><g><title>fastiron::simulation::mct::mct_nf_3dg::{{closure}} (471 samples, 38.83%)</title><rect x="54.4930%" y="341" width="38.8293%" height="15" fill="rgb(251,153,30)" fg:x="661" fg:w="471"/><text x="54.7430%" y="351.50">fastiron::simulation::mct::mct_nf_3dg::{{closure}}</text></g><g><title>fastiron::simulation::mct::mct_nf_3dg_dist_to_segment (214 samples, 17.64%)</title><rect x="75.6801%" y="325" width="17.6422%" height="15" fill="rgb(239,152,38)" fg:x="918" fg:w="214"/><text x="75.9301%" y="335.50">fastiron::simulation::mct::..</text></g><g><title>fastiron::main (3 samples, 0.25%)</title><rect x="93.0750%" y="309" width="0.2473%" height="15" fill="rgb(249,139,47)" fg:x="1129" fg:w="3"/><text x="93.3250%" y="319.50"></text></g><g><title>fastiron::main (3 samples, 0.25%)</title><rect x="93.3223%" y="389" width="0.2473%" height="15" fill="rgb(244,64,35)" fg:x="1132" fg:w="3"/><text x="93.5723%" y="399.50"></text></g><g><title>&lt;usize as core::iter::range::Step&gt;::forward_unchecked (1 samples, 0.08%)</title><rect x="93.9819%" y="293" width="0.0824%" height="15" fill="rgb(216,46,15)" fg:x="1140" fg:w="1"/><text x="94.2319%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::unchecked_add (1 samples, 0.08%)</title><rect x="93.9819%" y="277" width="0.0824%" height="15" fill="rgb(250,74,19)" fg:x="1140" fg:w="1"/><text x="94.2319%" y="287.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (7 samples, 0.58%)</title><rect x="93.9819%" y="309" width="0.5771%" height="15" fill="rgb(249,42,33)" fg:x="1140" fg:w="7"/><text x="94.2319%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (6 samples, 0.49%)</title><rect x="94.0643%" y="293" width="0.4946%" height="15" fill="rgb(242,149,17)" fg:x="1141" fg:w="6"/><text x="94.3143%" y="303.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (12 samples, 0.99%)</title><rect x="93.9819%" y="325" width="0.9893%" height="15" fill="rgb(244,29,21)" fg:x="1140" fg:w="12"/><text x="94.2319%" y="335.50"></text></g><g><title>fastiron::main (5 samples, 0.41%)</title><rect x="94.5589%" y="309" width="0.4122%" height="15" fill="rgb(220,130,37)" fg:x="1147" fg:w="5"/><text x="94.8089%" y="319.50"></text></g><g><title>fastiron::main (7 samples, 0.58%)</title><rect x="94.9711%" y="309" width="0.5771%" height="15" fill="rgb(211,67,2)" fg:x="1152" fg:w="7"/><text x="95.2211%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::gt (7 samples, 0.58%)</title><rect x="97.1146%" y="293" width="0.5771%" height="15" fill="rgb(235,68,52)" fg:x="1178" fg:w="7"/><text x="97.3646%" y="303.50"></text></g><g><title>fastiron::simulation::mc_segment_outcome::outcome (790 samples, 65.13%)</title><rect x="34.2127%" y="437" width="65.1278%" height="15" fill="rgb(246,142,3)" fg:x="415" fg:w="790"/><text x="34.4627%" y="447.50">fastiron::simulation::mc_segment_outcome::outcome</text></g><g><title>fastiron::simulation::mct::nearest_facet (624 samples, 51.44%)</title><rect x="47.8978%" y="421" width="51.4427%" height="15" fill="rgb(241,25,7)" fg:x="581" fg:w="624"/><text x="48.1478%" y="431.50">fastiron::simulation::mct::nearest_facet</text></g><g><title>fastiron::simulation::mct::mct_nf_3dg (609 samples, 50.21%)</title><rect x="49.1344%" y="405" width="50.2061%" height="15" fill="rgb(242,119,39)" fg:x="596" fg:w="609"/><text x="49.3844%" y="415.50">fastiron::simulation::mct::mct_nf_3dg</text></g><g><title>fastiron::simulation::mct::mct_nf_find_nearest (70 samples, 5.77%)</title><rect x="93.5697%" y="389" width="5.7708%" height="15" fill="rgb(241,98,45)" fg:x="1135" fg:w="70"/><text x="93.8197%" y="399.50">fastiro..</text></g><g><title>fastiron::simulation::mct::mct_nf_compute_nearest (67 samples, 5.52%)</title><rect x="93.8170%" y="373" width="5.5235%" height="15" fill="rgb(254,28,30)" fg:x="1138" fg:w="67"/><text x="94.0670%" y="383.50">fastiro..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (65 samples, 5.36%)</title><rect x="93.9819%" y="357" width="5.3586%" height="15" fill="rgb(241,142,54)" fg:x="1140" fg:w="65"/><text x="94.2319%" y="367.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (65 samples, 5.36%)</title><rect x="93.9819%" y="341" width="5.3586%" height="15" fill="rgb(222,85,15)" fg:x="1140" fg:w="65"/><text x="94.2319%" y="351.50">core::i..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (53 samples, 4.37%)</title><rect x="94.9711%" y="325" width="4.3693%" height="15" fill="rgb(210,85,47)" fg:x="1152" fg:w="53"/><text x="95.2211%" y="335.50">core:..</text></g><g><title>fastiron::simulation::mct::mct_nf_compute_nearest::{{closure}} (46 samples, 3.79%)</title><rect x="95.5482%" y="309" width="3.7923%" height="15" fill="rgb(224,206,25)" fg:x="1159" fg:w="46"/><text x="95.7982%" y="319.50">fast..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::le (20 samples, 1.65%)</title><rect x="97.6917%" y="293" width="1.6488%" height="15" fill="rgb(243,201,19)" fg:x="1185" fg:w="20"/><text x="97.9417%" y="303.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each (1,166 samples, 96.13%)</title><rect x="3.2976%" y="501" width="96.1253%" height="15" fill="rgb(236,59,4)" fg:x="40" fg:w="1166"/><text x="3.5476%" y="511.50">&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::for_each</text></g><g><title>fastiron::cycle_tracking::{{closure}} (1,166 samples, 96.13%)</title><rect x="3.2976%" y="485" width="96.1253%" height="15" fill="rgb(254,179,45)" fg:x="40" fg:w="1166"/><text x="3.5476%" y="495.50">fastiron::cycle_tracking::{{closure}}</text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_guts (1,166 samples, 96.13%)</title><rect x="3.2976%" y="469" width="96.1253%" height="15" fill="rgb(226,14,10)" fg:x="40" fg:w="1166"/><text x="3.5476%" y="479.50">fastiron::simulation::cycle_tracking::cycle_tracking_guts</text></g><g><title>fastiron::simulation::cycle_tracking::cycle_tracking_function (1,158 samples, 95.47%)</title><rect x="3.9571%" y="453" width="95.4658%" height="15" fill="rgb(244,27,41)" fg:x="48" fg:w="1158"/><text x="4.2071%" y="463.50">fastiron::simulation::cycle_tracking::cycle_tracking_function</text></g><g><title>fastiron::simulation::mct::reflect_particle (1 samples, 0.08%)</title><rect x="99.3405%" y="437" width="0.0824%" height="15" fill="rgb(235,35,32)" fg:x="1205" fg:w="1"/><text x="99.5905%" y="447.50"></text></g><g><title>fastiron::data::mc_vector::MCVector&lt;T&gt;::dot (1 samples, 0.08%)</title><rect x="99.3405%" y="421" width="0.0824%" height="15" fill="rgb(218,68,31)" fg:x="1205" fg:w="1"/><text x="99.5905%" y="431.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (1 samples, 0.08%)</title><rect x="99.3405%" y="405" width="0.0824%" height="15" fill="rgb(207,120,37)" fg:x="1205" fg:w="1"/><text x="99.5905%" y="415.50"></text></g><g><title>fastiron::cycle_tracking (1,167 samples, 96.21%)</title><rect x="3.2976%" y="517" width="96.2077%" height="15" fill="rgb(227,98,0)" fg:x="40" fg:w="1167"/><text x="3.5476%" y="527.50">fastiron::cycle_tracking</text></g><g><title>fastiron::main (1 samples, 0.08%)</title><rect x="99.4229%" y="501" width="0.0824%" height="15" fill="rgb(207,7,3)" fg:x="1206" fg:w="1"/><text x="99.6729%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.25%)</title><rect x="99.5054%" y="485" width="0.2473%" height="15" fill="rgb(206,98,19)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.25%)</title><rect x="99.5054%" y="469" width="0.2473%" height="15" fill="rgb(217,5,26)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3 samples, 0.25%)</title><rect x="99.5054%" y="453" width="0.2473%" height="15" fill="rgb(235,190,38)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="463.50"></text></g><g><title>fastiron::init::init_mesh::{{closure}} (3 samples, 0.25%)</title><rect x="99.5054%" y="437" width="0.2473%" height="15" fill="rgb(247,86,24)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="447.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::build_mesh_partition (3 samples, 0.25%)</title><rect x="99.5054%" y="421" width="0.2473%" height="15" fill="rgb(205,101,16)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="431.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::assign_cells_to_domain (3 samples, 0.25%)</title><rect x="99.5054%" y="405" width="0.2473%" height="15" fill="rgb(246,168,33)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="415.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood (3 samples, 0.25%)</title><rect x="99.5054%" y="389" width="0.2473%" height="15" fill="rgb(231,114,1)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.25%)</title><rect x="99.5054%" y="373" width="0.2473%" height="15" fill="rgb(207,184,53)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.25%)</title><rect x="99.5054%" y="357" width="0.2473%" height="15" fill="rgb(224,95,51)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3 samples, 0.25%)</title><rect x="99.5054%" y="341" width="0.2473%" height="15" fill="rgb(212,188,45)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="351.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood::{{closure}} (3 samples, 0.25%)</title><rect x="99.5054%" y="325" width="0.2473%" height="15" fill="rgb(223,154,38)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.25%)</title><rect x="99.5054%" y="309" width="0.2473%" height="15" fill="rgb(251,22,52)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.25%)</title><rect x="99.5054%" y="293" width="0.2473%" height="15" fill="rgb(229,209,22)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3 samples, 0.25%)</title><rect x="99.5054%" y="277" width="0.2473%" height="15" fill="rgb(234,138,34)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="287.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood::{{closure}}::{{closure}} (3 samples, 0.25%)</title><rect x="99.5054%" y="261" width="0.2473%" height="15" fill="rgb(212,95,11)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.25%)</title><rect x="99.5054%" y="245" width="0.2473%" height="15" fill="rgb(240,179,47)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.25%)</title><rect x="99.5054%" y="229" width="0.2473%" height="15" fill="rgb(240,163,11)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3 samples, 0.25%)</title><rect x="99.5054%" y="213" width="0.2473%" height="15" fill="rgb(236,37,12)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="223.50"></text></g><g><title>fastiron::geometry::mesh_partition::MeshPartition::add_nbrs_to_flood::{{closure}}::{{closure}}::{{closure}} (3 samples, 0.25%)</title><rect x="99.5054%" y="197" width="0.2473%" height="15" fill="rgb(232,164,16)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="207.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::contains (3 samples, 0.25%)</title><rect x="99.5054%" y="181" width="0.2473%" height="15" fill="rgb(244,205,15)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="191.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains (3 samples, 0.25%)</title><rect x="99.5054%" y="165" width="0.2473%" height="15" fill="rgb(223,117,47)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (3 samples, 0.25%)</title><rect x="99.5054%" y="149" width="0.2473%" height="15" fill="rgb(244,107,35)" fg:x="1207" fg:w="3"/><text x="99.7554%" y="159.50"></text></g><g><title>&lt;T as core::slice::cmp::SliceContains&gt;::slice_contains::{{closure}} (2 samples, 0.16%)</title><rect x="99.5878%" y="133" width="0.1649%" height="15" fill="rgb(205,140,8)" fg:x="1208" fg:w="2"/><text x="99.8378%" y="143.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq for usize&gt;::eq (2 samples, 0.16%)</title><rect x="99.5878%" y="117" width="0.1649%" height="15" fill="rgb(228,84,46)" fg:x="1208" fg:w="2"/><text x="99.8378%" y="127.50"></text></g><g><title>fastiron::init::init_mc (4 samples, 0.33%)</title><rect x="99.5054%" y="517" width="0.3298%" height="15" fill="rgb(254,188,9)" fg:x="1207" fg:w="4"/><text x="99.7554%" y="527.50"></text></g><g><title>fastiron::init::init_mesh (4 samples, 0.33%)</title><rect x="99.5054%" y="501" width="0.3298%" height="15" fill="rgb(206,112,54)" fg:x="1207" fg:w="4"/><text x="99.7554%" y="511.50"></text></g><g><title>fastiron::init::consistency_check (1 samples, 0.08%)</title><rect x="99.7527%" y="485" width="0.0824%" height="15" fill="rgb(216,84,49)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.08%)</title><rect x="99.7527%" y="469" width="0.0824%" height="15" fill="rgb(214,194,35)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.7527%" y="453" width="0.0824%" height="15" fill="rgb(249,28,3)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="99.7527%" y="437" width="0.0824%" height="15" fill="rgb(222,56,52)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (1 samples, 0.08%)</title><rect x="99.7527%" y="421" width="0.0824%" height="15" fill="rgb(245,217,50)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="99.7527%" y="405" width="0.0824%" height="15" fill="rgb(213,201,24)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="415.50"></text></g><g><title>fastiron::init::consistency_check::{{closure}} (1 samples, 0.08%)</title><rect x="99.7527%" y="389" width="0.0824%" height="15" fill="rgb(248,116,28)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.08%)</title><rect x="99.7527%" y="373" width="0.0824%" height="15" fill="rgb(219,72,43)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.7527%" y="357" width="0.0824%" height="15" fill="rgb(209,138,14)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="99.7527%" y="341" width="0.0824%" height="15" fill="rgb(222,18,33)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (1 samples, 0.08%)</title><rect x="99.7527%" y="325" width="0.0824%" height="15" fill="rgb(213,199,7)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="99.7527%" y="309" width="0.0824%" height="15" fill="rgb(250,110,10)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="319.50"></text></g><g><title>fastiron::init::consistency_check::{{closure}}::{{closure}} (1 samples, 0.08%)</title><rect x="99.7527%" y="293" width="0.0824%" height="15" fill="rgb(248,123,6)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.08%)</title><rect x="99.7527%" y="277" width="0.0824%" height="15" fill="rgb(206,91,31)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.08%)</title><rect x="99.7527%" y="261" width="0.0824%" height="15" fill="rgb(211,154,13)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.08%)</title><rect x="99.7527%" y="245" width="0.0824%" height="15" fill="rgb(225,148,7)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::{{closure}} (1 samples, 0.08%)</title><rect x="99.7527%" y="229" width="0.0824%" height="15" fill="rgb(220,160,43)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.08%)</title><rect x="99.7527%" y="213" width="0.0824%" height="15" fill="rgb(213,52,39)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="223.50"></text></g><g><title>fastiron::init::consistency_check::{{closure}}::{{closure}}::{{closure}} (1 samples, 0.08%)</title><rect x="99.7527%" y="197" width="0.0824%" height="15" fill="rgb(243,137,7)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::unwrap (1 samples, 0.08%)</title><rect x="99.7527%" y="181" width="0.0824%" height="15" fill="rgb(230,79,13)" fg:x="1210" fg:w="1"/><text x="100.0027%" y="191.50"></text></g><g><title>__libc_start_main_impl (1,191 samples, 98.19%)</title><rect x="1.7312%" y="613" width="98.1863%" height="15" fill="rgb(247,105,23)" fg:x="21" fg:w="1191"/><text x="1.9812%" y="623.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (1,191 samples, 98.19%)</title><rect x="1.7312%" y="597" width="98.1863%" height="15" fill="rgb(223,179,41)" fg:x="21" fg:w="1191"/><text x="1.9812%" y="607.50">__libc_start_call_main</text></g><g><title>main (1,191 samples, 98.19%)</title><rect x="1.7312%" y="581" width="98.1863%" height="15" fill="rgb(218,9,34)" fg:x="21" fg:w="1191"/><text x="1.9812%" y="591.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,191 samples, 98.19%)</title><rect x="1.7312%" y="565" width="98.1863%" height="15" fill="rgb(222,106,8)" fg:x="21" fg:w="1191"/><text x="1.9812%" y="575.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (1,191 samples, 98.19%)</title><rect x="1.7312%" y="549" width="98.1863%" height="15" fill="rgb(211,220,0)" fg:x="21" fg:w="1191"/><text x="1.9812%" y="559.50">core::ops::function::FnOnce::call_once</text></g><g><title>fastiron::main (1,191 samples, 98.19%)</title><rect x="1.7312%" y="533" width="98.1863%" height="15" fill="rgb(229,52,16)" fg:x="21" fg:w="1191"/><text x="1.9812%" y="543.50">fastiron::main</text></g><g><title>std::io::stdio::_print (1 samples, 0.08%)</title><rect x="99.8351%" y="517" width="0.0824%" height="15" fill="rgb(212,155,18)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="527.50"></text></g><g><title>std::io::stdio::print_to (1 samples, 0.08%)</title><rect x="99.8351%" y="501" width="0.0824%" height="15" fill="rgb(242,21,14)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="511.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.08%)</title><rect x="99.8351%" y="485" width="0.0824%" height="15" fill="rgb(222,19,48)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="495.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.08%)</title><rect x="99.8351%" y="469" width="0.0824%" height="15" fill="rgb(232,45,27)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="479.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.08%)</title><rect x="99.8351%" y="453" width="0.0824%" height="15" fill="rgb(249,103,42)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.08%)</title><rect x="99.8351%" y="437" width="0.0824%" height="15" fill="rgb(246,81,33)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="447.50"></text></g><g><title>core::fmt::run (1 samples, 0.08%)</title><rect x="99.8351%" y="421" width="0.0824%" height="15" fill="rgb(252,33,42)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="431.50"></text></g><g><title>&lt;fastiron::parameters::Parameters&lt;T&gt; as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8351%" y="405" width="0.0824%" height="15" fill="rgb(209,212,41)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="415.50"></text></g><g><title>core::fmt::Formatter::debug_struct_field4_finish (1 samples, 0.08%)</title><rect x="99.8351%" y="389" width="0.0824%" height="15" fill="rgb(207,154,6)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="399.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="99.8351%" y="373" width="0.0824%" height="15" fill="rgb(223,64,47)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="383.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="99.8351%" y="357" width="0.0824%" height="15" fill="rgb(211,161,38)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="367.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="99.8351%" y="341" width="0.0824%" height="15" fill="rgb(219,138,40)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="351.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8351%" y="325" width="0.0824%" height="15" fill="rgb(241,228,46)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="335.50"></text></g><g><title>&lt;fastiron::parameters::SimulationParameters&lt;T&gt; as core::fmt::Debug&gt;::fmt (1 samples, 0.08%)</title><rect x="99.8351%" y="309" width="0.0824%" height="15" fill="rgb(223,209,38)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="319.50"></text></g><g><title>core::fmt::Formatter::debug_struct_fields_finish (1 samples, 0.08%)</title><rect x="99.8351%" y="293" width="0.0824%" height="15" fill="rgb(236,164,45)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="303.50"></text></g><g><title>core::fmt::builders::DebugStruct::field (1 samples, 0.08%)</title><rect x="99.8351%" y="277" width="0.0824%" height="15" fill="rgb(231,15,5)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::and_then (1 samples, 0.08%)</title><rect x="99.8351%" y="261" width="0.0824%" height="15" fill="rgb(252,35,15)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="271.50"></text></g><g><title>core::fmt::builders::DebugStruct::field::{{closure}} (1 samples, 0.08%)</title><rect x="99.8351%" y="245" width="0.0824%" height="15" fill="rgb(248,181,18)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="255.50"></text></g><g><title>core::fmt::Write::write_char (1 samples, 0.08%)</title><rect x="99.8351%" y="229" width="0.0824%" height="15" fill="rgb(233,39,42)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="239.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.8351%" y="213" width="0.0824%" height="15" fill="rgb(238,110,33)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="223.50"></text></g><g><title>&lt;core::fmt::builders::PadAdapter as core::fmt::Write&gt;::write_str (1 samples, 0.08%)</title><rect x="99.8351%" y="197" width="0.0824%" height="15" fill="rgb(233,195,10)" fg:x="1211" fg:w="1"/><text x="100.0851%" y="207.50"></text></g><g><title>all (1,213 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(254,105,3)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="671.50"></text></g><g><title>fastiron (1,213 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(221,225,9)" fg:x="0" fg:w="1213"/><text x="0.2500%" y="655.50">fastiron</text></g><g><title>_start (1,197 samples, 98.68%)</title><rect x="1.3190%" y="629" width="98.6810%" height="15" fill="rgb(224,227,45)" fg:x="16" fg:w="1197"/><text x="1.5690%" y="639.50">_start</text></g><g><title>_dl_start (1 samples, 0.08%)</title><rect x="99.9176%" y="613" width="0.0824%" height="15" fill="rgb(229,198,43)" fg:x="1212" fg:w="1"/><text x="100.1676%" y="623.50"></text></g><g><title>_dl_start_final (1 samples, 0.08%)</title><rect x="99.9176%" y="597" width="0.0824%" height="15" fill="rgb(206,209,35)" fg:x="1212" fg:w="1"/><text x="100.1676%" y="607.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.08%)</title><rect x="99.9176%" y="581" width="0.0824%" height="15" fill="rgb(245,195,53)" fg:x="1212" fg:w="1"/><text x="100.1676%" y="591.50"></text></g><g><title>dl_platform_init (1 samples, 0.08%)</title><rect x="99.9176%" y="565" width="0.0824%" height="15" fill="rgb(240,92,26)" fg:x="1212" fg:w="1"/><text x="100.1676%" y="575.50"></text></g><g><title>init_cpu_features (1 samples, 0.08%)</title><rect x="99.9176%" y="549" width="0.0824%" height="15" fill="rgb(207,40,23)" fg:x="1212" fg:w="1"/><text x="100.1676%" y="559.50"></text></g></svg></svg>