<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="309.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="3850"><g><title>CycleTrackingGuts (1 samples, 0.03%)</title><rect x="0.0000%" y="245" width="0.0260%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="255.50"></text></g><g><title>NuclearData::getReactionCrossSection (28 samples, 0.73%)</title><rect x="0.0260%" y="245" width="0.7273%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="28"/><text x="0.2760%" y="255.50"></text></g><g><title>CycleTrackingFunction (9 samples, 0.23%)</title><rect x="0.7532%" y="229" width="0.2338%" height="15" fill="rgb(221,193,54)" fg:x="29" fg:w="9"/><text x="1.0032%" y="239.50"></text></g><g><title>CycleTrackingGuts (1 samples, 0.03%)</title><rect x="0.9870%" y="229" width="0.0260%" height="15" fill="rgb(248,212,6)" fg:x="38" fg:w="1"/><text x="1.2370%" y="239.50"></text></g><g><title>MCT_Generate_Coordinate_3D_G (1 samples, 0.03%)</title><rect x="1.0130%" y="229" width="0.0260%" height="15" fill="rgb(208,68,35)" fg:x="39" fg:w="1"/><text x="1.2630%" y="239.50"></text></g><g><title>MCT_Nearest_Facet (3 samples, 0.08%)</title><rect x="1.0390%" y="229" width="0.0779%" height="15" fill="rgb(232,128,0)" fg:x="40" fg:w="3"/><text x="1.2890%" y="239.50"></text></g><g><title>MC_Load_Particle (3 samples, 0.08%)</title><rect x="1.1169%" y="229" width="0.0779%" height="15" fill="rgb(207,160,47)" fg:x="43" fg:w="3"/><text x="1.3669%" y="239.50"></text></g><g><title>NuclearData::getEnergyGroup (1 samples, 0.03%)</title><rect x="1.1948%" y="229" width="0.0260%" height="15" fill="rgb(228,23,34)" fg:x="46" fg:w="1"/><text x="1.4448%" y="239.50"></text></g><g><title>NuclearData::getNumberReactions (1 samples, 0.03%)</title><rect x="1.2208%" y="229" width="0.0260%" height="15" fill="rgb(218,30,26)" fg:x="47" fg:w="1"/><text x="1.4708%" y="239.50"></text></g><g><title>ParticleVault::getParticle (5 samples, 0.13%)</title><rect x="1.2468%" y="229" width="0.1299%" height="15" fill="rgb(220,122,19)" fg:x="48" fg:w="5"/><text x="1.4968%" y="239.50"></text></g><g><title>ParticleVaultContainer::addProcessingParticle (2 samples, 0.05%)</title><rect x="1.3766%" y="229" width="0.0519%" height="15" fill="rgb(250,228,42)" fg:x="53" fg:w="2"/><text x="1.6266%" y="239.50"></text></g><g><title>macroscopicCrossSection (5 samples, 0.13%)</title><rect x="1.4286%" y="229" width="0.1299%" height="15" fill="rgb(240,193,28)" fg:x="55" fg:w="5"/><text x="1.6786%" y="239.50"></text></g><g><title>updateTrajectory (1 samples, 0.03%)</title><rect x="1.5584%" y="229" width="0.0260%" height="15" fill="rgb(216,20,37)" fg:x="60" fg:w="1"/><text x="1.8084%" y="239.50"></text></g><g><title>[[heap]] (34 samples, 0.88%)</title><rect x="0.7532%" y="245" width="0.8831%" height="15" fill="rgb(206,188,39)" fg:x="29" fg:w="34"/><text x="1.0032%" y="255.50"></text></g><g><title>weightedMacroscopicCrossSection (2 samples, 0.05%)</title><rect x="1.5844%" y="229" width="0.0519%" height="15" fill="rgb(217,207,13)" fg:x="61" fg:w="2"/><text x="1.8344%" y="239.50"></text></g><g><title>CollisionEvent (10 samples, 0.26%)</title><rect x="1.6364%" y="229" width="0.2597%" height="15" fill="rgb(231,73,38)" fg:x="63" fg:w="10"/><text x="1.8864%" y="239.50"></text></g><g><title>MCT_Nearest_Facet (3 samples, 0.08%)</title><rect x="1.8961%" y="229" width="0.0779%" height="15" fill="rgb(225,20,46)" fg:x="73" fg:w="3"/><text x="2.1461%" y="239.50"></text></g><g><title>MC_Segment_Outcome (5 samples, 0.13%)</title><rect x="1.9740%" y="229" width="0.1299%" height="15" fill="rgb(210,31,41)" fg:x="76" fg:w="5"/><text x="2.2240%" y="239.50"></text></g><g><title>ParticleVaultContainer::addProcessingParticle (1 samples, 0.03%)</title><rect x="2.1039%" y="229" width="0.0260%" height="15" fill="rgb(221,200,47)" fg:x="81" fg:w="1"/><text x="2.3539%" y="239.50"></text></g><g><title>__sincos (3 samples, 0.08%)</title><rect x="2.1299%" y="229" width="0.0779%" height="15" fill="rgb(226,26,5)" fg:x="82" fg:w="3"/><text x="2.3799%" y="239.50"></text></g><g><title>[[stack]] (26 samples, 0.68%)</title><rect x="1.6364%" y="245" width="0.6753%" height="15" fill="rgb(249,33,26)" fg:x="63" fg:w="26"/><text x="1.8864%" y="255.50"></text></g><g><title>weightedMacroscopicCrossSection (4 samples, 0.10%)</title><rect x="2.2078%" y="229" width="0.1039%" height="15" fill="rgb(235,183,28)" fg:x="85" fg:w="4"/><text x="2.4578%" y="239.50"></text></g><g><title>macroscopicCrossSection (1 samples, 0.03%)</title><rect x="2.2857%" y="213" width="0.0260%" height="15" fill="rgb(221,5,38)" fg:x="88" fg:w="1"/><text x="2.5357%" y="223.50"></text></g><g><title>PopulationControl (2 samples, 0.05%)</title><rect x="2.3117%" y="229" width="0.0519%" height="15" fill="rgb(247,18,42)" fg:x="89" fg:w="2"/><text x="2.5617%" y="239.50"></text></g><g><title>PopulationControlGuts (2 samples, 0.05%)</title><rect x="2.3117%" y="213" width="0.0519%" height="15" fill="rgb(241,131,45)" fg:x="89" fg:w="2"/><text x="2.5617%" y="223.50"></text></g><g><title>[ld-linux-x86-64.so.2] (3 samples, 0.08%)</title><rect x="2.3117%" y="245" width="0.0779%" height="15" fill="rgb(249,31,29)" fg:x="89" fg:w="3"/><text x="2.5617%" y="255.50"></text></g><g><title>RouletteLowWeightParticles (1 samples, 0.03%)</title><rect x="2.3636%" y="229" width="0.0260%" height="15" fill="rgb(225,111,53)" fg:x="91" fg:w="1"/><text x="2.6136%" y="239.50"></text></g><g><title>CollisionEvent (4 samples, 0.10%)</title><rect x="2.4416%" y="229" width="0.1039%" height="15" fill="rgb(238,160,17)" fg:x="94" fg:w="4"/><text x="2.6916%" y="239.50"></text></g><g><title>CycleTrackingFunction (1 samples, 0.03%)</title><rect x="2.5455%" y="229" width="0.0260%" height="15" fill="rgb(214,148,48)" fg:x="98" fg:w="1"/><text x="2.7955%" y="239.50"></text></g><g><title>CycleTrackingGuts (1 samples, 0.03%)</title><rect x="2.5714%" y="229" width="0.0260%" height="15" fill="rgb(232,36,49)" fg:x="99" fg:w="1"/><text x="2.8214%" y="239.50"></text></g><g><title>MCT_Nearest_Facet (1 samples, 0.03%)</title><rect x="2.5974%" y="229" width="0.0260%" height="15" fill="rgb(209,103,24)" fg:x="100" fg:w="1"/><text x="2.8474%" y="239.50"></text></g><g><title>MC_Facet_Crossing_Event (1 samples, 0.03%)</title><rect x="2.6234%" y="229" width="0.0260%" height="15" fill="rgb(229,88,8)" fg:x="101" fg:w="1"/><text x="2.8734%" y="239.50"></text></g><g><title>MC_Load_Particle (1 samples, 0.03%)</title><rect x="2.6494%" y="229" width="0.0260%" height="15" fill="rgb(213,181,19)" fg:x="102" fg:w="1"/><text x="2.8994%" y="239.50"></text></g><g><title>MC_Segment_Outcome (3 samples, 0.08%)</title><rect x="2.6753%" y="229" width="0.0779%" height="15" fill="rgb(254,191,54)" fg:x="103" fg:w="3"/><text x="2.9253%" y="239.50"></text></g><g><title>NuclearData::getEnergyGroup (4 samples, 0.10%)</title><rect x="2.7532%" y="229" width="0.1039%" height="15" fill="rgb(241,83,37)" fg:x="106" fg:w="4"/><text x="3.0032%" y="239.50"></text></g><g><title>NuclearData::getNumberReactions (8 samples, 0.21%)</title><rect x="2.8571%" y="229" width="0.2078%" height="15" fill="rgb(233,36,39)" fg:x="110" fg:w="8"/><text x="3.1071%" y="239.50"></text></g><g><title>NuclearData::getReactionCrossSection (167 samples, 4.34%)</title><rect x="3.0649%" y="229" width="4.3377%" height="15" fill="rgb(226,3,54)" fg:x="118" fg:w="167"/><text x="3.3149%" y="239.50">Nucle..</text></g><g><title>NuclearData::getTotalCrossSection (5 samples, 0.13%)</title><rect x="7.4026%" y="229" width="0.1299%" height="15" fill="rgb(245,192,40)" fg:x="285" fg:w="5"/><text x="7.6526%" y="239.50"></text></g><g><title>NuclearDataReaction::sampleCollision (1 samples, 0.03%)</title><rect x="7.5325%" y="229" width="0.0260%" height="15" fill="rgb(238,167,29)" fg:x="290" fg:w="1"/><text x="7.7825%" y="239.50"></text></g><g><title>ParticleVaultContainer::addProcessingParticle (2 samples, 0.05%)</title><rect x="7.5584%" y="229" width="0.0519%" height="15" fill="rgb(232,182,51)" fg:x="291" fg:w="2"/><text x="7.8084%" y="239.50"></text></g><g><title>__sincos (1 samples, 0.03%)</title><rect x="7.6104%" y="229" width="0.0260%" height="15" fill="rgb(231,60,39)" fg:x="293" fg:w="1"/><text x="7.8604%" y="239.50"></text></g><g><title>macroscopicCrossSection (44 samples, 1.14%)</title><rect x="7.6364%" y="229" width="1.1429%" height="15" fill="rgb(208,69,12)" fg:x="294" fg:w="44"/><text x="7.8864%" y="239.50"></text></g><g><title>qs_vector&lt;NuclearDataSpecies&gt;::qs_vector (1 samples, 0.03%)</title><rect x="8.7792%" y="229" width="0.0260%" height="15" fill="rgb(235,93,37)" fg:x="338" fg:w="1"/><text x="9.0292%" y="239.50"></text></g><g><title>rngSpawn_Random_Number_Seed (1 samples, 0.03%)</title><rect x="8.8052%" y="229" width="0.0260%" height="15" fill="rgb(213,116,39)" fg:x="339" fg:w="1"/><text x="9.0552%" y="239.50"></text></g><g><title>[unknown] (251 samples, 6.52%)</title><rect x="2.3896%" y="245" width="6.5195%" height="15" fill="rgb(222,207,29)" fg:x="92" fg:w="251"/><text x="2.6396%" y="255.50">[unknown]</text></g><g><title>weightedMacroscopicCrossSection (3 samples, 0.08%)</title><rect x="8.8312%" y="229" width="0.0779%" height="15" fill="rgb(206,96,30)" fg:x="340" fg:w="3"/><text x="9.0812%" y="239.50"></text></g><g><title>NuclearData::getEnergyGroup (2 samples, 0.05%)</title><rect x="9.0649%" y="117" width="0.0519%" height="15" fill="rgb(218,138,4)" fg:x="349" fg:w="2"/><text x="9.3149%" y="127.50"></text></g><g><title>MC_Base_Particle::MC_Base_Particle (1 samples, 0.03%)</title><rect x="9.1169%" y="101" width="0.0260%" height="15" fill="rgb(250,191,14)" fg:x="351" fg:w="1"/><text x="9.3669%" y="111.50"></text></g><g><title>MC_Vector::operator= (1 samples, 0.03%)</title><rect x="9.1169%" y="85" width="0.0260%" height="15" fill="rgb(239,60,40)" fg:x="351" fg:w="1"/><text x="9.3669%" y="95.50"></text></g><g><title>MC_Load_Particle (6 samples, 0.16%)</title><rect x="9.0649%" y="133" width="0.1558%" height="15" fill="rgb(206,27,48)" fg:x="349" fg:w="6"/><text x="9.3149%" y="143.50"></text></g><g><title>ParticleVault::getParticle (4 samples, 0.10%)</title><rect x="9.1169%" y="117" width="0.1039%" height="15" fill="rgb(225,35,8)" fg:x="351" fg:w="4"/><text x="9.3669%" y="127.50"></text></g><g><title>MC_Particle::MC_Particle (3 samples, 0.08%)</title><rect x="9.1429%" y="101" width="0.0779%" height="15" fill="rgb(250,213,24)" fg:x="352" fg:w="3"/><text x="9.3929%" y="111.50"></text></g><g><title>MC_Vector::Length (2 samples, 0.05%)</title><rect x="9.1688%" y="85" width="0.0519%" height="15" fill="rgb(247,123,22)" fg:x="353" fg:w="2"/><text x="9.4188%" y="95.50"></text></g><g><title>EnergySpectrum::UpdateSpectrum (8 samples, 0.21%)</title><rect x="9.0390%" y="149" width="0.2078%" height="15" fill="rgb(231,138,38)" fg:x="348" fg:w="8"/><text x="9.2890%" y="159.50"></text></g><g><title>MC_Particle::MC_Particle (1 samples, 0.03%)</title><rect x="9.2208%" y="133" width="0.0260%" height="15" fill="rgb(231,145,46)" fg:x="355" fg:w="1"/><text x="9.4708%" y="143.50"></text></g><g><title>ScalarFluxTask::Reset (2 samples, 0.05%)</title><rect x="9.2468%" y="149" width="0.0519%" height="15" fill="rgb(251,118,11)" fg:x="356" fg:w="2"/><text x="9.4968%" y="159.50"></text></g><g><title>[libc.so.6] (2 samples, 0.05%)</title><rect x="9.2468%" y="133" width="0.0519%" height="15" fill="rgb(217,147,25)" fg:x="356" fg:w="2"/><text x="9.4968%" y="143.50"></text></g><g><title>Print0 (1 samples, 0.03%)</title><rect x="9.2987%" y="133" width="0.0260%" height="15" fill="rgb(247,81,37)" fg:x="358" fg:w="1"/><text x="9.5487%" y="143.50"></text></g><g><title>Print0 (1 samples, 0.03%)</title><rect x="9.2987%" y="117" width="0.0260%" height="15" fill="rgb(209,12,38)" fg:x="358" fg:w="1"/><text x="9.5487%" y="127.50"></text></g><g><title>__vfprintf_internal (1 samples, 0.03%)</title><rect x="9.2987%" y="101" width="0.0260%" height="15" fill="rgb(227,1,9)" fg:x="358" fg:w="1"/><text x="9.5487%" y="111.50"></text></g><g><title>cycleFinalize (16 samples, 0.42%)</title><rect x="9.0390%" y="181" width="0.4156%" height="15" fill="rgb(248,47,43)" fg:x="348" fg:w="16"/><text x="9.2890%" y="191.50"></text></g><g><title>Tallies::CycleFinalize (16 samples, 0.42%)</title><rect x="9.0390%" y="165" width="0.4156%" height="15" fill="rgb(221,10,30)" fg:x="348" fg:w="16"/><text x="9.2890%" y="175.50"></text></g><g><title>Tallies::PrintSummary (6 samples, 0.16%)</title><rect x="9.2987%" y="149" width="0.1558%" height="15" fill="rgb(210,229,1)" fg:x="358" fg:w="6"/><text x="9.5487%" y="159.50"></text></g><g><title>Tallies::ScalarFluxSum (5 samples, 0.13%)</title><rect x="9.3247%" y="133" width="0.1299%" height="15" fill="rgb(222,148,37)" fg:x="359" fg:w="5"/><text x="9.5747%" y="143.50"></text></g><g><title>do_cos (2 samples, 0.05%)</title><rect x="9.6104%" y="117" width="0.0519%" height="15" fill="rgb(234,67,33)" fg:x="370" fg:w="2"/><text x="9.8604%" y="127.50"></text></g><g><title>do_sin (1 samples, 0.03%)</title><rect x="9.6623%" y="117" width="0.0260%" height="15" fill="rgb(247,98,35)" fg:x="372" fg:w="1"/><text x="9.9123%" y="127.50"></text></g><g><title>DirectionCosine::Sample_Isotropic (8 samples, 0.21%)</title><rect x="9.5325%" y="149" width="0.2078%" height="15" fill="rgb(247,138,52)" fg:x="367" fg:w="8"/><text x="9.7825%" y="159.50"></text></g><g><title>__sincos (6 samples, 0.16%)</title><rect x="9.5844%" y="133" width="0.1558%" height="15" fill="rgb(213,79,30)" fg:x="369" fg:w="6"/><text x="9.8344%" y="143.50"></text></g><g><title>reduce_sincos (2 samples, 0.05%)</title><rect x="9.6883%" y="117" width="0.0519%" height="15" fill="rgb(246,177,23)" fg:x="373" fg:w="2"/><text x="9.9383%" y="127.50"></text></g><g><title>Get_Speed_From_Energy (1 samples, 0.03%)</title><rect x="9.7403%" y="149" width="0.0260%" height="15" fill="rgb(230,62,27)" fg:x="375" fg:w="1"/><text x="9.9903%" y="159.50"></text></g><g><title>MCT_Cell_Position_3D_G (2 samples, 0.05%)</title><rect x="10.0260%" y="133" width="0.0519%" height="15" fill="rgb(216,154,8)" fg:x="386" fg:w="2"/><text x="10.2760%" y="143.50"></text></g><g><title>qs_vector&lt;MC_Vector&gt;::operator[] (1 samples, 0.03%)</title><rect x="10.0519%" y="117" width="0.0260%" height="15" fill="rgb(244,35,45)" fg:x="387" fg:w="1"/><text x="10.3019%" y="127.50"></text></g><g><title>MCT_Cell_Volume_3D_G_vector_tetDet (4 samples, 0.10%)</title><rect x="10.0779%" y="133" width="0.1039%" height="15" fill="rgb(251,115,12)" fg:x="388" fg:w="4"/><text x="10.3279%" y="143.50"></text></g><g><title>MCT_Generate_Coordinate_3D_G (2 samples, 0.05%)</title><rect x="10.1818%" y="133" width="0.0519%" height="15" fill="rgb(240,54,50)" fg:x="392" fg:w="2"/><text x="10.4318%" y="143.50"></text></g><g><title>qs_vector&lt;MC_Vector&gt;::operator[] (1 samples, 0.03%)</title><rect x="10.2338%" y="133" width="0.0260%" height="15" fill="rgb(233,84,52)" fg:x="394" fg:w="1"/><text x="10.4838%" y="143.50"></text></g><g><title>MCT_Generate_Coordinate_3D_G (21 samples, 0.55%)</title><rect x="9.7662%" y="149" width="0.5455%" height="15" fill="rgb(207,117,47)" fg:x="376" fg:w="21"/><text x="10.0162%" y="159.50"></text></g><g><title>rngSample (2 samples, 0.05%)</title><rect x="10.2597%" y="133" width="0.0519%" height="15" fill="rgb(249,43,39)" fg:x="395" fg:w="2"/><text x="10.5097%" y="143.50"></text></g><g><title>MC_Particle::MC_Particle (1 samples, 0.03%)</title><rect x="10.3117%" y="149" width="0.0260%" height="15" fill="rgb(209,38,44)" fg:x="397" fg:w="1"/><text x="10.5617%" y="159.50"></text></g><g><title>MC_SourceNow (2 samples, 0.05%)</title><rect x="10.3377%" y="149" width="0.0519%" height="15" fill="rgb(236,212,23)" fg:x="398" fg:w="2"/><text x="10.5877%" y="159.50"></text></g><g><title>ParticleVaultContainer::addProcessingParticle (1 samples, 0.03%)</title><rect x="10.3896%" y="149" width="0.0260%" height="15" fill="rgb(242,79,21)" fg:x="400" fg:w="1"/><text x="10.6396%" y="159.50"></text></g><g><title>ParticleVault::pushBaseParticle (1 samples, 0.03%)</title><rect x="10.3896%" y="133" width="0.0260%" height="15" fill="rgb(211,96,35)" fg:x="400" fg:w="1"/><text x="10.6396%" y="143.50"></text></g><g><title>MC_Base_Particle::operator= (1 samples, 0.03%)</title><rect x="10.3896%" y="117" width="0.0260%" height="15" fill="rgb(253,215,40)" fg:x="400" fg:w="1"/><text x="10.6396%" y="127.50"></text></g><g><title>qs_vector&lt;Balance&gt;::operator[] (1 samples, 0.03%)</title><rect x="10.4156%" y="149" width="0.0260%" height="15" fill="rgb(211,81,21)" fg:x="401" fg:w="1"/><text x="10.6656%" y="159.50"></text></g><g><title>pseudo_des (1 samples, 0.03%)</title><rect x="10.4416%" y="117" width="0.0260%" height="15" fill="rgb(208,190,38)" fg:x="402" fg:w="1"/><text x="10.6916%" y="127.50"></text></g><g><title>MC_SourceNow (40 samples, 1.04%)</title><rect x="9.4545%" y="165" width="1.0390%" height="15" fill="rgb(235,213,38)" fg:x="364" fg:w="40"/><text x="9.7045%" y="175.50"></text></g><g><title>rngSpawn_Random_Number_Seed (2 samples, 0.05%)</title><rect x="10.4416%" y="149" width="0.0519%" height="15" fill="rgb(237,122,38)" fg:x="402" fg:w="2"/><text x="10.6916%" y="159.50"></text></g><g><title>hash_state (2 samples, 0.05%)</title><rect x="10.4416%" y="133" width="0.0519%" height="15" fill="rgb(244,218,35)" fg:x="402" fg:w="2"/><text x="10.6916%" y="143.50"></text></g><g><title>rngSpawn_Random_Number_Seed (1 samples, 0.03%)</title><rect x="10.4675%" y="117" width="0.0260%" height="15" fill="rgb(240,68,47)" fg:x="403" fg:w="1"/><text x="10.7175%" y="127.50"></text></g><g><title>MonteCarlo::clearCrossSectionCache (3 samples, 0.08%)</title><rect x="10.4935%" y="165" width="0.0779%" height="15" fill="rgb(210,16,53)" fg:x="404" fg:w="3"/><text x="10.7435%" y="175.50"></text></g><g><title>MC_Domain::clearCrossSectionCache (3 samples, 0.08%)</title><rect x="10.4935%" y="149" width="0.0779%" height="15" fill="rgb(235,124,12)" fg:x="404" fg:w="3"/><text x="10.7435%" y="159.50"></text></g><g><title>[libc.so.6] (3 samples, 0.08%)</title><rect x="10.4935%" y="133" width="0.0779%" height="15" fill="rgb(224,169,11)" fg:x="404" fg:w="3"/><text x="10.7435%" y="143.50"></text></g><g><title>MC_Base_Particle::operator= (13 samples, 0.34%)</title><rect x="10.6494%" y="101" width="0.3377%" height="15" fill="rgb(250,166,2)" fg:x="410" fg:w="13"/><text x="10.8994%" y="111.50"></text></g><g><title>MC_Vector::operator= (3 samples, 0.08%)</title><rect x="10.9091%" y="85" width="0.0779%" height="15" fill="rgb(242,216,29)" fg:x="420" fg:w="3"/><text x="11.1591%" y="95.50"></text></g><g><title>PopulationControl (17 samples, 0.44%)</title><rect x="10.5714%" y="149" width="0.4416%" height="15" fill="rgb(230,116,27)" fg:x="407" fg:w="17"/><text x="10.8214%" y="159.50"></text></g><g><title>ParticleVaultContainer::addProcessingParticle (17 samples, 0.44%)</title><rect x="10.5714%" y="133" width="0.4416%" height="15" fill="rgb(228,99,48)" fg:x="407" fg:w="17"/><text x="10.8214%" y="143.50"></text></g><g><title>ParticleVault::pushBaseParticle (14 samples, 0.36%)</title><rect x="10.6494%" y="117" width="0.3636%" height="15" fill="rgb(253,11,6)" fg:x="410" fg:w="14"/><text x="10.8994%" y="127.50"></text></g><g><title>qs_vector&lt;MC_Base_Particle&gt;::operator[] (1 samples, 0.03%)</title><rect x="10.9870%" y="101" width="0.0260%" height="15" fill="rgb(247,143,39)" fg:x="423" fg:w="1"/><text x="11.2370%" y="111.50"></text></g><g><title>MC_Base_Particle::MC_Base_Particle (2 samples, 0.05%)</title><rect x="11.1688%" y="133" width="0.0519%" height="15" fill="rgb(236,97,10)" fg:x="430" fg:w="2"/><text x="11.4188%" y="143.50"></text></g><g><title>MC_Vector::operator= (2 samples, 0.05%)</title><rect x="11.1688%" y="117" width="0.0519%" height="15" fill="rgb(233,208,19)" fg:x="430" fg:w="2"/><text x="11.4188%" y="127.50"></text></g><g><title>rngSample (2 samples, 0.05%)</title><rect x="11.2208%" y="133" width="0.0519%" height="15" fill="rgb(216,164,2)" fg:x="432" fg:w="2"/><text x="11.4708%" y="143.50"></text></g><g><title>pseudo_des (3 samples, 0.08%)</title><rect x="11.2987%" y="101" width="0.0779%" height="15" fill="rgb(220,129,5)" fg:x="435" fg:w="3"/><text x="11.5487%" y="111.50"></text></g><g><title>hash_state (4 samples, 0.10%)</title><rect x="11.2987%" y="117" width="0.1039%" height="15" fill="rgb(242,17,10)" fg:x="435" fg:w="4"/><text x="11.5487%" y="127.50"></text></g><g><title>rngSpawn_Random_Number_Seed (1 samples, 0.03%)</title><rect x="11.3766%" y="101" width="0.0260%" height="15" fill="rgb(242,107,0)" fg:x="438" fg:w="1"/><text x="11.6266%" y="111.50"></text></g><g><title>PopulationControl (33 samples, 0.86%)</title><rect x="10.5714%" y="165" width="0.8571%" height="15" fill="rgb(251,28,31)" fg:x="407" fg:w="33"/><text x="10.8214%" y="175.50"></text></g><g><title>PopulationControlGuts (16 samples, 0.42%)</title><rect x="11.0130%" y="149" width="0.4156%" height="15" fill="rgb(233,223,10)" fg:x="424" fg:w="16"/><text x="11.2630%" y="159.50"></text></g><g><title>rngSpawn_Random_Number_Seed (6 samples, 0.16%)</title><rect x="11.2727%" y="133" width="0.1558%" height="15" fill="rgb(215,21,27)" fg:x="434" fg:w="6"/><text x="11.5227%" y="143.50"></text></g><g><title>rngSample (1 samples, 0.03%)</title><rect x="11.4026%" y="117" width="0.0260%" height="15" fill="rgb(232,23,21)" fg:x="439" fg:w="1"/><text x="11.6526%" y="127.50"></text></g><g><title>ParticleVault::operator[] (1 samples, 0.03%)</title><rect x="12.0519%" y="149" width="0.0260%" height="15" fill="rgb(244,5,23)" fg:x="464" fg:w="1"/><text x="12.3019%" y="159.50"></text></g><g><title>qs_vector&lt;MC_Base_Particle&gt;::operator[] (1 samples, 0.03%)</title><rect x="12.0519%" y="133" width="0.0260%" height="15" fill="rgb(226,81,46)" fg:x="464" fg:w="1"/><text x="12.3019%" y="143.50"></text></g><g><title>ParticleVaultContainer::getTaskProcessingVault (1 samples, 0.03%)</title><rect x="12.0779%" y="149" width="0.0260%" height="15" fill="rgb(247,70,30)" fg:x="465" fg:w="1"/><text x="12.3279%" y="159.50"></text></g><g><title>cycleInit (103 samples, 2.68%)</title><rect x="9.4545%" y="181" width="2.6753%" height="15" fill="rgb(212,68,19)" fg:x="364" fg:w="103"/><text x="9.7045%" y="191.50">cy..</text></g><g><title>RouletteLowWeightParticles (27 samples, 0.70%)</title><rect x="11.4286%" y="165" width="0.7013%" height="15" fill="rgb(240,187,13)" fg:x="440" fg:w="27"/><text x="11.6786%" y="175.50"></text></g><g><title>rngSample (1 samples, 0.03%)</title><rect x="12.1039%" y="149" width="0.0260%" height="15" fill="rgb(223,113,26)" fg:x="466" fg:w="1"/><text x="12.3539%" y="159.50"></text></g><g><title>NuclearData::getEnergyGroup (39 samples, 1.01%)</title><rect x="28.7013%" y="117" width="1.0130%" height="15" fill="rgb(206,192,2)" fg:x="1105" fg:w="39"/><text x="28.9513%" y="127.50"></text></g><g><title>qs_vector&lt;double&gt;::operator[] (2 samples, 0.05%)</title><rect x="29.6623%" y="101" width="0.0519%" height="15" fill="rgb(241,108,4)" fg:x="1142" fg:w="2"/><text x="29.9123%" y="111.50"></text></g><g><title>qs_vector&lt;NuclearDataReaction&gt;::size (1 samples, 0.03%)</title><rect x="29.9221%" y="101" width="0.0260%" height="15" fill="rgb(247,173,49)" fg:x="1152" fg:w="1"/><text x="30.1721%" y="111.50"></text></g><g><title>NuclearData::getNumberReactions (12 samples, 0.31%)</title><rect x="29.7143%" y="117" width="0.3117%" height="15" fill="rgb(224,114,35)" fg:x="1144" fg:w="12"/><text x="29.9643%" y="127.50"></text></g><g><title>qs_vector&lt;NuclearDataSpecies&gt;::operator[] (3 samples, 0.08%)</title><rect x="29.9481%" y="101" width="0.0779%" height="15" fill="rgb(245,159,27)" fg:x="1153" fg:w="3"/><text x="30.1981%" y="111.50"></text></g><g><title>NuclearDataReaction::sampleCollision (42 samples, 1.09%)</title><rect x="30.0260%" y="117" width="1.0909%" height="15" fill="rgb(245,172,44)" fg:x="1156" fg:w="42"/><text x="30.2760%" y="127.50"></text></g><g><title>rngSample (15 samples, 0.39%)</title><rect x="30.7273%" y="101" width="0.3896%" height="15" fill="rgb(236,23,11)" fg:x="1183" fg:w="15"/><text x="30.9773%" y="111.50"></text></g><g><title>MC_Base_Particle::operator= (2 samples, 0.05%)</title><rect x="31.1169%" y="85" width="0.0519%" height="15" fill="rgb(205,117,38)" fg:x="1198" fg:w="2"/><text x="31.3669%" y="95.50"></text></g><g><title>MC_Vector::operator= (1 samples, 0.03%)</title><rect x="31.1429%" y="69" width="0.0260%" height="15" fill="rgb(237,72,25)" fg:x="1199" fg:w="1"/><text x="31.3929%" y="79.50"></text></g><g><title>ParticleVaultContainer::addExtraParticle (3 samples, 0.08%)</title><rect x="31.1169%" y="117" width="0.0779%" height="15" fill="rgb(244,70,9)" fg:x="1198" fg:w="3"/><text x="31.3669%" y="127.50"></text></g><g><title>ParticleVault::pushParticle (3 samples, 0.08%)</title><rect x="31.1169%" y="101" width="0.0779%" height="15" fill="rgb(217,125,39)" fg:x="1198" fg:w="3"/><text x="31.3669%" y="111.50"></text></g><g><title>qs_vector&lt;MC_Base_Particle&gt;::atomic_Index_Inc (1 samples, 0.03%)</title><rect x="31.1688%" y="85" width="0.0260%" height="15" fill="rgb(235,36,10)" fg:x="1200" fg:w="1"/><text x="31.4188%" y="95.50"></text></g><g><title>NuclearDataReaction::getCrossSection (89 samples, 2.31%)</title><rect x="45.6883%" y="85" width="2.3117%" height="15" fill="rgb(251,123,47)" fg:x="1759" fg:w="89"/><text x="45.9383%" y="95.50">N..</text></g><g><title>qs_vector&lt;NuclearDataIsotope&gt;::operator[] (50 samples, 1.30%)</title><rect x="48.0000%" y="85" width="1.2987%" height="15" fill="rgb(221,13,13)" fg:x="1848" fg:w="50"/><text x="48.2500%" y="95.50"></text></g><g><title>qs_vector&lt;NuclearDataReaction&gt;::operator[] (56 samples, 1.45%)</title><rect x="49.2987%" y="85" width="1.4545%" height="15" fill="rgb(238,131,9)" fg:x="1898" fg:w="56"/><text x="49.5487%" y="95.50"></text></g><g><title>NuclearData::getReactionCrossSection (340 samples, 8.83%)</title><rect x="41.9481%" y="101" width="8.8312%" height="15" fill="rgb(211,50,8)" fg:x="1615" fg:w="340"/><text x="42.1981%" y="111.50">NuclearData:..</text></g><g><title>qs_vector&lt;NuclearDataSpecies&gt;::operator[] (1 samples, 0.03%)</title><rect x="50.7532%" y="85" width="0.0260%" height="15" fill="rgb(245,182,24)" fg:x="1954" fg:w="1"/><text x="51.0032%" y="95.50"></text></g><g><title>qs_vector&lt;Isotope&gt;::operator[] (146 samples, 3.79%)</title><rect x="50.7792%" y="101" width="3.7922%" height="15" fill="rgb(242,14,37)" fg:x="1955" fg:w="146"/><text x="51.0292%" y="111.50">qs_v..</text></g><g><title>qs_vector&lt;MC_Cell_State&gt;::operator[] (67 samples, 1.74%)</title><rect x="54.5714%" y="101" width="1.7403%" height="15" fill="rgb(246,228,12)" fg:x="2101" fg:w="67"/><text x="54.8214%" y="111.50"></text></g><g><title>qs_vector&lt;MC_Domain&gt;::operator[] (4 samples, 0.10%)</title><rect x="56.3117%" y="101" width="0.1039%" height="15" fill="rgb(213,55,15)" fg:x="2168" fg:w="4"/><text x="56.5617%" y="111.50"></text></g><g><title>macroscopicCrossSection (981 samples, 25.48%)</title><rect x="31.1948%" y="117" width="25.4805%" height="15" fill="rgb(209,9,3)" fg:x="1201" fg:w="981"/><text x="31.4448%" y="127.50">macroscopicCrossSection</text></g><g><title>qs_vector&lt;Material&gt;::operator[] (10 samples, 0.26%)</title><rect x="56.4156%" y="101" width="0.2597%" height="15" fill="rgb(230,59,30)" fg:x="2172" fg:w="10"/><text x="56.6656%" y="111.50"></text></g><g><title>qs_vector&lt;Balance&gt;::operator[] (4 samples, 0.10%)</title><rect x="56.6753%" y="117" width="0.1039%" height="15" fill="rgb(209,121,21)" fg:x="2182" fg:w="4"/><text x="56.9253%" y="127.50"></text></g><g><title>qs_vector&lt;Isotope&gt;::size (2 samples, 0.05%)</title><rect x="56.7792%" y="117" width="0.0519%" height="15" fill="rgb(220,109,13)" fg:x="2186" fg:w="2"/><text x="57.0292%" y="127.50"></text></g><g><title>qs_vector&lt;Material&gt;::operator[] (3 samples, 0.08%)</title><rect x="56.8312%" y="117" width="0.0779%" height="15" fill="rgb(232,18,1)" fg:x="2188" fg:w="3"/><text x="57.0812%" y="127.50"></text></g><g><title>qs_vector&lt;NuclearDataIsotope&gt;::operator[] (2 samples, 0.05%)</title><rect x="56.9091%" y="117" width="0.0519%" height="15" fill="rgb(215,41,42)" fg:x="2191" fg:w="2"/><text x="57.1591%" y="127.50"></text></g><g><title>qs_vector&lt;NuclearDataReaction&gt;::operator[] (12 samples, 0.31%)</title><rect x="56.9610%" y="117" width="0.3117%" height="15" fill="rgb(224,123,36)" fg:x="2193" fg:w="12"/><text x="57.2110%" y="127.50"></text></g><g><title>qs_vector&lt;NuclearDataSpecies&gt;::operator[] (1 samples, 0.03%)</title><rect x="57.2727%" y="117" width="0.0260%" height="15" fill="rgb(240,125,3)" fg:x="2205" fg:w="1"/><text x="57.5227%" y="127.50"></text></g><g><title>rngSample (3 samples, 0.08%)</title><rect x="57.2987%" y="117" width="0.0779%" height="15" fill="rgb(205,98,50)" fg:x="2206" fg:w="3"/><text x="57.5487%" y="127.50"></text></g><g><title>pseudo_des (1 samples, 0.03%)</title><rect x="57.4026%" y="85" width="0.0260%" height="15" fill="rgb(205,185,37)" fg:x="2210" fg:w="1"/><text x="57.6526%" y="95.50"></text></g><g><title>rngSpawn_Random_Number_Seed (3 samples, 0.08%)</title><rect x="57.3766%" y="117" width="0.0779%" height="15" fill="rgb(238,207,15)" fg:x="2209" fg:w="3"/><text x="57.6266%" y="127.50"></text></g><g><title>hash_state (2 samples, 0.05%)</title><rect x="57.4026%" y="101" width="0.0519%" height="15" fill="rgb(213,199,42)" fg:x="2210" fg:w="2"/><text x="57.6526%" y="111.50"></text></g><g><title>rngSpawn_Random_Number_Seed (1 samples, 0.03%)</title><rect x="57.4286%" y="85" width="0.0260%" height="15" fill="rgb(235,201,11)" fg:x="2211" fg:w="1"/><text x="57.6786%" y="95.50"></text></g><g><title>DirectionCosine::Rotate3DVector (17 samples, 0.44%)</title><rect x="57.6364%" y="101" width="0.4416%" height="15" fill="rgb(207,46,11)" fg:x="2219" fg:w="17"/><text x="57.8864%" y="111.50"></text></g><g><title>[libm.so.6] (1 samples, 0.03%)</title><rect x="58.0779%" y="101" width="0.0260%" height="15" fill="rgb(241,35,35)" fg:x="2236" fg:w="1"/><text x="58.3279%" y="111.50"></text></g><g><title>[qs] (2 samples, 0.05%)</title><rect x="58.1039%" y="101" width="0.0519%" height="15" fill="rgb(243,32,47)" fg:x="2237" fg:w="2"/><text x="58.3539%" y="111.50"></text></g><g><title>__ieee754_log_fma (19 samples, 0.49%)</title><rect x="58.1558%" y="101" width="0.4935%" height="15" fill="rgb(247,202,23)" fg:x="2239" fg:w="19"/><text x="58.4058%" y="111.50"></text></g><g><title>do_cos (17 samples, 0.44%)</title><rect x="58.7273%" y="85" width="0.4416%" height="15" fill="rgb(219,102,11)" fg:x="2261" fg:w="17"/><text x="58.9773%" y="95.50"></text></g><g><title>do_sin (31 samples, 0.81%)</title><rect x="59.1688%" y="85" width="0.8052%" height="15" fill="rgb(243,110,44)" fg:x="2278" fg:w="31"/><text x="59.4188%" y="95.50"></text></g><g><title>libc_feholdsetround_sse_ctx (1 samples, 0.03%)</title><rect x="59.9740%" y="85" width="0.0260%" height="15" fill="rgb(222,74,54)" fg:x="2309" fg:w="1"/><text x="60.2240%" y="95.50"></text></g><g><title>libc_feresetround_sse_ctx (1 samples, 0.03%)</title><rect x="60.0000%" y="85" width="0.0260%" height="15" fill="rgb(216,99,12)" fg:x="2310" fg:w="1"/><text x="60.2500%" y="95.50"></text></g><g><title>__sincos (68 samples, 1.77%)</title><rect x="58.6494%" y="101" width="1.7662%" height="15" fill="rgb(226,22,26)" fg:x="2258" fg:w="68"/><text x="58.8994%" y="111.50"></text></g><g><title>reduce_sincos (15 samples, 0.39%)</title><rect x="60.0260%" y="85" width="0.3896%" height="15" fill="rgb(217,163,10)" fg:x="2311" fg:w="15"/><text x="60.2760%" y="95.50"></text></g><g><title>CollisionEvent (1,824 samples, 47.38%)</title><rect x="13.2208%" y="133" width="47.3766%" height="15" fill="rgb(213,25,53)" fg:x="509" fg:w="1824"/><text x="13.4708%" y="143.50">CollisionEvent</text></g><g><title>updateTrajectory (121 samples, 3.14%)</title><rect x="57.4545%" y="117" width="3.1429%" height="15" fill="rgb(252,105,26)" fg:x="2212" fg:w="121"/><text x="57.7045%" y="127.50">upd..</text></g><g><title>rngSample (7 samples, 0.18%)</title><rect x="60.4156%" y="101" width="0.1818%" height="15" fill="rgb(220,39,43)" fg:x="2326" fg:w="7"/><text x="60.6656%" y="111.50"></text></g><g><title>MC_Facet_Crossing_Event (4 samples, 0.10%)</title><rect x="60.5974%" y="133" width="0.1039%" height="15" fill="rgb(229,68,48)" fg:x="2333" fg:w="4"/><text x="60.8474%" y="143.50"></text></g><g><title>MCT_Adjacent_Facet (1 samples, 0.03%)</title><rect x="60.6753%" y="117" width="0.0260%" height="15" fill="rgb(252,8,32)" fg:x="2336" fg:w="1"/><text x="60.9253%" y="127.50"></text></g><g><title>qs_vector&lt;MC_Facet_Adjacency_Cell&gt;::operator[] (1 samples, 0.03%)</title><rect x="60.6753%" y="101" width="0.0260%" height="15" fill="rgb(223,20,43)" fg:x="2336" fg:w="1"/><text x="60.9253%" y="111.50"></text></g><g><title>MCT_Nearest_Facet_3D_G_Distance_To_Segment (69 samples, 1.79%)</title><rect x="70.9610%" y="85" width="1.7922%" height="15" fill="rgb(229,81,49)" fg:x="2732" fg:w="69"/><text x="71.2110%" y="95.50">M..</text></g><g><title>MCT_Nearest_Facet_Find_Nearest (21 samples, 0.55%)</title><rect x="72.7532%" y="85" width="0.5455%" height="15" fill="rgb(236,28,36)" fg:x="2801" fg:w="21"/><text x="73.0032%" y="95.50"></text></g><g><title>MCT_Nearest_Facet_3D_G (123 samples, 3.19%)</title><rect x="70.7792%" y="101" width="3.1948%" height="15" fill="rgb(249,185,26)" fg:x="2725" fg:w="123"/><text x="71.0292%" y="111.50">MCT..</text></g><g><title>MC_Distance_To_Facet::MC_Distance_To_Facet (26 samples, 0.68%)</title><rect x="73.2987%" y="85" width="0.6753%" height="15" fill="rgb(249,174,33)" fg:x="2822" fg:w="26"/><text x="73.5487%" y="95.50"></text></g><g><title>MCT_Nearest_Facet_3D_G_Distance_To_Segment (493 samples, 12.81%)</title><rect x="73.9740%" y="101" width="12.8052%" height="15" fill="rgb(233,201,37)" fg:x="2848" fg:w="493"/><text x="74.2240%" y="111.50">MCT_Nearest_Facet_3..</text></g><g><title>MCT_Nearest_Facet_Find_Nearest (78 samples, 2.03%)</title><rect x="86.7792%" y="101" width="2.0260%" height="15" fill="rgb(221,78,26)" fg:x="3341" fg:w="78"/><text x="87.0292%" y="111.50">M..</text></g><g><title>MCT_Nearest_Facet_Find_Nearest (75 samples, 1.95%)</title><rect x="86.8571%" y="85" width="1.9481%" height="15" fill="rgb(250,127,30)" fg:x="3344" fg:w="75"/><text x="87.1071%" y="95.50">M..</text></g><g><title>MC_Distance_To_Facet::MC_Distance_To_Facet (37 samples, 0.96%)</title><rect x="88.8052%" y="101" width="0.9610%" height="15" fill="rgb(230,49,44)" fg:x="3419" fg:w="37"/><text x="89.0552%" y="111.50"></text></g><g><title>qs_vector&lt;MC_Domain&gt;::operator[] (3 samples, 0.08%)</title><rect x="89.7662%" y="101" width="0.0779%" height="15" fill="rgb(229,67,23)" fg:x="3456" fg:w="3"/><text x="90.0162%" y="111.50"></text></g><g><title>qs_vector&lt;MC_Facet_Adjacency_Cell&gt;::operator[] (2 samples, 0.05%)</title><rect x="89.8442%" y="101" width="0.0519%" height="15" fill="rgb(249,83,47)" fg:x="3459" fg:w="2"/><text x="90.0942%" y="111.50"></text></g><g><title>MCT_Nearest_Facet (1,134 samples, 29.45%)</title><rect x="62.4156%" y="117" width="29.4545%" height="15" fill="rgb(215,43,3)" fg:x="2403" fg:w="1134"/><text x="62.6656%" y="127.50">MCT_Nearest_Facet</text></g><g><title>qs_vector&lt;MC_Vector&gt;::operator[] (76 samples, 1.97%)</title><rect x="89.8961%" y="101" width="1.9740%" height="15" fill="rgb(238,154,13)" fg:x="3461" fg:w="76"/><text x="90.1461%" y="111.50">q..</text></g><g><title>MC_Find_Min (4 samples, 0.10%)</title><rect x="91.8701%" y="117" width="0.1039%" height="15" fill="rgb(219,56,2)" fg:x="3537" fg:w="4"/><text x="92.1201%" y="127.50"></text></g><g><title>MC_Particle::Move_Particle (1 samples, 0.03%)</title><rect x="91.9740%" y="117" width="0.0260%" height="15" fill="rgb(233,0,4)" fg:x="3541" fg:w="1"/><text x="92.2240%" y="127.50"></text></g><g><title>MC_Segment_Outcome (1 samples, 0.03%)</title><rect x="92.0000%" y="117" width="0.0260%" height="15" fill="rgb(235,30,7)" fg:x="3542" fg:w="1"/><text x="92.2500%" y="127.50"></text></g><g><title>MC_Vector::Length (11 samples, 0.29%)</title><rect x="92.0260%" y="117" width="0.2857%" height="15" fill="rgb(250,79,13)" fg:x="3543" fg:w="11"/><text x="92.2760%" y="127.50"></text></g><g><title>Tallies::TallyScalarFlux (64 samples, 1.66%)</title><rect x="92.3117%" y="117" width="1.6623%" height="15" fill="rgb(211,146,34)" fg:x="3554" fg:w="64"/><text x="92.5617%" y="127.50"></text></g><g><title>NuclearDataReaction::getCrossSection (1 samples, 0.03%)</title><rect x="95.9740%" y="69" width="0.0260%" height="15" fill="rgb(228,22,38)" fg:x="3695" fg:w="1"/><text x="96.2240%" y="79.50"></text></g><g><title>NuclearData::getTotalCrossSection (1 samples, 0.03%)</title><rect x="95.9740%" y="53" width="0.0260%" height="15" fill="rgb(235,168,5)" fg:x="3695" fg:w="1"/><text x="96.2240%" y="63.50"></text></g><g><title>NuclearData::getTotalCrossSection (31 samples, 0.81%)</title><rect x="95.2987%" y="85" width="0.8052%" height="15" fill="rgb(221,155,16)" fg:x="3669" fg:w="31"/><text x="95.5487%" y="95.50"></text></g><g><title>qs_vector&lt;NuclearDataReaction&gt;::operator[] (4 samples, 0.10%)</title><rect x="96.0000%" y="69" width="0.1039%" height="15" fill="rgb(215,215,53)" fg:x="3696" fg:w="4"/><text x="96.2500%" y="79.50"></text></g><g><title>macroscopicCrossSection (33 samples, 0.86%)</title><rect x="95.2727%" y="101" width="0.8571%" height="15" fill="rgb(223,4,10)" fg:x="3668" fg:w="33"/><text x="95.5227%" y="111.50"></text></g><g><title>qs_vector&lt;Isotope&gt;::operator[] (1 samples, 0.03%)</title><rect x="96.1039%" y="85" width="0.0260%" height="15" fill="rgb(234,103,6)" fg:x="3700" fg:w="1"/><text x="96.3539%" y="95.50"></text></g><g><title>MC_Segment_Outcome (1,366 samples, 35.48%)</title><rect x="60.7013%" y="133" width="35.4805%" height="15" fill="rgb(227,97,0)" fg:x="2337" fg:w="1366"/><text x="60.9513%" y="143.50">MC_Segment_Outcome</text></g><g><title>weightedMacroscopicCrossSection (85 samples, 2.21%)</title><rect x="93.9740%" y="117" width="2.2078%" height="15" fill="rgb(234,150,53)" fg:x="3618" fg:w="85"/><text x="94.2240%" y="127.50">w..</text></g><g><title>qs_vector&lt;MC_Cell_State&gt;::operator[] (2 samples, 0.05%)</title><rect x="96.1299%" y="101" width="0.0519%" height="15" fill="rgb(228,201,54)" fg:x="3701" fg:w="2"/><text x="96.3799%" y="111.50"></text></g><g><title>CycleTrackingFunction (3,228 samples, 83.84%)</title><rect x="12.3636%" y="149" width="83.8442%" height="15" fill="rgb(222,22,37)" fg:x="476" fg:w="3228"/><text x="12.6136%" y="159.50">CycleTrackingFunction</text></g><g><title>qs_vector&lt;Balance&gt;::operator[] (1 samples, 0.03%)</title><rect x="96.1818%" y="133" width="0.0260%" height="15" fill="rgb(237,53,32)" fg:x="3703" fg:w="1"/><text x="96.4318%" y="143.50"></text></g><g><title>NuclearData::getEnergyGroup (48 samples, 1.25%)</title><rect x="96.3117%" y="133" width="1.2468%" height="15" fill="rgb(233,25,53)" fg:x="3708" fg:w="48"/><text x="96.5617%" y="143.50"></text></g><g><title>qs_vector&lt;double&gt;::operator[] (1 samples, 0.03%)</title><rect x="97.5325%" y="117" width="0.0260%" height="15" fill="rgb(210,40,34)" fg:x="3755" fg:w="1"/><text x="97.7825%" y="127.50"></text></g><g><title>MC_Base_Particle::MC_Base_Particle (12 samples, 0.31%)</title><rect x="97.5584%" y="117" width="0.3117%" height="15" fill="rgb(241,220,44)" fg:x="3756" fg:w="12"/><text x="97.8084%" y="127.50"></text></g><g><title>MC_Vector::operator= (3 samples, 0.08%)</title><rect x="97.7922%" y="101" width="0.0779%" height="15" fill="rgb(235,28,35)" fg:x="3765" fg:w="3"/><text x="98.0422%" y="111.50"></text></g><g><title>MC_Particle::MC_Particle (22 samples, 0.57%)</title><rect x="97.8701%" y="117" width="0.5714%" height="15" fill="rgb(210,56,17)" fg:x="3768" fg:w="22"/><text x="98.1201%" y="127.50"></text></g><g><title>MC_Vector::Length (7 samples, 0.18%)</title><rect x="98.2597%" y="101" width="0.1818%" height="15" fill="rgb(224,130,29)" fg:x="3783" fg:w="7"/><text x="98.5097%" y="111.50"></text></g><g><title>MC_Particle::operator= (5 samples, 0.13%)</title><rect x="98.4416%" y="117" width="0.1299%" height="15" fill="rgb(235,212,8)" fg:x="3790" fg:w="5"/><text x="98.6916%" y="127.50"></text></g><g><title>ParticleVault::size (2 samples, 0.05%)</title><rect x="98.5714%" y="117" width="0.0519%" height="15" fill="rgb(223,33,50)" fg:x="3795" fg:w="2"/><text x="98.8214%" y="127.50"></text></g><g><title>MC_Load_Particle (95 samples, 2.47%)</title><rect x="96.2078%" y="149" width="2.4675%" height="15" fill="rgb(219,149,13)" fg:x="3704" fg:w="95"/><text x="96.4578%" y="159.50">MC..</text></g><g><title>ParticleVault::getParticle (43 samples, 1.12%)</title><rect x="97.5584%" y="133" width="1.1169%" height="15" fill="rgb(250,156,29)" fg:x="3756" fg:w="43"/><text x="97.8084%" y="143.50"></text></g><g><title>qs_vector&lt;MC_Base_Particle&gt;::operator[] (2 samples, 0.05%)</title><rect x="98.6234%" y="117" width="0.0519%" height="15" fill="rgb(216,193,19)" fg:x="3797" fg:w="2"/><text x="98.8734%" y="127.50"></text></g><g><title>DirectionCosine::DirectionCosine (1 samples, 0.03%)</title><rect x="98.7792%" y="133" width="0.0260%" height="15" fill="rgb(216,135,14)" fg:x="3803" fg:w="1"/><text x="99.0292%" y="143.50"></text></g><g><title>MC_Particle::MC_Particle (6 samples, 0.16%)</title><rect x="98.6753%" y="149" width="0.1558%" height="15" fill="rgb(241,47,5)" fg:x="3799" fg:w="6"/><text x="98.9253%" y="159.50"></text></g><g><title>MC_Vector::MC_Vector (1 samples, 0.03%)</title><rect x="98.8052%" y="133" width="0.0260%" height="15" fill="rgb(233,42,35)" fg:x="3804" fg:w="1"/><text x="99.0552%" y="143.50"></text></g><g><title>CycleTrackingGuts (3,337 samples, 86.68%)</title><rect x="12.1818%" y="165" width="86.6753%" height="15" fill="rgb(231,13,6)" fg:x="469" fg:w="3337"/><text x="12.4318%" y="175.50">CycleTrackingGuts</text></g><g><title>ParticleVault::invalidateParticle (1 samples, 0.03%)</title><rect x="98.8312%" y="149" width="0.0260%" height="15" fill="rgb(207,181,40)" fg:x="3805" fg:w="1"/><text x="99.0812%" y="159.50"></text></g><g><title>ParticleVaultContainer::cleanExtraVaults (8 samples, 0.21%)</title><rect x="98.8571%" y="165" width="0.2078%" height="15" fill="rgb(254,173,49)" fg:x="3806" fg:w="8"/><text x="99.1071%" y="175.50"></text></g><g><title>ParticleVault::collapse (8 samples, 0.21%)</title><rect x="98.8571%" y="149" width="0.2078%" height="15" fill="rgb(221,1,38)" fg:x="3806" fg:w="8"/><text x="99.1071%" y="159.50"></text></g><g><title>ParticleVault::append (8 samples, 0.21%)</title><rect x="98.8571%" y="133" width="0.2078%" height="15" fill="rgb(206,124,46)" fg:x="3806" fg:w="8"/><text x="99.1071%" y="143.50"></text></g><g><title>qs_vector&lt;MC_Base_Particle&gt;::appendList (8 samples, 0.21%)</title><rect x="98.8571%" y="117" width="0.2078%" height="15" fill="rgb(249,21,11)" fg:x="3806" fg:w="8"/><text x="99.1071%" y="127.50"></text></g><g><title>MC_Base_Particle::operator= (8 samples, 0.21%)</title><rect x="98.8571%" y="101" width="0.2078%" height="15" fill="rgb(222,201,40)" fg:x="3806" fg:w="8"/><text x="99.1071%" y="111.50"></text></g><g><title>MC_Vector::operator= (3 samples, 0.08%)</title><rect x="98.9870%" y="85" width="0.0779%" height="15" fill="rgb(235,61,29)" fg:x="3811" fg:w="3"/><text x="99.2370%" y="95.50"></text></g><g><title>ParticleVaultContainer::collapseProcessed (3 samples, 0.08%)</title><rect x="99.0649%" y="165" width="0.0779%" height="15" fill="rgb(219,207,3)" fg:x="3814" fg:w="3"/><text x="99.3149%" y="175.50"></text></g><g><title>ParticleVault::collapse (3 samples, 0.08%)</title><rect x="99.0649%" y="149" width="0.0779%" height="15" fill="rgb(222,56,46)" fg:x="3814" fg:w="3"/><text x="99.3149%" y="159.50"></text></g><g><title>ParticleVault::append (3 samples, 0.08%)</title><rect x="99.0649%" y="133" width="0.0779%" height="15" fill="rgb(239,76,54)" fg:x="3814" fg:w="3"/><text x="99.3149%" y="143.50"></text></g><g><title>qs_vector&lt;MC_Base_Particle&gt;::appendList (3 samples, 0.08%)</title><rect x="99.0649%" y="117" width="0.0779%" height="15" fill="rgb(231,124,27)" fg:x="3814" fg:w="3"/><text x="99.3149%" y="127.50"></text></g><g><title>MC_Base_Particle::operator= (3 samples, 0.08%)</title><rect x="99.0649%" y="101" width="0.0779%" height="15" fill="rgb(249,195,6)" fg:x="3814" fg:w="3"/><text x="99.3149%" y="111.50"></text></g><g><title>cycleTracking (3,351 samples, 87.04%)</title><rect x="12.1299%" y="181" width="87.0390%" height="15" fill="rgb(237,174,47)" fg:x="467" fg:w="3351"/><text x="12.3799%" y="191.50">cycleTracking</text></g><g><title>std::chrono::_V2::system_clock::now (1 samples, 0.03%)</title><rect x="99.1429%" y="165" width="0.0260%" height="15" fill="rgb(206,201,31)" fg:x="3817" fg:w="1"/><text x="99.3929%" y="175.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.03%)</title><rect x="99.1429%" y="149" width="0.0260%" height="15" fill="rgb(231,57,52)" fg:x="3817" fg:w="1"/><text x="99.3929%" y="159.50"></text></g><g><title>[[vdso]] (1 samples, 0.03%)</title><rect x="99.1429%" y="133" width="0.0260%" height="15" fill="rgb(248,177,22)" fg:x="3817" fg:w="1"/><text x="99.3929%" y="143.50"></text></g><g><title>[[vdso]] (1 samples, 0.03%)</title><rect x="99.1429%" y="117" width="0.0260%" height="15" fill="rgb(215,211,37)" fg:x="3817" fg:w="1"/><text x="99.3929%" y="127.50"></text></g><g><title>MC_Mesh_Domain::MC_Mesh_Domain (1 samples, 0.03%)</title><rect x="99.1948%" y="133" width="0.0260%" height="15" fill="rgb(241,128,51)" fg:x="3819" fg:w="1"/><text x="99.4448%" y="143.50"></text></g><g><title>GlobalFccGrid::getNodeGids (1 samples, 0.03%)</title><rect x="99.1948%" y="117" width="0.0260%" height="15" fill="rgb(227,165,31)" fg:x="3819" fg:w="1"/><text x="99.4448%" y="127.50"></text></g><g><title>IndexToTuple::operator (1 samples, 0.03%)</title><rect x="99.1948%" y="101" width="0.0260%" height="15" fill="rgb(228,167,24)" fg:x="3819" fg:w="1"/><text x="99.4448%" y="111.50"></text></g><g><title>bootstrapNodeMap (1 samples, 0.03%)</title><rect x="99.2208%" y="133" width="0.0260%" height="15" fill="rgb(228,143,12)" fg:x="3820" fg:w="1"/><text x="99.4708%" y="143.50"></text></g><g><title>std::map&lt;unsigned long, int, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::insert&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; (1 samples, 0.03%)</title><rect x="99.2208%" y="117" width="0.0260%" height="15" fill="rgb(249,149,8)" fg:x="3820" fg:w="1"/><text x="99.4708%" y="127.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_emplace_unique&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; (1 samples, 0.03%)</title><rect x="99.2208%" y="101" width="0.0260%" height="15" fill="rgb(243,35,44)" fg:x="3820" fg:w="1"/><text x="99.4708%" y="111.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_insert_node (1 samples, 0.03%)</title><rect x="99.2208%" y="85" width="0.0260%" height="15" fill="rgb(246,89,9)" fg:x="3820" fg:w="1"/><text x="99.4708%" y="95.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_end (1 samples, 0.03%)</title><rect x="99.2208%" y="69" width="0.0260%" height="15" fill="rgb(233,213,13)" fg:x="3820" fg:w="1"/><text x="99.4708%" y="79.50"></text></g><g><title>std::map&lt;int, int, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::operator[] (1 samples, 0.03%)</title><rect x="99.2468%" y="117" width="0.0260%" height="15" fill="rgb(233,141,41)" fg:x="3821" fg:w="1"/><text x="99.4968%" y="127.50"></text></g><g><title>std::map&lt;int, int, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::lower_bound (1 samples, 0.03%)</title><rect x="99.2468%" y="101" width="0.0260%" height="15" fill="rgb(239,167,4)" fg:x="3821" fg:w="1"/><text x="99.4968%" y="111.50"></text></g><g><title>std::_Rb_tree&lt;int, std::pair&lt;int const, int&gt;, std::_Select1st&lt;std::pair&lt;int const, int&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::lower_bound (1 samples, 0.03%)</title><rect x="99.2468%" y="85" width="0.0260%" height="15" fill="rgb(209,217,16)" fg:x="3821" fg:w="1"/><text x="99.4968%" y="95.50"></text></g><g><title>std::_Rb_tree&lt;int, std::pair&lt;int const, int&gt;, std::_Select1st&lt;std::pair&lt;int const, int&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.03%)</title><rect x="99.2468%" y="69" width="0.0260%" height="15" fill="rgb(219,88,35)" fg:x="3821" fg:w="1"/><text x="99.4968%" y="79.50"></text></g><g><title>std::_Rb_tree&lt;int, std::pair&lt;int const, int&gt;, std::_Select1st&lt;std::pair&lt;int const, int&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::_S_left (1 samples, 0.03%)</title><rect x="99.2468%" y="53" width="0.0260%" height="15" fill="rgb(220,193,23)" fg:x="3821" fg:w="1"/><text x="99.4968%" y="63.50"></text></g><g><title>MC_Mesh_Domain::MC_Mesh_Domain (6 samples, 0.16%)</title><rect x="99.1688%" y="149" width="0.1558%" height="15" fill="rgb(230,90,52)" fg:x="3818" fg:w="6"/><text x="99.4188%" y="159.50"></text></g><g><title>buildCells (3 samples, 0.08%)</title><rect x="99.2468%" y="133" width="0.0779%" height="15" fill="rgb(252,106,19)" fg:x="3821" fg:w="3"/><text x="99.4968%" y="143.50"></text></g><g><title>std::map&lt;unsigned long, int, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::find (2 samples, 0.05%)</title><rect x="99.2727%" y="117" width="0.0519%" height="15" fill="rgb(206,74,20)" fg:x="3822" fg:w="2"/><text x="99.5227%" y="127.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::find (2 samples, 0.05%)</title><rect x="99.2727%" y="101" width="0.0519%" height="15" fill="rgb(230,138,44)" fg:x="3822" fg:w="2"/><text x="99.5227%" y="111.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.03%)</title><rect x="99.2987%" y="85" width="0.0260%" height="15" fill="rgb(235,182,43)" fg:x="3823" fg:w="1"/><text x="99.5487%" y="95.50"></text></g><g><title>[libc.so.6] (1 samples, 0.03%)</title><rect x="99.3247%" y="149" width="0.0260%" height="15" fill="rgb(242,16,51)" fg:x="3824" fg:w="1"/><text x="99.5747%" y="159.50"></text></g><g><title>cellVolume (1 samples, 0.03%)</title><rect x="99.3506%" y="149" width="0.0260%" height="15" fill="rgb(248,9,4)" fg:x="3825" fg:w="1"/><text x="99.6006%" y="159.50"></text></g><g><title>qs_vector&lt;MC_Vector&gt;::operator[] (1 samples, 0.03%)</title><rect x="99.3506%" y="133" width="0.0260%" height="15" fill="rgb(210,31,22)" fg:x="3825" fg:w="1"/><text x="99.6006%" y="143.50"></text></g><g><title>MC_Domain::MC_Domain (9 samples, 0.23%)</title><rect x="99.1688%" y="165" width="0.2338%" height="15" fill="rgb(239,54,39)" fg:x="3818" fg:w="9"/><text x="99.4188%" y="175.50"></text></g><g><title>findCellCenter (1 samples, 0.03%)</title><rect x="99.3766%" y="149" width="0.0260%" height="15" fill="rgb(230,99,41)" fg:x="3826" fg:w="1"/><text x="99.6266%" y="159.50"></text></g><g><title>GridAssignmentObject::nearestCenter (1 samples, 0.03%)</title><rect x="99.4026%" y="149" width="0.0260%" height="15" fill="rgb(253,106,12)" fg:x="3827" fg:w="1"/><text x="99.6526%" y="159.50"></text></g><g><title>MeshPartition::buildMeshPartition (1 samples, 0.03%)</title><rect x="99.4286%" y="149" width="0.0260%" height="15" fill="rgb(213,46,41)" fg:x="3828" fg:w="1"/><text x="99.6786%" y="159.50"></text></g><g><title>SharedMemoryCommObject::exchange (1 samples, 0.03%)</title><rect x="99.4286%" y="133" width="0.0260%" height="15" fill="rgb(215,133,35)" fg:x="3828" fg:w="1"/><text x="99.6786%" y="143.50"></text></g><g><title>MeshPartition::addCell (1 samples, 0.03%)</title><rect x="99.4286%" y="117" width="0.0260%" height="15" fill="rgb(213,28,5)" fg:x="3828" fg:w="1"/><text x="99.6786%" y="127.50"></text></g><g><title>std::map&lt;unsigned long, CellInfo, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::operator[] (1 samples, 0.03%)</title><rect x="99.4286%" y="101" width="0.0260%" height="15" fill="rgb(215,77,49)" fg:x="3828" fg:w="1"/><text x="99.6786%" y="111.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, CellInfo&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="99.4286%" y="85" width="0.0260%" height="15" fill="rgb(248,100,22)" fg:x="3828" fg:w="1"/><text x="99.6786%" y="95.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, CellInfo&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::_M_insert_node (1 samples, 0.03%)</title><rect x="99.4286%" y="69" width="0.0260%" height="15" fill="rgb(208,67,9)" fg:x="3828" fg:w="1"/><text x="99.6786%" y="79.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.03%)</title><rect x="99.4286%" y="53" width="0.0260%" height="15" fill="rgb(219,133,21)" fg:x="3828" fg:w="1"/><text x="99.6786%" y="63.50"></text></g><g><title>addNbrsToFlood (3 samples, 0.08%)</title><rect x="99.4545%" y="149" width="0.0779%" height="15" fill="rgb(246,46,29)" fg:x="3829" fg:w="3"/><text x="99.7045%" y="159.50"></text></g><g><title>std::set&lt;unsigned long, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::find (3 samples, 0.08%)</title><rect x="99.4545%" y="133" width="0.0779%" height="15" fill="rgb(246,185,52)" fg:x="3829" fg:w="3"/><text x="99.7045%" y="143.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::find (3 samples, 0.08%)</title><rect x="99.4545%" y="117" width="0.0779%" height="15" fill="rgb(252,136,11)" fg:x="3829" fg:w="3"/><text x="99.7045%" y="127.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::_M_lower_bound (3 samples, 0.08%)</title><rect x="99.4545%" y="101" width="0.0779%" height="15" fill="rgb(219,138,53)" fg:x="3829" fg:w="3"/><text x="99.7045%" y="111.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::_S_left (1 samples, 0.03%)</title><rect x="99.5065%" y="85" width="0.0260%" height="15" fill="rgb(211,51,23)" fg:x="3831" fg:w="1"/><text x="99.7565%" y="95.50"></text></g><g><title>MeshPartition::buildMeshPartition (6 samples, 0.16%)</title><rect x="99.4026%" y="165" width="0.1558%" height="15" fill="rgb(247,221,28)" fg:x="3827" fg:w="6"/><text x="99.6526%" y="175.50"></text></g><g><title>std::map&lt;unsigned long, CellInfo, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::insert&lt;std::pair&lt;unsigned long, CellInfo&gt; &gt; (1 samples, 0.03%)</title><rect x="99.5325%" y="149" width="0.0260%" height="15" fill="rgb(251,222,45)" fg:x="3832" fg:w="1"/><text x="99.7825%" y="159.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, CellInfo&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::_M_emplace_unique&lt;std::pair&lt;unsigned long, CellInfo&gt; &gt; (1 samples, 0.03%)</title><rect x="99.5325%" y="133" width="0.0260%" height="15" fill="rgb(217,162,53)" fg:x="3832" fg:w="1"/><text x="99.7825%" y="143.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, CellInfo&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;unsigned long, CellInfo&gt; &gt; (1 samples, 0.03%)</title><rect x="99.5325%" y="117" width="0.0260%" height="15" fill="rgb(229,93,14)" fg:x="3832" fg:w="1"/><text x="99.7825%" y="127.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, CellInfo&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::_M_get_node (1 samples, 0.03%)</title><rect x="99.5325%" y="101" width="0.0260%" height="15" fill="rgb(209,67,49)" fg:x="3832" fg:w="1"/><text x="99.7825%" y="111.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="99.5325%" y="85" width="0.0260%" height="15" fill="rgb(213,87,29)" fg:x="3832" fg:w="1"/><text x="99.7825%" y="95.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="99.5325%" y="69" width="0.0260%" height="15" fill="rgb(205,151,52)" fg:x="3832" fg:w="1"/><text x="99.7825%" y="79.50"></text></g><g><title>operator new (1 samples, 0.03%)</title><rect x="99.5325%" y="53" width="0.0260%" height="15" fill="rgb(253,215,39)" fg:x="3832" fg:w="1"/><text x="99.7825%" y="63.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="99.5325%" y="37" width="0.0260%" height="15" fill="rgb(221,220,41)" fg:x="3832" fg:w="1"/><text x="99.7825%" y="47.50"></text></g><g><title>MonteCarlo::MonteCarlo (10 samples, 0.26%)</title><rect x="99.5584%" y="165" width="0.2597%" height="15" fill="rgb(218,133,21)" fg:x="3833" fg:w="10"/><text x="99.8084%" y="175.50"></text></g><g><title>ParticleVaultContainer::ParticleVaultContainer (10 samples, 0.26%)</title><rect x="99.5584%" y="149" width="0.2597%" height="15" fill="rgb(221,193,43)" fg:x="3833" fg:w="10"/><text x="99.8084%" y="159.50"></text></g><g><title>ParticleVault::reserve (10 samples, 0.26%)</title><rect x="99.5584%" y="133" width="0.2597%" height="15" fill="rgb(240,128,52)" fg:x="3833" fg:w="10"/><text x="99.8084%" y="143.50"></text></g><g><title>qs_vector&lt;MC_Base_Particle&gt;::reserve (10 samples, 0.26%)</title><rect x="99.5584%" y="117" width="0.2597%" height="15" fill="rgb(253,114,12)" fg:x="3833" fg:w="10"/><text x="99.8084%" y="127.50"></text></g><g><title>MemoryControl::allocate&lt;MC_Base_Particle&gt; (10 samples, 0.26%)</title><rect x="99.5584%" y="101" width="0.2597%" height="15" fill="rgb(215,223,47)" fg:x="3833" fg:w="10"/><text x="99.8084%" y="111.50"></text></g><g><title>MC_Base_Particle::MC_Base_Particle (10 samples, 0.26%)</title><rect x="99.5584%" y="85" width="0.2597%" height="15" fill="rgb(248,225,23)" fg:x="3833" fg:w="10"/><text x="99.8084%" y="95.50"></text></g><g><title>MC_Vector::MC_Vector (3 samples, 0.08%)</title><rect x="99.7403%" y="69" width="0.0779%" height="15" fill="rgb(250,108,0)" fg:x="3840" fg:w="3"/><text x="99.9903%" y="79.50"></text></g><g><title>Polynomial::operator (1 samples, 0.03%)</title><rect x="99.8442%" y="101" width="0.0260%" height="15" fill="rgb(228,208,7)" fg:x="3844" fg:w="1"/><text x="100.0942%" y="111.50"></text></g><g><title>__libc_start_main_impl (3,499 samples, 90.88%)</title><rect x="9.0390%" y="229" width="90.8831%" height="15" fill="rgb(244,45,10)" fg:x="348" fg:w="3499"/><text x="9.2890%" y="239.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (3,499 samples, 90.88%)</title><rect x="9.0390%" y="213" width="90.8831%" height="15" fill="rgb(207,125,25)" fg:x="348" fg:w="3499"/><text x="9.2890%" y="223.50">__libc_start_call_main</text></g><g><title>main (3,499 samples, 90.88%)</title><rect x="9.0390%" y="197" width="90.8831%" height="15" fill="rgb(210,195,18)" fg:x="348" fg:w="3499"/><text x="9.2890%" y="207.50">main</text></g><g><title>initMC (29 samples, 0.75%)</title><rect x="99.1688%" y="181" width="0.7532%" height="15" fill="rgb(249,80,12)" fg:x="3818" fg:w="29"/><text x="99.4188%" y="191.50"></text></g><g><title>initMC (4 samples, 0.10%)</title><rect x="99.8182%" y="165" width="0.1039%" height="15" fill="rgb(221,65,9)" fg:x="3843" fg:w="4"/><text x="100.0682%" y="175.50"></text></g><g><title>NuclearData::addIsotope (3 samples, 0.08%)</title><rect x="99.8442%" y="149" width="0.0779%" height="15" fill="rgb(235,49,36)" fg:x="3844" fg:w="3"/><text x="100.0942%" y="159.50"></text></g><g><title>NuclearDataSpecies::addReaction (3 samples, 0.08%)</title><rect x="99.8442%" y="133" width="0.0779%" height="15" fill="rgb(225,32,20)" fg:x="3844" fg:w="3"/><text x="100.0942%" y="143.50"></text></g><g><title>NuclearDataReaction::NuclearDataReaction (3 samples, 0.08%)</title><rect x="99.8442%" y="117" width="0.0779%" height="15" fill="rgb(215,141,46)" fg:x="3844" fg:w="3"/><text x="100.0942%" y="127.50"></text></g><g><title>std::pow&lt;int, double&gt; (2 samples, 0.05%)</title><rect x="99.8701%" y="101" width="0.0519%" height="15" fill="rgb(250,160,47)" fg:x="3845" fg:w="2"/><text x="100.1201%" y="111.50"></text></g><g><title>__pow (2 samples, 0.05%)</title><rect x="99.8701%" y="85" width="0.0519%" height="15" fill="rgb(216,222,40)" fg:x="3845" fg:w="2"/><text x="100.1201%" y="95.50"></text></g><g><title>__ieee754_pow_fma (2 samples, 0.05%)</title><rect x="99.8701%" y="69" width="0.0519%" height="15" fill="rgb(234,217,39)" fg:x="3845" fg:w="2"/><text x="100.1201%" y="79.50"></text></g><g><title>log_inline (2 samples, 0.05%)</title><rect x="99.8701%" y="53" width="0.0519%" height="15" fill="rgb(207,178,40)" fg:x="3845" fg:w="2"/><text x="100.1201%" y="63.50"></text></g><g><title>_dl_setup_hash (1 samples, 0.03%)</title><rect x="99.9221%" y="197" width="0.0260%" height="15" fill="rgb(221,136,13)" fg:x="3847" fg:w="1"/><text x="100.1721%" y="207.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.03%)</title><rect x="99.9481%" y="165" width="0.0260%" height="15" fill="rgb(249,199,10)" fg:x="3848" fg:w="1"/><text x="100.1981%" y="175.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.03%)</title><rect x="99.9481%" y="149" width="0.0260%" height="15" fill="rgb(249,222,13)" fg:x="3848" fg:w="1"/><text x="100.1981%" y="159.50"></text></g><g><title>openaux (1 samples, 0.03%)</title><rect x="99.9481%" y="133" width="0.0260%" height="15" fill="rgb(244,185,38)" fg:x="3848" fg:w="1"/><text x="100.1981%" y="143.50"></text></g><g><title>_dl_map_object (1 samples, 0.03%)</title><rect x="99.9481%" y="117" width="0.0260%" height="15" fill="rgb(236,202,9)" fg:x="3848" fg:w="1"/><text x="100.1981%" y="127.50"></text></g><g><title>_dl_map_object_from_fd (1 samples, 0.03%)</title><rect x="99.9481%" y="101" width="0.0260%" height="15" fill="rgb(250,229,37)" fg:x="3848" fg:w="1"/><text x="100.1981%" y="111.50"></text></g><g><title>_dl_get_file_id (1 samples, 0.03%)</title><rect x="99.9481%" y="85" width="0.0260%" height="15" fill="rgb(206,174,23)" fg:x="3848" fg:w="1"/><text x="100.1981%" y="95.50"></text></g><g><title>all (3,850 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(211,33,43)" fg:x="0" fg:w="3850"/><text x="0.2500%" y="287.50"></text></g><g><title>qs (3,850 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(245,58,50)" fg:x="0" fg:w="3850"/><text x="0.2500%" y="271.50">qs</text></g><g><title>_start (3,507 samples, 91.09%)</title><rect x="8.9091%" y="245" width="91.0909%" height="15" fill="rgb(244,68,36)" fg:x="343" fg:w="3507"/><text x="9.1591%" y="255.50">_start</text></g><g><title>_dl_start (3 samples, 0.08%)</title><rect x="99.9221%" y="229" width="0.0779%" height="15" fill="rgb(232,229,15)" fg:x="3847" fg:w="3"/><text x="100.1721%" y="239.50"></text></g><g><title>_dl_start_final (3 samples, 0.08%)</title><rect x="99.9221%" y="213" width="0.0779%" height="15" fill="rgb(254,30,23)" fg:x="3847" fg:w="3"/><text x="100.1721%" y="223.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.05%)</title><rect x="99.9481%" y="197" width="0.0519%" height="15" fill="rgb(235,160,14)" fg:x="3848" fg:w="2"/><text x="100.1981%" y="207.50"></text></g><g><title>dl_main (2 samples, 0.05%)</title><rect x="99.9481%" y="181" width="0.0519%" height="15" fill="rgb(212,155,44)" fg:x="3848" fg:w="2"/><text x="100.1981%" y="191.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.03%)</title><rect x="99.9740%" y="165" width="0.0260%" height="15" fill="rgb(226,2,50)" fg:x="3849" fg:w="1"/><text x="100.2240%" y="175.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.03%)</title><rect x="99.9740%" y="149" width="0.0260%" height="15" fill="rgb(234,177,6)" fg:x="3849" fg:w="1"/><text x="100.2240%" y="159.50"></text></g><g><title>elf_machine_rela (1 samples, 0.03%)</title><rect x="99.9740%" y="133" width="0.0260%" height="15" fill="rgb(217,24,9)" fg:x="3849" fg:w="1"/><text x="100.2240%" y="143.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.03%)</title><rect x="99.9740%" y="117" width="0.0260%" height="15" fill="rgb(220,13,46)" fg:x="3849" fg:w="1"/><text x="100.2240%" y="127.50"></text></g><g><title>do_lookup_x (1 samples, 0.03%)</title><rect x="99.9740%" y="101" width="0.0260%" height="15" fill="rgb(239,221,27)" fg:x="3849" fg:w="1"/><text x="100.2240%" y="111.50"></text></g><g><title>check_match (1 samples, 0.03%)</title><rect x="99.9740%" y="85" width="0.0260%" height="15" fill="rgb(222,198,25)" fg:x="3849" fg:w="1"/><text x="100.2240%" y="95.50"></text></g><g><title>strcmp (1 samples, 0.03%)</title><rect x="99.9740%" y="69" width="0.0260%" height="15" fill="rgb(211,99,13)" fg:x="3849" fg:w="1"/><text x="100.2240%" y="79.50"></text></g></svg></svg>