<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="1829"><g><title>NuclearData::getReactionCrossSection (16 samples, 0.87%)</title><rect x="0.0000%" y="341" width="0.8748%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="16"/><text x="0.2500%" y="351.50"></text></g><g><title>CycleTrackingFunction (4 samples, 0.22%)</title><rect x="0.9841%" y="325" width="0.2187%" height="15" fill="rgb(217,0,24)" fg:x="18" fg:w="4"/><text x="1.2341%" y="335.50"></text></g><g><title>MCT_Generate_Coordinate_3D_G (1 samples, 0.05%)</title><rect x="1.2028%" y="325" width="0.0547%" height="15" fill="rgb(221,193,54)" fg:x="22" fg:w="1"/><text x="1.4528%" y="335.50"></text></g><g><title>MCT_Nearest_Facet (2 samples, 0.11%)</title><rect x="1.2575%" y="325" width="0.1093%" height="15" fill="rgb(248,212,6)" fg:x="23" fg:w="2"/><text x="1.5075%" y="335.50"></text></g><g><title>NuclearData::getEnergyGroup (2 samples, 0.11%)</title><rect x="1.3669%" y="325" width="0.1093%" height="15" fill="rgb(208,68,35)" fg:x="25" fg:w="2"/><text x="1.6169%" y="335.50"></text></g><g><title>ParticleVault::getParticle (3 samples, 0.16%)</title><rect x="1.4762%" y="325" width="0.1640%" height="15" fill="rgb(232,128,0)" fg:x="27" fg:w="3"/><text x="1.7262%" y="335.50"></text></g><g><title>macroscopicCrossSection (5 samples, 0.27%)</title><rect x="1.6402%" y="325" width="0.2734%" height="15" fill="rgb(207,160,47)" fg:x="30" fg:w="5"/><text x="1.8902%" y="335.50"></text></g><g><title>operator new (1 samples, 0.05%)</title><rect x="1.9136%" y="325" width="0.0547%" height="15" fill="rgb(228,23,34)" fg:x="35" fg:w="1"/><text x="2.1636%" y="335.50"></text></g><g><title>updateTrajectory (1 samples, 0.05%)</title><rect x="1.9683%" y="325" width="0.0547%" height="15" fill="rgb(218,30,26)" fg:x="36" fg:w="1"/><text x="2.2183%" y="335.50"></text></g><g><title>[[heap]] (22 samples, 1.20%)</title><rect x="0.8748%" y="341" width="1.2028%" height="15" fill="rgb(220,122,19)" fg:x="16" fg:w="22"/><text x="1.1248%" y="351.50"></text></g><g><title>weightedMacroscopicCrossSection (1 samples, 0.05%)</title><rect x="2.0230%" y="325" width="0.0547%" height="15" fill="rgb(250,228,42)" fg:x="37" fg:w="1"/><text x="2.2730%" y="335.50"></text></g><g><title>CollisionEvent (3 samples, 0.16%)</title><rect x="2.0776%" y="325" width="0.1640%" height="15" fill="rgb(240,193,28)" fg:x="38" fg:w="3"/><text x="2.3276%" y="335.50"></text></g><g><title>MCT_Nearest_Facet (2 samples, 0.11%)</title><rect x="2.2417%" y="325" width="0.1093%" height="15" fill="rgb(216,20,37)" fg:x="41" fg:w="2"/><text x="2.4917%" y="335.50"></text></g><g><title>MC_Segment_Outcome (4 samples, 0.22%)</title><rect x="2.3510%" y="325" width="0.2187%" height="15" fill="rgb(206,188,39)" fg:x="43" fg:w="4"/><text x="2.6010%" y="335.50"></text></g><g><title>ParticleVaultContainer::addProcessingParticle (2 samples, 0.11%)</title><rect x="2.5697%" y="325" width="0.1093%" height="15" fill="rgb(217,207,13)" fg:x="47" fg:w="2"/><text x="2.8197%" y="335.50"></text></g><g><title>[[stack]] (12 samples, 0.66%)</title><rect x="2.0776%" y="341" width="0.6561%" height="15" fill="rgb(231,73,38)" fg:x="38" fg:w="12"/><text x="2.3276%" y="351.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_emplace_unique&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; (1 samples, 0.05%)</title><rect x="2.6791%" y="325" width="0.0547%" height="15" fill="rgb(225,20,46)" fg:x="49" fg:w="1"/><text x="2.9291%" y="335.50"></text></g><g><title>[anon] (1 samples, 0.05%)</title><rect x="2.7337%" y="341" width="0.0547%" height="15" fill="rgb(210,31,41)" fg:x="50" fg:w="1"/><text x="2.9837%" y="351.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.05%)</title><rect x="2.7337%" y="325" width="0.0547%" height="15" fill="rgb(221,200,47)" fg:x="50" fg:w="1"/><text x="2.9837%" y="335.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.05%)</title><rect x="2.7884%" y="341" width="0.0547%" height="15" fill="rgb(226,26,5)" fg:x="51" fg:w="1"/><text x="3.0384%" y="351.50"></text></g><g><title>PopulationControl (1 samples, 0.05%)</title><rect x="2.7884%" y="325" width="0.0547%" height="15" fill="rgb(249,33,26)" fg:x="51" fg:w="1"/><text x="3.0384%" y="335.50"></text></g><g><title>PopulationControlGuts (1 samples, 0.05%)</title><rect x="2.7884%" y="309" width="0.0547%" height="15" fill="rgb(235,183,28)" fg:x="51" fg:w="1"/><text x="3.0384%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="2.8431%" y="341" width="0.0547%" height="15" fill="rgb(221,5,38)" fg:x="52" fg:w="1"/><text x="3.0931%" y="351.50"></text></g><g><title>MC_Segment_Outcome (1 samples, 0.05%)</title><rect x="2.8431%" y="325" width="0.0547%" height="15" fill="rgb(247,18,42)" fg:x="52" fg:w="1"/><text x="3.0931%" y="335.50"></text></g><g><title>NuclearData::getEnergyGroup (1 samples, 0.05%)</title><rect x="3.0071%" y="325" width="0.0547%" height="15" fill="rgb(241,131,45)" fg:x="55" fg:w="1"/><text x="3.2571%" y="335.50"></text></g><g><title>NuclearData::getNumberReactions (2 samples, 0.11%)</title><rect x="3.0618%" y="325" width="0.1093%" height="15" fill="rgb(249,31,29)" fg:x="56" fg:w="2"/><text x="3.3118%" y="335.50"></text></g><g><title>NuclearData::getReactionCrossSection (58 samples, 3.17%)</title><rect x="3.1711%" y="325" width="3.1711%" height="15" fill="rgb(225,111,53)" fg:x="58" fg:w="58"/><text x="3.4211%" y="335.50">Nuc..</text></g><g><title>NuclearDataReaction::sampleCollision (3 samples, 0.16%)</title><rect x="6.3423%" y="325" width="0.1640%" height="15" fill="rgb(238,160,17)" fg:x="116" fg:w="3"/><text x="6.5923%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="6.5063%" y="325" width="0.0547%" height="15" fill="rgb(214,148,48)" fg:x="119" fg:w="1"/><text x="6.7563%" y="335.50"></text></g><g><title>_int_free (1 samples, 0.05%)</title><rect x="6.5610%" y="325" width="0.0547%" height="15" fill="rgb(232,36,49)" fg:x="120" fg:w="1"/><text x="6.8110%" y="335.50"></text></g><g><title>macroscopicCrossSection (24 samples, 1.31%)</title><rect x="6.6156%" y="325" width="1.3122%" height="15" fill="rgb(209,103,24)" fg:x="121" fg:w="24"/><text x="6.8656%" y="335.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_get_insert_unique_pos (1 samples, 0.05%)</title><rect x="7.9278%" y="325" width="0.0547%" height="15" fill="rgb(229,88,8)" fg:x="145" fg:w="1"/><text x="8.1778%" y="335.50"></text></g><g><title>updateTrajectory (1 samples, 0.05%)</title><rect x="7.9825%" y="325" width="0.0547%" height="15" fill="rgb(213,181,19)" fg:x="146" fg:w="1"/><text x="8.2325%" y="335.50"></text></g><g><title>[unknown] (98 samples, 5.36%)</title><rect x="2.8978%" y="341" width="5.3581%" height="15" fill="rgb(254,191,54)" fg:x="53" fg:w="98"/><text x="3.1478%" y="351.50">[unknow..</text></g><g><title>weightedMacroscopicCrossSection (4 samples, 0.22%)</title><rect x="8.0372%" y="325" width="0.2187%" height="15" fill="rgb(241,83,37)" fg:x="147" fg:w="4"/><text x="8.2872%" y="335.50"></text></g><g><title>__GI_exit (1 samples, 0.05%)</title><rect x="8.5839%" y="293" width="0.0547%" height="15" fill="rgb(233,36,39)" fg:x="157" fg:w="1"/><text x="8.8339%" y="303.50"></text></g><g><title>__run_exit_handlers (1 samples, 0.05%)</title><rect x="8.5839%" y="277" width="0.0547%" height="15" fill="rgb(226,3,54)" fg:x="157" fg:w="1"/><text x="8.8339%" y="287.50"></text></g><g><title>std::ios_base::Init::~Init (1 samples, 0.05%)</title><rect x="8.5839%" y="261" width="0.0547%" height="15" fill="rgb(245,192,40)" fg:x="157" fg:w="1"/><text x="8.8339%" y="271.50"></text></g><g><title>_dl_runtime_resolve_xsavec (1 samples, 0.05%)</title><rect x="8.5839%" y="245" width="0.0547%" height="15" fill="rgb(238,167,29)" fg:x="157" fg:w="1"/><text x="8.8339%" y="255.50"></text></g><g><title>_dl_fixup (1 samples, 0.05%)</title><rect x="8.5839%" y="229" width="0.0547%" height="15" fill="rgb(232,182,51)" fg:x="157" fg:w="1"/><text x="8.8339%" y="239.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.05%)</title><rect x="8.5839%" y="213" width="0.0547%" height="15" fill="rgb(231,60,39)" fg:x="157" fg:w="1"/><text x="8.8339%" y="223.50"></text></g><g><title>do_lookup_x (1 samples, 0.05%)</title><rect x="8.5839%" y="197" width="0.0547%" height="15" fill="rgb(208,69,12)" fg:x="157" fg:w="1"/><text x="8.8339%" y="207.50"></text></g><g><title>NuclearData::getEnergyGroup (1 samples, 0.05%)</title><rect x="8.6933%" y="213" width="0.0547%" height="15" fill="rgb(235,93,37)" fg:x="159" fg:w="1"/><text x="8.9433%" y="223.50"></text></g><g><title>MC_Base_Particle::MC_Base_Particle (1 samples, 0.05%)</title><rect x="8.7479%" y="197" width="0.0547%" height="15" fill="rgb(213,116,39)" fg:x="160" fg:w="1"/><text x="8.9979%" y="207.50"></text></g><g><title>EnergySpectrum::UpdateSpectrum (4 samples, 0.22%)</title><rect x="8.6386%" y="245" width="0.2187%" height="15" fill="rgb(222,207,29)" fg:x="158" fg:w="4"/><text x="8.8886%" y="255.50"></text></g><g><title>MC_Load_Particle (3 samples, 0.16%)</title><rect x="8.6933%" y="229" width="0.1640%" height="15" fill="rgb(206,96,30)" fg:x="159" fg:w="3"/><text x="8.9433%" y="239.50"></text></g><g><title>ParticleVault::getParticle (2 samples, 0.11%)</title><rect x="8.7479%" y="213" width="0.1093%" height="15" fill="rgb(218,138,4)" fg:x="160" fg:w="2"/><text x="8.9979%" y="223.50"></text></g><g><title>MC_Particle::MC_Particle (1 samples, 0.05%)</title><rect x="8.8026%" y="197" width="0.0547%" height="15" fill="rgb(250,191,14)" fg:x="161" fg:w="1"/><text x="9.0526%" y="207.50"></text></g><g><title>ScalarFluxTask::Reset (14 samples, 0.77%)</title><rect x="8.8573%" y="245" width="0.7654%" height="15" fill="rgb(239,60,40)" fg:x="162" fg:w="14"/><text x="9.1073%" y="255.50"></text></g><g><title>[libc.so.6] (14 samples, 0.77%)</title><rect x="8.8573%" y="229" width="0.7654%" height="15" fill="rgb(206,27,48)" fg:x="162" fg:w="14"/><text x="9.1073%" y="239.50"></text></g><g><title>Print0 (1 samples, 0.05%)</title><rect x="9.6227%" y="229" width="0.0547%" height="15" fill="rgb(225,35,8)" fg:x="176" fg:w="1"/><text x="9.8727%" y="239.50"></text></g><g><title>Print0 (1 samples, 0.05%)</title><rect x="9.6227%" y="213" width="0.0547%" height="15" fill="rgb(250,213,24)" fg:x="176" fg:w="1"/><text x="9.8727%" y="223.50"></text></g><g><title>__vfprintf_internal (1 samples, 0.05%)</title><rect x="9.6227%" y="197" width="0.0547%" height="15" fill="rgb(247,123,22)" fg:x="176" fg:w="1"/><text x="9.8727%" y="207.50"></text></g><g><title>__printf_fp_spec (1 samples, 0.05%)</title><rect x="9.6227%" y="181" width="0.0547%" height="15" fill="rgb(231,138,38)" fg:x="176" fg:w="1"/><text x="9.8727%" y="191.50"></text></g><g><title>__GI___printf_fp_l (1 samples, 0.05%)</title><rect x="9.6227%" y="165" width="0.0547%" height="15" fill="rgb(231,145,46)" fg:x="176" fg:w="1"/><text x="9.8727%" y="175.50"></text></g><g><title>cycleFinalize (42 samples, 2.30%)</title><rect x="8.6386%" y="277" width="2.2963%" height="15" fill="rgb(251,118,11)" fg:x="158" fg:w="42"/><text x="8.8886%" y="287.50">c..</text></g><g><title>Tallies::CycleFinalize (42 samples, 2.30%)</title><rect x="8.6386%" y="261" width="2.2963%" height="15" fill="rgb(217,147,25)" fg:x="158" fg:w="42"/><text x="8.8886%" y="271.50">T..</text></g><g><title>Tallies::PrintSummary (24 samples, 1.31%)</title><rect x="9.6227%" y="245" width="1.3122%" height="15" fill="rgb(247,81,37)" fg:x="176" fg:w="24"/><text x="9.8727%" y="255.50"></text></g><g><title>Tallies::ScalarFluxSum (23 samples, 1.26%)</title><rect x="9.6774%" y="229" width="1.2575%" height="15" fill="rgb(209,12,38)" fg:x="177" fg:w="23"/><text x="9.9274%" y="239.50"></text></g><g><title>DirectionCosine::Sample_Isotropic (2 samples, 0.11%)</title><rect x="11.0443%" y="245" width="0.1093%" height="15" fill="rgb(227,1,9)" fg:x="202" fg:w="2"/><text x="11.2943%" y="255.50"></text></g><g><title>rngSample (1 samples, 0.05%)</title><rect x="11.0990%" y="229" width="0.0547%" height="15" fill="rgb(248,47,43)" fg:x="203" fg:w="1"/><text x="11.3490%" y="239.50"></text></g><g><title>MCT_Cell_Volume_3D_G_vector_tetDet (3 samples, 0.16%)</title><rect x="11.3723%" y="229" width="0.1640%" height="15" fill="rgb(221,10,30)" fg:x="208" fg:w="3"/><text x="11.6223%" y="239.50"></text></g><g><title>MCT_Generate_Coordinate_3D_G (9 samples, 0.49%)</title><rect x="11.5364%" y="229" width="0.4921%" height="15" fill="rgb(210,229,1)" fg:x="211" fg:w="9"/><text x="11.7864%" y="239.50"></text></g><g><title>qs_vector&lt;MC_Vector&gt;::operator[] (1 samples, 0.05%)</title><rect x="12.0284%" y="229" width="0.0547%" height="15" fill="rgb(222,148,37)" fg:x="220" fg:w="1"/><text x="12.2784%" y="239.50"></text></g><g><title>MCT_Generate_Coordinate_3D_G (18 samples, 0.98%)</title><rect x="11.1536%" y="245" width="0.9841%" height="15" fill="rgb(234,67,33)" fg:x="204" fg:w="18"/><text x="11.4036%" y="255.50"></text></g><g><title>rngSample (1 samples, 0.05%)</title><rect x="12.0831%" y="229" width="0.0547%" height="15" fill="rgb(247,98,35)" fg:x="221" fg:w="1"/><text x="12.3331%" y="239.50"></text></g><g><title>MC_Base_Particle::MC_Base_Particle (1 samples, 0.05%)</title><rect x="12.1378%" y="245" width="0.0547%" height="15" fill="rgb(247,138,52)" fg:x="222" fg:w="1"/><text x="12.3878%" y="255.50"></text></g><g><title>ParticleVaultContainer::addProcessingParticle (1 samples, 0.05%)</title><rect x="12.1925%" y="245" width="0.0547%" height="15" fill="rgb(213,79,30)" fg:x="223" fg:w="1"/><text x="12.4425%" y="255.50"></text></g><g><title>MC_SourceNow (25 samples, 1.37%)</title><rect x="10.9349%" y="261" width="1.3669%" height="15" fill="rgb(246,177,23)" fg:x="200" fg:w="25"/><text x="11.1849%" y="271.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, MaterialParameters, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, MaterialParameters&gt; &gt; &gt;::operator[] (1 samples, 0.05%)</title><rect x="12.2471%" y="245" width="0.0547%" height="15" fill="rgb(230,62,27)" fg:x="224" fg:w="1"/><text x="12.4971%" y="255.50"></text></g><g><title>std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, MaterialParameters, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, MaterialParameters&gt; &gt; &gt;::lower_bound (1 samples, 0.05%)</title><rect x="12.2471%" y="229" width="0.0547%" height="15" fill="rgb(216,154,8)" fg:x="224" fg:w="1"/><text x="12.4971%" y="239.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, MaterialParameters&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, MaterialParameters&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, MaterialParameters&gt; &gt; &gt;::lower_bound (1 samples, 0.05%)</title><rect x="12.2471%" y="213" width="0.0547%" height="15" fill="rgb(244,35,45)" fg:x="224" fg:w="1"/><text x="12.4971%" y="223.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, MaterialParameters&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, MaterialParameters&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, MaterialParameters&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.05%)</title><rect x="12.2471%" y="197" width="0.0547%" height="15" fill="rgb(251,115,12)" fg:x="224" fg:w="1"/><text x="12.4971%" y="207.50"></text></g><g><title>std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator (1 samples, 0.05%)</title><rect x="12.2471%" y="181" width="0.0547%" height="15" fill="rgb(240,54,50)" fg:x="224" fg:w="1"/><text x="12.4971%" y="191.50"></text></g><g><title>std::operator&lt; &lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.05%)</title><rect x="12.2471%" y="165" width="0.0547%" height="15" fill="rgb(233,84,52)" fg:x="224" fg:w="1"/><text x="12.4971%" y="175.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::compare (1 samples, 0.05%)</title><rect x="12.2471%" y="149" width="0.0547%" height="15" fill="rgb(207,117,47)" fg:x="224" fg:w="1"/><text x="12.4971%" y="159.50"></text></g><g><title>std::char_traits&lt;char&gt;::compare (1 samples, 0.05%)</title><rect x="12.2471%" y="133" width="0.0547%" height="15" fill="rgb(249,43,39)" fg:x="224" fg:w="1"/><text x="12.4971%" y="143.50"></text></g><g><title>[libc.so.6] (1 samples, 0.05%)</title><rect x="12.2471%" y="117" width="0.0547%" height="15" fill="rgb(209,38,44)" fg:x="224" fg:w="1"/><text x="12.4971%" y="127.50"></text></g><g><title>MonteCarlo::clearCrossSectionCache (24 samples, 1.31%)</title><rect x="12.3018%" y="261" width="1.3122%" height="15" fill="rgb(236,212,23)" fg:x="225" fg:w="24"/><text x="12.5518%" y="271.50"></text></g><g><title>MC_Domain::clearCrossSectionCache (24 samples, 1.31%)</title><rect x="12.3018%" y="245" width="1.3122%" height="15" fill="rgb(242,79,21)" fg:x="225" fg:w="24"/><text x="12.5518%" y="255.50"></text></g><g><title>[libc.so.6] (23 samples, 1.26%)</title><rect x="12.3565%" y="229" width="1.2575%" height="15" fill="rgb(211,96,35)" fg:x="226" fg:w="23"/><text x="12.6065%" y="239.50"></text></g><g><title>MC_Base_Particle::operator= (2 samples, 0.11%)</title><rect x="13.9420%" y="197" width="0.1093%" height="15" fill="rgb(253,215,40)" fg:x="255" fg:w="2"/><text x="14.1920%" y="207.50"></text></g><g><title>MC_Vector::operator= (1 samples, 0.05%)</title><rect x="13.9967%" y="181" width="0.0547%" height="15" fill="rgb(211,81,21)" fg:x="256" fg:w="1"/><text x="14.2467%" y="191.50"></text></g><g><title>PopulationControl (9 samples, 0.49%)</title><rect x="13.6140%" y="245" width="0.4921%" height="15" fill="rgb(208,190,38)" fg:x="249" fg:w="9"/><text x="13.8640%" y="255.50"></text></g><g><title>ParticleVaultContainer::addProcessingParticle (9 samples, 0.49%)</title><rect x="13.6140%" y="229" width="0.4921%" height="15" fill="rgb(235,213,38)" fg:x="249" fg:w="9"/><text x="13.8640%" y="239.50"></text></g><g><title>ParticleVault::pushBaseParticle (3 samples, 0.16%)</title><rect x="13.9420%" y="213" width="0.1640%" height="15" fill="rgb(237,122,38)" fg:x="255" fg:w="3"/><text x="14.1920%" y="223.50"></text></g><g><title>qs_vector&lt;MC_Base_Particle&gt;::operator[] (1 samples, 0.05%)</title><rect x="14.0514%" y="197" width="0.0547%" height="15" fill="rgb(244,218,35)" fg:x="257" fg:w="1"/><text x="14.3014%" y="207.50"></text></g><g><title>MC_Base_Particle::MC_Base_Particle (3 samples, 0.16%)</title><rect x="14.1607%" y="229" width="0.1640%" height="15" fill="rgb(240,68,47)" fg:x="259" fg:w="3"/><text x="14.4107%" y="239.50"></text></g><g><title>MC_Vector::operator= (1 samples, 0.05%)</title><rect x="14.2701%" y="213" width="0.0547%" height="15" fill="rgb(210,16,53)" fg:x="261" fg:w="1"/><text x="14.5201%" y="223.50"></text></g><g><title>rngSample (1 samples, 0.05%)</title><rect x="14.3248%" y="229" width="0.0547%" height="15" fill="rgb(235,124,12)" fg:x="262" fg:w="1"/><text x="14.5748%" y="239.50"></text></g><g><title>PopulationControl (15 samples, 0.82%)</title><rect x="13.6140%" y="261" width="0.8201%" height="15" fill="rgb(224,169,11)" fg:x="249" fg:w="15"/><text x="13.8640%" y="271.50"></text></g><g><title>PopulationControlGuts (6 samples, 0.33%)</title><rect x="14.1061%" y="245" width="0.3280%" height="15" fill="rgb(250,166,2)" fg:x="258" fg:w="6"/><text x="14.3561%" y="255.50"></text></g><g><title>rngSpawn_Random_Number_Seed (1 samples, 0.05%)</title><rect x="14.3794%" y="229" width="0.0547%" height="15" fill="rgb(242,216,29)" fg:x="263" fg:w="1"/><text x="14.6294%" y="239.50"></text></g><g><title>hash_state (1 samples, 0.05%)</title><rect x="14.3794%" y="213" width="0.0547%" height="15" fill="rgb(230,116,27)" fg:x="263" fg:w="1"/><text x="14.6294%" y="223.50"></text></g><g><title>rngSpawn_Random_Number_Seed (1 samples, 0.05%)</title><rect x="14.3794%" y="197" width="0.0547%" height="15" fill="rgb(228,99,48)" fg:x="263" fg:w="1"/><text x="14.6294%" y="207.50"></text></g><g><title>cycleInit (76 samples, 4.16%)</title><rect x="10.9349%" y="277" width="4.1553%" height="15" fill="rgb(253,11,6)" fg:x="200" fg:w="76"/><text x="11.1849%" y="287.50">cycle..</text></g><g><title>RouletteLowWeightParticles (12 samples, 0.66%)</title><rect x="14.4341%" y="261" width="0.6561%" height="15" fill="rgb(247,143,39)" fg:x="264" fg:w="12"/><text x="14.6841%" y="271.50"></text></g><g><title>NuclearData::getEnergyGroup (11 samples, 0.60%)</title><rect x="27.1733%" y="213" width="0.6014%" height="15" fill="rgb(236,97,10)" fg:x="497" fg:w="11"/><text x="27.4233%" y="223.50"></text></g><g><title>qs_vector&lt;NuclearDataReaction&gt;::size (1 samples, 0.05%)</title><rect x="27.9388%" y="197" width="0.0547%" height="15" fill="rgb(233,208,19)" fg:x="511" fg:w="1"/><text x="28.1888%" y="207.50"></text></g><g><title>NuclearData::getNumberReactions (8 samples, 0.44%)</title><rect x="27.7747%" y="213" width="0.4374%" height="15" fill="rgb(216,164,2)" fg:x="508" fg:w="8"/><text x="28.0247%" y="223.50"></text></g><g><title>qs_vector&lt;NuclearDataSpecies&gt;::operator[] (4 samples, 0.22%)</title><rect x="27.9934%" y="197" width="0.2187%" height="15" fill="rgb(220,129,5)" fg:x="512" fg:w="4"/><text x="28.2434%" y="207.50"></text></g><g><title>NuclearDataReaction::sampleCollision (13 samples, 0.71%)</title><rect x="28.2121%" y="213" width="0.7108%" height="15" fill="rgb(242,17,10)" fg:x="516" fg:w="13"/><text x="28.4621%" y="223.50"></text></g><g><title>rngSample (7 samples, 0.38%)</title><rect x="28.5402%" y="197" width="0.3827%" height="15" fill="rgb(242,107,0)" fg:x="522" fg:w="7"/><text x="28.7902%" y="207.50"></text></g><g><title>NuclearDataReaction::getCrossSection (38 samples, 2.08%)</title><rect x="41.0607%" y="181" width="2.0776%" height="15" fill="rgb(251,28,31)" fg:x="751" fg:w="38"/><text x="41.3107%" y="191.50">N..</text></g><g><title>qs_vector&lt;NuclearDataIsotope&gt;::operator[] (25 samples, 1.37%)</title><rect x="43.1383%" y="181" width="1.3669%" height="15" fill="rgb(233,223,10)" fg:x="789" fg:w="25"/><text x="43.3883%" y="191.50"></text></g><g><title>NuclearData::getReactionCrossSection (129 samples, 7.05%)</title><rect x="38.1629%" y="197" width="7.0530%" height="15" fill="rgb(215,21,27)" fg:x="698" fg:w="129"/><text x="38.4129%" y="207.50">NuclearDa..</text></g><g><title>qs_vector&lt;NuclearDataReaction&gt;::operator[] (13 samples, 0.71%)</title><rect x="44.5052%" y="181" width="0.7108%" height="15" fill="rgb(232,23,21)" fg:x="814" fg:w="13"/><text x="44.7552%" y="191.50"></text></g><g><title>qs_vector&lt;Isotope&gt;::operator[] (66 samples, 3.61%)</title><rect x="45.2160%" y="197" width="3.6085%" height="15" fill="rgb(244,5,23)" fg:x="827" fg:w="66"/><text x="45.4660%" y="207.50">qs_v..</text></g><g><title>qs_vector&lt;MC_Cell_State&gt;::operator[] (23 samples, 1.26%)</title><rect x="48.8245%" y="197" width="1.2575%" height="15" fill="rgb(226,81,46)" fg:x="893" fg:w="23"/><text x="49.0745%" y="207.50"></text></g><g><title>macroscopicCrossSection (391 samples, 21.38%)</title><rect x="28.9229%" y="213" width="21.3778%" height="15" fill="rgb(247,70,30)" fg:x="529" fg:w="391"/><text x="29.1729%" y="223.50">macroscopicCrossSection</text></g><g><title>qs_vector&lt;MC_Domain&gt;::operator[] (4 samples, 0.22%)</title><rect x="50.0820%" y="197" width="0.2187%" height="15" fill="rgb(212,68,19)" fg:x="916" fg:w="4"/><text x="50.3320%" y="207.50"></text></g><g><title>qs_vector&lt;Balance&gt;::operator[] (2 samples, 0.11%)</title><rect x="50.3007%" y="213" width="0.1093%" height="15" fill="rgb(240,187,13)" fg:x="920" fg:w="2"/><text x="50.5507%" y="223.50"></text></g><g><title>qs_vector&lt;Isotope&gt;::size (1 samples, 0.05%)</title><rect x="50.4101%" y="213" width="0.0547%" height="15" fill="rgb(223,113,26)" fg:x="922" fg:w="1"/><text x="50.6601%" y="223.50"></text></g><g><title>qs_vector&lt;MC_Cell_State&gt;::operator[] (3 samples, 0.16%)</title><rect x="50.4647%" y="213" width="0.1640%" height="15" fill="rgb(206,192,2)" fg:x="923" fg:w="3"/><text x="50.7147%" y="223.50"></text></g><g><title>qs_vector&lt;NuclearDataIsotope&gt;::operator[] (1 samples, 0.05%)</title><rect x="50.6288%" y="213" width="0.0547%" height="15" fill="rgb(241,108,4)" fg:x="926" fg:w="1"/><text x="50.8788%" y="223.50"></text></g><g><title>qs_vector&lt;NuclearDataReaction&gt;::operator[] (2 samples, 0.11%)</title><rect x="50.6834%" y="213" width="0.1093%" height="15" fill="rgb(247,173,49)" fg:x="927" fg:w="2"/><text x="50.9334%" y="223.50"></text></g><g><title>qs_vector&lt;NuclearDataSpecies&gt;::operator[] (1 samples, 0.05%)</title><rect x="50.7928%" y="213" width="0.0547%" height="15" fill="rgb(224,114,35)" fg:x="929" fg:w="1"/><text x="51.0428%" y="223.50"></text></g><g><title>rngSample (2 samples, 0.11%)</title><rect x="50.8475%" y="213" width="0.1093%" height="15" fill="rgb(245,159,27)" fg:x="930" fg:w="2"/><text x="51.0975%" y="223.50"></text></g><g><title>DirectionCosine::Rotate3DVector (4 samples, 0.22%)</title><rect x="51.1208%" y="197" width="0.2187%" height="15" fill="rgb(245,172,44)" fg:x="935" fg:w="4"/><text x="51.3708%" y="207.50"></text></g><g><title>[libm.so.6] (1 samples, 0.05%)</title><rect x="51.3395%" y="197" width="0.0547%" height="15" fill="rgb(236,23,11)" fg:x="939" fg:w="1"/><text x="51.5895%" y="207.50"></text></g><g><title>[qs] (1 samples, 0.05%)</title><rect x="51.3942%" y="197" width="0.0547%" height="15" fill="rgb(205,117,38)" fg:x="940" fg:w="1"/><text x="51.6442%" y="207.50"></text></g><g><title>__ieee754_log_fma (8 samples, 0.44%)</title><rect x="51.4489%" y="197" width="0.4374%" height="15" fill="rgb(237,72,25)" fg:x="941" fg:w="8"/><text x="51.6989%" y="207.50"></text></g><g><title>do_cos (9 samples, 0.49%)</title><rect x="52.1050%" y="181" width="0.4921%" height="15" fill="rgb(244,70,9)" fg:x="953" fg:w="9"/><text x="52.3550%" y="191.50"></text></g><g><title>do_sin (26 samples, 1.42%)</title><rect x="52.5970%" y="181" width="1.4215%" height="15" fill="rgb(217,125,39)" fg:x="962" fg:w="26"/><text x="52.8470%" y="191.50"></text></g><g><title>libc_feholdsetround_sse_ctx (2 samples, 0.11%)</title><rect x="54.0186%" y="181" width="0.1093%" height="15" fill="rgb(235,36,10)" fg:x="988" fg:w="2"/><text x="54.2686%" y="191.50"></text></g><g><title>__sincos (48 samples, 2.62%)</title><rect x="51.8863%" y="197" width="2.6244%" height="15" fill="rgb(251,123,47)" fg:x="949" fg:w="48"/><text x="52.1363%" y="207.50">__..</text></g><g><title>reduce_sincos (7 samples, 0.38%)</title><rect x="54.1279%" y="181" width="0.3827%" height="15" fill="rgb(221,13,13)" fg:x="990" fg:w="7"/><text x="54.3779%" y="191.50"></text></g><g><title>CollisionEvent (710 samples, 38.82%)</title><rect x="15.8557%" y="229" width="38.8190%" height="15" fill="rgb(238,131,9)" fg:x="290" fg:w="710"/><text x="16.1057%" y="239.50">CollisionEvent</text></g><g><title>updateTrajectory (68 samples, 3.72%)</title><rect x="50.9568%" y="213" width="3.7179%" height="15" fill="rgb(211,50,8)" fg:x="932" fg:w="68"/><text x="51.2068%" y="223.50">upda..</text></g><g><title>rngSample (3 samples, 0.16%)</title><rect x="54.5107%" y="197" width="0.1640%" height="15" fill="rgb(245,182,24)" fg:x="997" fg:w="3"/><text x="54.7607%" y="207.50"></text></g><g><title>MC_Facet_Crossing_Event (2 samples, 0.11%)</title><rect x="54.6747%" y="229" width="0.1093%" height="15" fill="rgb(242,14,37)" fg:x="1000" fg:w="2"/><text x="54.9247%" y="239.50"></text></g><g><title>MCT_Adjacent_Facet (2 samples, 0.11%)</title><rect x="54.6747%" y="213" width="0.1093%" height="15" fill="rgb(246,228,12)" fg:x="1000" fg:w="2"/><text x="54.9247%" y="223.50"></text></g><g><title>qs_vector&lt;MC_Facet_Adjacency_Cell&gt;::operator[] (2 samples, 0.11%)</title><rect x="54.6747%" y="197" width="0.1093%" height="15" fill="rgb(213,55,15)" fg:x="1000" fg:w="2"/><text x="54.9247%" y="207.50"></text></g><g><title>MCT_Nearest_Facet_3D_G_Distance_To_Segment (26 samples, 1.42%)</title><rect x="64.9535%" y="181" width="1.4215%" height="15" fill="rgb(209,9,3)" fg:x="1188" fg:w="26"/><text x="65.2035%" y="191.50"></text></g><g><title>MCT_Nearest_Facet_Find_Nearest (11 samples, 0.60%)</title><rect x="66.3751%" y="181" width="0.6014%" height="15" fill="rgb(230,59,30)" fg:x="1214" fg:w="11"/><text x="66.6251%" y="191.50"></text></g><g><title>MCT_Nearest_Facet_Find_Nearest (5 samples, 0.27%)</title><rect x="66.7031%" y="165" width="0.2734%" height="15" fill="rgb(209,121,21)" fg:x="1220" fg:w="5"/><text x="66.9531%" y="175.50"></text></g><g><title>MCT_Nearest_Facet_3D_G (69 samples, 3.77%)</title><rect x="64.8989%" y="197" width="3.7726%" height="15" fill="rgb(220,109,13)" fg:x="1187" fg:w="69"/><text x="65.1489%" y="207.50">MCT_..</text></g><g><title>qs_vector&lt;MC_Vector&gt;::operator[] (31 samples, 1.69%)</title><rect x="66.9765%" y="181" width="1.6949%" height="15" fill="rgb(232,18,1)" fg:x="1225" fg:w="31"/><text x="67.2265%" y="191.50"></text></g><g><title>MCT_Nearest_Facet_3D_G_Distance_To_Segment (214 samples, 11.70%)</title><rect x="68.6714%" y="197" width="11.7004%" height="15" fill="rgb(215,41,42)" fg:x="1256" fg:w="214"/><text x="68.9214%" y="207.50">MCT_Nearest_Facet..</text></g><g><title>MCT_Nearest_Facet_Find_Nearest (39 samples, 2.13%)</title><rect x="80.3718%" y="197" width="2.1323%" height="15" fill="rgb(224,123,36)" fg:x="1470" fg:w="39"/><text x="80.6218%" y="207.50">M..</text></g><g><title>MCT_Nearest_Facet_Find_Nearest (37 samples, 2.02%)</title><rect x="80.4811%" y="181" width="2.0230%" height="15" fill="rgb(240,125,3)" fg:x="1472" fg:w="37"/><text x="80.7311%" y="191.50">M..</text></g><g><title>MC_Distance_To_Facet::MC_Distance_To_Facet (21 samples, 1.15%)</title><rect x="82.5041%" y="197" width="1.1482%" height="15" fill="rgb(205,98,50)" fg:x="1509" fg:w="21"/><text x="82.7541%" y="207.50"></text></g><g><title>qs_vector&lt;MC_Domain&gt;::operator[] (1 samples, 0.05%)</title><rect x="83.6523%" y="197" width="0.0547%" height="15" fill="rgb(205,185,37)" fg:x="1530" fg:w="1"/><text x="83.9023%" y="207.50"></text></g><g><title>MCT_Nearest_Facet (516 samples, 28.21%)</title><rect x="56.8070%" y="213" width="28.2121%" height="15" fill="rgb(238,207,15)" fg:x="1039" fg:w="516"/><text x="57.0570%" y="223.50">MCT_Nearest_Facet</text></g><g><title>qs_vector&lt;MC_Vector&gt;::operator[] (24 samples, 1.31%)</title><rect x="83.7069%" y="197" width="1.3122%" height="15" fill="rgb(213,199,42)" fg:x="1531" fg:w="24"/><text x="83.9569%" y="207.50"></text></g><g><title>MC_Find_Min (2 samples, 0.11%)</title><rect x="85.0191%" y="213" width="0.1093%" height="15" fill="rgb(235,201,11)" fg:x="1555" fg:w="2"/><text x="85.2691%" y="223.50"></text></g><g><title>MC_Particle::Move_Particle (5 samples, 0.27%)</title><rect x="85.1285%" y="213" width="0.2734%" height="15" fill="rgb(207,46,11)" fg:x="1557" fg:w="5"/><text x="85.3785%" y="223.50"></text></g><g><title>MC_Segment_Outcome (1 samples, 0.05%)</title><rect x="85.4019%" y="213" width="0.0547%" height="15" fill="rgb(241,35,35)" fg:x="1562" fg:w="1"/><text x="85.6519%" y="223.50"></text></g><g><title>MC_Vector::Length (9 samples, 0.49%)</title><rect x="85.4565%" y="213" width="0.4921%" height="15" fill="rgb(243,32,47)" fg:x="1563" fg:w="9"/><text x="85.7065%" y="223.50"></text></g><g><title>qs_vector&lt;ScalarFluxCell&gt;::operator[] (2 samples, 0.11%)</title><rect x="87.9716%" y="197" width="0.1093%" height="15" fill="rgb(247,202,23)" fg:x="1609" fg:w="2"/><text x="88.2216%" y="207.50"></text></g><g><title>Tallies::TallyScalarFlux (40 samples, 2.19%)</title><rect x="85.9486%" y="213" width="2.1870%" height="15" fill="rgb(219,102,11)" fg:x="1572" fg:w="40"/><text x="86.1986%" y="223.50">T..</text></g><g><title>qs_vector&lt;ScalarFluxTask&gt;::operator[] (1 samples, 0.05%)</title><rect x="88.0809%" y="197" width="0.0547%" height="15" fill="rgb(243,110,44)" fg:x="1611" fg:w="1"/><text x="88.3309%" y="207.50"></text></g><g><title>NuclearData::getTotalCrossSection (2 samples, 0.11%)</title><rect x="92.6189%" y="149" width="0.1093%" height="15" fill="rgb(222,74,54)" fg:x="1694" fg:w="2"/><text x="92.8689%" y="159.50"></text></g><g><title>NuclearDataReaction::getCrossSection (6 samples, 0.33%)</title><rect x="92.4549%" y="165" width="0.3280%" height="15" fill="rgb(216,99,12)" fg:x="1691" fg:w="6"/><text x="92.7049%" y="175.50"></text></g><g><title>qs_vector&lt;double&gt;::operator[] (1 samples, 0.05%)</title><rect x="92.7283%" y="149" width="0.0547%" height="15" fill="rgb(226,22,26)" fg:x="1696" fg:w="1"/><text x="92.9783%" y="159.50"></text></g><g><title>qs_vector&lt;NuclearDataReaction&gt;::operator[] (8 samples, 0.44%)</title><rect x="92.7829%" y="165" width="0.4374%" height="15" fill="rgb(217,163,10)" fg:x="1697" fg:w="8"/><text x="93.0329%" y="175.50"></text></g><g><title>NuclearData::getTotalCrossSection (48 samples, 2.62%)</title><rect x="90.6506%" y="181" width="2.6244%" height="15" fill="rgb(213,25,53)" fg:x="1658" fg:w="48"/><text x="90.9006%" y="191.50">Nu..</text></g><g><title>qs_vector&lt;NuclearDataSpecies&gt;::operator[] (1 samples, 0.05%)</title><rect x="93.2203%" y="165" width="0.0547%" height="15" fill="rgb(252,105,26)" fg:x="1705" fg:w="1"/><text x="93.4703%" y="175.50"></text></g><g><title>qs_vector&lt;Isotope&gt;::operator[] (2 samples, 0.11%)</title><rect x="93.2750%" y="181" width="0.1093%" height="15" fill="rgb(220,39,43)" fg:x="1706" fg:w="2"/><text x="93.5250%" y="191.50"></text></g><g><title>macroscopicCrossSection (56 samples, 3.06%)</title><rect x="90.3773%" y="197" width="3.0618%" height="15" fill="rgb(229,68,48)" fg:x="1653" fg:w="56"/><text x="90.6273%" y="207.50">mac..</text></g><g><title>qs_vector&lt;MC_Cell_State&gt;::operator[] (1 samples, 0.05%)</title><rect x="93.3844%" y="181" width="0.0547%" height="15" fill="rgb(252,8,32)" fg:x="1708" fg:w="1"/><text x="93.6344%" y="191.50"></text></g><g><title>MC_Segment_Outcome (708 samples, 38.71%)</title><rect x="54.7840%" y="229" width="38.7097%" height="15" fill="rgb(223,20,43)" fg:x="1002" fg:w="708"/><text x="55.0340%" y="239.50">MC_Segment_Outcome</text></g><g><title>weightedMacroscopicCrossSection (98 samples, 5.36%)</title><rect x="88.1356%" y="213" width="5.3581%" height="15" fill="rgb(229,81,49)" fg:x="1612" fg:w="98"/><text x="88.3856%" y="223.50">weighte..</text></g><g><title>qs_vector&lt;MC_Cell_State&gt;::operator[] (1 samples, 0.05%)</title><rect x="93.4390%" y="197" width="0.0547%" height="15" fill="rgb(236,28,36)" fg:x="1709" fg:w="1"/><text x="93.6890%" y="207.50"></text></g><g><title>CycleTrackingFunction (1,437 samples, 78.57%)</title><rect x="15.1449%" y="245" width="78.5675%" height="15" fill="rgb(249,185,26)" fg:x="277" fg:w="1437"/><text x="15.3949%" y="255.50">CycleTrackingFunction</text></g><g><title>qs_vector&lt;Balance&gt;::operator[] (4 samples, 0.22%)</title><rect x="93.4937%" y="229" width="0.2187%" height="15" fill="rgb(249,174,33)" fg:x="1710" fg:w="4"/><text x="93.7437%" y="239.50"></text></g><g><title>NuclearData::getEnergyGroup (13 samples, 0.71%)</title><rect x="93.7671%" y="229" width="0.7108%" height="15" fill="rgb(233,201,37)" fg:x="1715" fg:w="13"/><text x="94.0171%" y="239.50"></text></g><g><title>MC_Base_Particle::MC_Base_Particle (3 samples, 0.16%)</title><rect x="94.4779%" y="213" width="0.1640%" height="15" fill="rgb(221,78,26)" fg:x="1728" fg:w="3"/><text x="94.7279%" y="223.50"></text></g><g><title>MC_Vector::operator= (1 samples, 0.05%)</title><rect x="94.5872%" y="197" width="0.0547%" height="15" fill="rgb(250,127,30)" fg:x="1730" fg:w="1"/><text x="94.8372%" y="207.50"></text></g><g><title>MC_Particle::MC_Particle (5 samples, 0.27%)</title><rect x="94.6419%" y="213" width="0.2734%" height="15" fill="rgb(230,49,44)" fg:x="1731" fg:w="5"/><text x="94.8919%" y="223.50"></text></g><g><title>MC_Vector::Length (1 samples, 0.05%)</title><rect x="94.8606%" y="197" width="0.0547%" height="15" fill="rgb(229,67,23)" fg:x="1735" fg:w="1"/><text x="95.1106%" y="207.50"></text></g><g><title>MC_Load_Particle (25 samples, 1.37%)</title><rect x="93.7124%" y="245" width="1.3669%" height="15" fill="rgb(249,83,47)" fg:x="1714" fg:w="25"/><text x="93.9624%" y="255.50"></text></g><g><title>ParticleVault::getParticle (11 samples, 0.60%)</title><rect x="94.4779%" y="229" width="0.6014%" height="15" fill="rgb(215,43,3)" fg:x="1728" fg:w="11"/><text x="94.7279%" y="239.50"></text></g><g><title>MC_Particle::operator= (3 samples, 0.16%)</title><rect x="94.9153%" y="213" width="0.1640%" height="15" fill="rgb(238,154,13)" fg:x="1736" fg:w="3"/><text x="95.1653%" y="223.50"></text></g><g><title>MC_Vector::operator= (2 samples, 0.11%)</title><rect x="94.9699%" y="197" width="0.1093%" height="15" fill="rgb(219,56,2)" fg:x="1737" fg:w="2"/><text x="95.2199%" y="207.50"></text></g><g><title>CycleTrackingGuts (1,466 samples, 80.15%)</title><rect x="15.0902%" y="261" width="80.1531%" height="15" fill="rgb(233,0,4)" fg:x="276" fg:w="1466"/><text x="15.3402%" y="271.50">CycleTrackingGuts</text></g><g><title>MC_Particle::MC_Particle (3 samples, 0.16%)</title><rect x="95.0793%" y="245" width="0.1640%" height="15" fill="rgb(235,30,7)" fg:x="1739" fg:w="3"/><text x="95.3293%" y="255.50"></text></g><g><title>ParticleVault::append (2 samples, 0.11%)</title><rect x="95.2433%" y="229" width="0.1093%" height="15" fill="rgb(250,79,13)" fg:x="1742" fg:w="2"/><text x="95.4933%" y="239.50"></text></g><g><title>qs_vector&lt;MC_Base_Particle&gt;::appendList (2 samples, 0.11%)</title><rect x="95.2433%" y="213" width="0.1093%" height="15" fill="rgb(211,146,34)" fg:x="1742" fg:w="2"/><text x="95.4933%" y="223.50"></text></g><g><title>MC_Base_Particle::operator= (2 samples, 0.11%)</title><rect x="95.2433%" y="197" width="0.1093%" height="15" fill="rgb(228,22,38)" fg:x="1742" fg:w="2"/><text x="95.4933%" y="207.50"></text></g><g><title>ParticleVaultContainer::cleanExtraVaults (3 samples, 0.16%)</title><rect x="95.2433%" y="261" width="0.1640%" height="15" fill="rgb(235,168,5)" fg:x="1742" fg:w="3"/><text x="95.4933%" y="271.50"></text></g><g><title>ParticleVault::collapse (3 samples, 0.16%)</title><rect x="95.2433%" y="245" width="0.1640%" height="15" fill="rgb(221,155,16)" fg:x="1742" fg:w="3"/><text x="95.4933%" y="255.50"></text></g><g><title>ParticleVault::popBaseParticle (1 samples, 0.05%)</title><rect x="95.3527%" y="229" width="0.0547%" height="15" fill="rgb(215,215,53)" fg:x="1744" fg:w="1"/><text x="95.6027%" y="239.50"></text></g><g><title>MC_Base_Particle::operator= (1 samples, 0.05%)</title><rect x="95.3527%" y="213" width="0.0547%" height="15" fill="rgb(223,4,10)" fg:x="1744" fg:w="1"/><text x="95.6027%" y="223.50"></text></g><g><title>MC_Vector::operator= (1 samples, 0.05%)</title><rect x="95.3527%" y="197" width="0.0547%" height="15" fill="rgb(234,103,6)" fg:x="1744" fg:w="1"/><text x="95.6027%" y="207.50"></text></g><g><title>ParticleVaultContainer::collapseProcessed (1 samples, 0.05%)</title><rect x="95.4073%" y="261" width="0.0547%" height="15" fill="rgb(227,97,0)" fg:x="1745" fg:w="1"/><text x="95.6573%" y="271.50"></text></g><g><title>ParticleVault::collapse (1 samples, 0.05%)</title><rect x="95.4073%" y="245" width="0.0547%" height="15" fill="rgb(234,150,53)" fg:x="1745" fg:w="1"/><text x="95.6573%" y="255.50"></text></g><g><title>ParticleVault::append (1 samples, 0.05%)</title><rect x="95.4073%" y="229" width="0.0547%" height="15" fill="rgb(228,201,54)" fg:x="1745" fg:w="1"/><text x="95.6573%" y="239.50"></text></g><g><title>qs_vector&lt;MC_Base_Particle&gt;::appendList (1 samples, 0.05%)</title><rect x="95.4073%" y="213" width="0.0547%" height="15" fill="rgb(222,22,37)" fg:x="1745" fg:w="1"/><text x="95.6573%" y="223.50"></text></g><g><title>MC_Base_Particle::operator= (1 samples, 0.05%)</title><rect x="95.4073%" y="197" width="0.0547%" height="15" fill="rgb(237,53,32)" fg:x="1745" fg:w="1"/><text x="95.6573%" y="207.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.05%)</title><rect x="95.4620%" y="261" width="0.0547%" height="15" fill="rgb(233,25,53)" fg:x="1746" fg:w="1"/><text x="95.7120%" y="271.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (1 samples, 0.05%)</title><rect x="95.4620%" y="245" width="0.0547%" height="15" fill="rgb(210,40,34)" fg:x="1746" fg:w="1"/><text x="95.7120%" y="255.50"></text></g><g><title>operator new (1 samples, 0.05%)</title><rect x="95.4620%" y="229" width="0.0547%" height="15" fill="rgb(241,220,44)" fg:x="1746" fg:w="1"/><text x="95.7120%" y="239.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.05%)</title><rect x="95.4620%" y="213" width="0.0547%" height="15" fill="rgb(235,28,35)" fg:x="1746" fg:w="1"/><text x="95.7120%" y="223.50"></text></g><g><title>cycleTracking (1,472 samples, 80.48%)</title><rect x="15.0902%" y="277" width="80.4811%" height="15" fill="rgb(210,56,17)" fg:x="276" fg:w="1472"/><text x="15.3402%" y="287.50">cycleTracking</text></g><g><title>std::chrono::_V2::system_clock::now (1 samples, 0.05%)</title><rect x="95.5167%" y="261" width="0.0547%" height="15" fill="rgb(224,130,29)" fg:x="1747" fg:w="1"/><text x="95.7667%" y="271.50"></text></g><g><title>__GI___clock_gettime (1 samples, 0.05%)</title><rect x="95.5167%" y="245" width="0.0547%" height="15" fill="rgb(235,212,8)" fg:x="1747" fg:w="1"/><text x="95.7667%" y="255.50"></text></g><g><title>gameOver (1 samples, 0.05%)</title><rect x="95.5714%" y="277" width="0.0547%" height="15" fill="rgb(223,33,50)" fg:x="1748" fg:w="1"/><text x="95.8214%" y="287.50"></text></g><g><title>MC_Fast_Timer_Container::Cumulative_Report (1 samples, 0.05%)</title><rect x="95.5714%" y="261" width="0.0547%" height="15" fill="rgb(219,149,13)" fg:x="1748" fg:w="1"/><text x="95.8214%" y="271.50"></text></g><g><title>MC_Fast_Timer_Container::Cumulative_Report (1 samples, 0.05%)</title><rect x="95.5714%" y="245" width="0.0547%" height="15" fill="rgb(250,156,29)" fg:x="1748" fg:w="1"/><text x="95.8214%" y="255.50"></text></g><g><title>___fprintf_chk (1 samples, 0.05%)</title><rect x="95.5714%" y="229" width="0.0547%" height="15" fill="rgb(216,193,19)" fg:x="1748" fg:w="1"/><text x="95.8214%" y="239.50"></text></g><g><title>__vfprintf_internal (1 samples, 0.05%)</title><rect x="95.5714%" y="213" width="0.0547%" height="15" fill="rgb(216,135,14)" fg:x="1748" fg:w="1"/><text x="95.8214%" y="223.50"></text></g><g><title>__printf_fp_spec (1 samples, 0.05%)</title><rect x="95.5714%" y="197" width="0.0547%" height="15" fill="rgb(241,47,5)" fg:x="1748" fg:w="1"/><text x="95.8214%" y="207.50"></text></g><g><title>__GI___printf_fp_l (1 samples, 0.05%)</title><rect x="95.5714%" y="181" width="0.0547%" height="15" fill="rgb(233,42,35)" fg:x="1748" fg:w="1"/><text x="95.8214%" y="191.50"></text></g><g><title>hack_digit (1 samples, 0.05%)</title><rect x="95.5714%" y="165" width="0.0547%" height="15" fill="rgb(231,13,6)" fg:x="1748" fg:w="1"/><text x="95.8214%" y="175.50"></text></g><g><title>getParameters (1 samples, 0.05%)</title><rect x="95.6260%" y="277" width="0.0547%" height="15" fill="rgb(207,181,40)" fg:x="1749" fg:w="1"/><text x="95.8760%" y="287.50"></text></g><g><title>parseCommandLine (1 samples, 0.05%)</title><rect x="95.6260%" y="261" width="0.0547%" height="15" fill="rgb(254,173,49)" fg:x="1749" fg:w="1"/><text x="95.8760%" y="271.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator= (1 samples, 0.05%)</title><rect x="95.6260%" y="245" width="0.0547%" height="15" fill="rgb(221,1,38)" fg:x="1749" fg:w="1"/><text x="95.8760%" y="255.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::assign (1 samples, 0.05%)</title><rect x="95.6260%" y="229" width="0.0547%" height="15" fill="rgb(206,124,46)" fg:x="1749" fg:w="1"/><text x="95.8760%" y="239.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace (1 samples, 0.05%)</title><rect x="95.6260%" y="213" width="0.0547%" height="15" fill="rgb(249,21,11)" fg:x="1749" fg:w="1"/><text x="95.8760%" y="223.50"></text></g><g><title>_dl_runtime_resolve_xsavec (1 samples, 0.05%)</title><rect x="95.6260%" y="197" width="0.0547%" height="15" fill="rgb(222,201,40)" fg:x="1749" fg:w="1"/><text x="95.8760%" y="207.50"></text></g><g><title>_dl_fixup (1 samples, 0.05%)</title><rect x="95.6260%" y="181" width="0.0547%" height="15" fill="rgb(235,61,29)" fg:x="1749" fg:w="1"/><text x="95.8760%" y="191.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.05%)</title><rect x="95.6260%" y="165" width="0.0547%" height="15" fill="rgb(219,207,3)" fg:x="1749" fg:w="1"/><text x="95.8760%" y="175.50"></text></g><g><title>GlobalFccGrid::nodeCoord (2 samples, 0.11%)</title><rect x="95.7900%" y="229" width="0.1093%" height="15" fill="rgb(222,56,46)" fg:x="1752" fg:w="2"/><text x="96.0400%" y="239.50"></text></g><g><title>GlobalFccGrid::nodeCoord (2 samples, 0.11%)</title><rect x="95.7900%" y="213" width="0.1093%" height="15" fill="rgb(239,76,54)" fg:x="1752" fg:w="2"/><text x="96.0400%" y="223.50"></text></g><g><title>std::vector&lt;MC_Vector, std::allocator&lt;MC_Vector&gt; &gt;::push_back (2 samples, 0.11%)</title><rect x="95.7900%" y="197" width="0.1093%" height="15" fill="rgb(231,124,27)" fg:x="1752" fg:w="2"/><text x="96.0400%" y="207.50"></text></g><g><title>std::vector&lt;MC_Vector, std::allocator&lt;MC_Vector&gt; &gt;::emplace_back&lt;MC_Vector&gt; (2 samples, 0.11%)</title><rect x="95.7900%" y="181" width="0.1093%" height="15" fill="rgb(249,195,6)" fg:x="1752" fg:w="2"/><text x="96.0400%" y="191.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;MC_Vector&gt; &gt;::construct&lt;MC_Vector, MC_Vector&gt; (2 samples, 0.11%)</title><rect x="95.7900%" y="165" width="0.1093%" height="15" fill="rgb(237,174,47)" fg:x="1752" fg:w="2"/><text x="96.0400%" y="175.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;MC_Vector&gt;::construct&lt;MC_Vector, MC_Vector&gt; (2 samples, 0.11%)</title><rect x="95.7900%" y="149" width="0.1093%" height="15" fill="rgb(206,201,31)" fg:x="1752" fg:w="2"/><text x="96.0400%" y="159.50"></text></g><g><title>MC_General_Plane::MC_General_Plane (1 samples, 0.05%)</title><rect x="95.8994%" y="229" width="0.0547%" height="15" fill="rgb(231,57,52)" fg:x="1754" fg:w="1"/><text x="96.1494%" y="239.50"></text></g><g><title>MC_Mesh_Domain::MC_Mesh_Domain (1 samples, 0.05%)</title><rect x="95.9541%" y="229" width="0.0547%" height="15" fill="rgb(248,177,22)" fg:x="1755" fg:w="1"/><text x="96.2041%" y="239.50"></text></g><g><title>std::map&lt;unsigned long, int, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::insert&lt;std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt; (1 samples, 0.05%)</title><rect x="96.0087%" y="213" width="0.0547%" height="15" fill="rgb(215,211,37)" fg:x="1756" fg:w="1"/><text x="96.2587%" y="223.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_insert_range_unique&lt;std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt; (1 samples, 0.05%)</title><rect x="96.0087%" y="197" width="0.0547%" height="15" fill="rgb(241,128,51)" fg:x="1756" fg:w="1"/><text x="96.2587%" y="207.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_insert_unique_&lt;std::pair&lt;unsigned long const, int&gt;&amp;, std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_Alloc_node&gt; (1 samples, 0.05%)</title><rect x="96.0087%" y="181" width="0.0547%" height="15" fill="rgb(227,165,31)" fg:x="1756" fg:w="1"/><text x="96.2587%" y="191.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_insert_&lt;std::pair&lt;unsigned long const, int&gt;&amp;, std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_Alloc_node&gt; (1 samples, 0.05%)</title><rect x="96.0087%" y="165" width="0.0547%" height="15" fill="rgb(228,167,24)" fg:x="1756" fg:w="1"/><text x="96.2587%" y="175.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_Alloc_node::operator (1 samples, 0.05%)</title><rect x="96.0087%" y="149" width="0.0547%" height="15" fill="rgb(228,143,12)" fg:x="1756" fg:w="1"/><text x="96.2587%" y="159.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;unsigned long const, int&gt;&amp;&gt; (1 samples, 0.05%)</title><rect x="96.0087%" y="133" width="0.0547%" height="15" fill="rgb(249,149,8)" fg:x="1756" fg:w="1"/><text x="96.2587%" y="143.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_get_node (1 samples, 0.05%)</title><rect x="96.0087%" y="117" width="0.0547%" height="15" fill="rgb(243,35,44)" fg:x="1756" fg:w="1"/><text x="96.2587%" y="127.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt; &gt;::allocate (1 samples, 0.05%)</title><rect x="96.0087%" y="101" width="0.0547%" height="15" fill="rgb(246,89,9)" fg:x="1756" fg:w="1"/><text x="96.2587%" y="111.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::allocate (1 samples, 0.05%)</title><rect x="96.0087%" y="85" width="0.0547%" height="15" fill="rgb(233,213,13)" fg:x="1756" fg:w="1"/><text x="96.2587%" y="95.50"></text></g><g><title>operator new (1 samples, 0.05%)</title><rect x="96.0087%" y="69" width="0.0547%" height="15" fill="rgb(233,141,41)" fg:x="1756" fg:w="1"/><text x="96.2587%" y="79.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.05%)</title><rect x="96.0087%" y="53" width="0.0547%" height="15" fill="rgb(239,167,4)" fg:x="1756" fg:w="1"/><text x="96.2587%" y="63.50"></text></g><g><title>_int_malloc (1 samples, 0.05%)</title><rect x="96.0087%" y="37" width="0.0547%" height="15" fill="rgb(209,217,16)" fg:x="1756" fg:w="1"/><text x="96.2587%" y="47.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_create_node&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; (1 samples, 0.05%)</title><rect x="96.0634%" y="181" width="0.0547%" height="15" fill="rgb(219,88,35)" fg:x="1757" fg:w="1"/><text x="96.3134%" y="191.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_get_node (1 samples, 0.05%)</title><rect x="96.0634%" y="165" width="0.0547%" height="15" fill="rgb(220,193,23)" fg:x="1757" fg:w="1"/><text x="96.3134%" y="175.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt; &gt;::allocate (1 samples, 0.05%)</title><rect x="96.0634%" y="149" width="0.0547%" height="15" fill="rgb(230,90,52)" fg:x="1757" fg:w="1"/><text x="96.3134%" y="159.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::allocate (1 samples, 0.05%)</title><rect x="96.0634%" y="133" width="0.0547%" height="15" fill="rgb(252,106,19)" fg:x="1757" fg:w="1"/><text x="96.3134%" y="143.50"></text></g><g><title>operator new (1 samples, 0.05%)</title><rect x="96.0634%" y="117" width="0.0547%" height="15" fill="rgb(206,74,20)" fg:x="1757" fg:w="1"/><text x="96.3134%" y="127.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.05%)</title><rect x="96.0634%" y="101" width="0.0547%" height="15" fill="rgb(230,138,44)" fg:x="1757" fg:w="1"/><text x="96.3134%" y="111.50"></text></g><g><title>tcache_get (1 samples, 0.05%)</title><rect x="96.0634%" y="85" width="0.0547%" height="15" fill="rgb(235,182,43)" fg:x="1757" fg:w="1"/><text x="96.3134%" y="95.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_drop_node (1 samples, 0.05%)</title><rect x="96.1181%" y="181" width="0.0547%" height="15" fill="rgb(242,16,51)" fg:x="1758" fg:w="1"/><text x="96.3681%" y="191.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_put_node (1 samples, 0.05%)</title><rect x="96.1181%" y="165" width="0.0547%" height="15" fill="rgb(248,9,4)" fg:x="1758" fg:w="1"/><text x="96.3681%" y="175.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt; &gt;::deallocate (1 samples, 0.05%)</title><rect x="96.1181%" y="149" width="0.0547%" height="15" fill="rgb(210,31,22)" fg:x="1758" fg:w="1"/><text x="96.3681%" y="159.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::deallocate (1 samples, 0.05%)</title><rect x="96.1181%" y="133" width="0.0547%" height="15" fill="rgb(239,54,39)" fg:x="1758" fg:w="1"/><text x="96.3681%" y="143.50"></text></g><g><title>__GI___libc_free (1 samples, 0.05%)</title><rect x="96.1181%" y="117" width="0.0547%" height="15" fill="rgb(230,99,41)" fg:x="1758" fg:w="1"/><text x="96.3681%" y="127.50"></text></g><g><title>std::_Rb_tree_iterator&lt;std::pair&lt;unsigned long const, int&gt; &gt;::operator-- (1 samples, 0.05%)</title><rect x="96.2274%" y="165" width="0.0547%" height="15" fill="rgb(253,106,12)" fg:x="1760" fg:w="1"/><text x="96.4774%" y="175.50"></text></g><g><title>std::_Rb_tree_decrement (1 samples, 0.05%)</title><rect x="96.2274%" y="149" width="0.0547%" height="15" fill="rgb(213,46,41)" fg:x="1760" fg:w="1"/><text x="96.4774%" y="159.50"></text></g><g><title>bootstrapNodeMap (8 samples, 0.44%)</title><rect x="96.0087%" y="229" width="0.4374%" height="15" fill="rgb(215,133,35)" fg:x="1756" fg:w="8"/><text x="96.2587%" y="239.50"></text></g><g><title>std::map&lt;unsigned long, int, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::insert&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; (7 samples, 0.38%)</title><rect x="96.0634%" y="213" width="0.3827%" height="15" fill="rgb(213,28,5)" fg:x="1757" fg:w="7"/><text x="96.3134%" y="223.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_emplace_unique&lt;std::pair&lt;unsigned long, unsigned long&gt; &gt; (7 samples, 0.38%)</title><rect x="96.0634%" y="197" width="0.3827%" height="15" fill="rgb(215,77,49)" fg:x="1757" fg:w="7"/><text x="96.3134%" y="207.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_get_insert_unique_pos (5 samples, 0.27%)</title><rect x="96.1728%" y="181" width="0.2734%" height="15" fill="rgb(248,100,22)" fg:x="1759" fg:w="5"/><text x="96.4228%" y="191.50"></text></g><g><title>std::less&lt;unsigned long&gt;::operator (3 samples, 0.16%)</title><rect x="96.2821%" y="165" width="0.1640%" height="15" fill="rgb(208,67,9)" fg:x="1761" fg:w="3"/><text x="96.5321%" y="175.50"></text></g><g><title>MC_Mesh_Domain::MC_Mesh_Domain (1 samples, 0.05%)</title><rect x="96.4461%" y="213" width="0.0547%" height="15" fill="rgb(219,133,21)" fg:x="1764" fg:w="1"/><text x="96.6961%" y="223.50"></text></g><g><title>MeshPartition::findCell (3 samples, 0.16%)</title><rect x="96.5008%" y="213" width="0.1640%" height="15" fill="rgb(246,46,29)" fg:x="1765" fg:w="3"/><text x="96.7508%" y="223.50"></text></g><g><title>std::map&lt;unsigned long, CellInfo, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::find (3 samples, 0.16%)</title><rect x="96.5008%" y="197" width="0.1640%" height="15" fill="rgb(246,185,52)" fg:x="1765" fg:w="3"/><text x="96.7508%" y="207.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, CellInfo&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::find (3 samples, 0.16%)</title><rect x="96.5008%" y="181" width="0.1640%" height="15" fill="rgb(252,136,11)" fg:x="1765" fg:w="3"/><text x="96.7508%" y="191.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, CellInfo&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::_M_lower_bound (2 samples, 0.11%)</title><rect x="96.5555%" y="165" width="0.1093%" height="15" fill="rgb(219,138,53)" fg:x="1766" fg:w="2"/><text x="96.8055%" y="175.50"></text></g><g><title>makeFacet (1 samples, 0.05%)</title><rect x="96.6648%" y="213" width="0.0547%" height="15" fill="rgb(211,51,23)" fg:x="1768" fg:w="1"/><text x="96.9148%" y="223.50"></text></g><g><title>std::map&lt;int, int, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::operator[] (1 samples, 0.05%)</title><rect x="96.7195%" y="213" width="0.0547%" height="15" fill="rgb(247,221,28)" fg:x="1769" fg:w="1"/><text x="96.9695%" y="223.50"></text></g><g><title>std::map&lt;int, int, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::lower_bound (1 samples, 0.05%)</title><rect x="96.7195%" y="197" width="0.0547%" height="15" fill="rgb(251,222,45)" fg:x="1769" fg:w="1"/><text x="96.9695%" y="207.50"></text></g><g><title>std::_Rb_tree&lt;int, std::pair&lt;int const, int&gt;, std::_Select1st&lt;std::pair&lt;int const, int&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::lower_bound (1 samples, 0.05%)</title><rect x="96.7195%" y="181" width="0.0547%" height="15" fill="rgb(217,162,53)" fg:x="1769" fg:w="1"/><text x="96.9695%" y="191.50"></text></g><g><title>std::_Rb_tree&lt;int, std::pair&lt;int const, int&gt;, std::_Select1st&lt;std::pair&lt;int const, int&gt; &gt;, std::less&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.05%)</title><rect x="96.7195%" y="165" width="0.0547%" height="15" fill="rgb(229,93,14)" fg:x="1769" fg:w="1"/><text x="96.9695%" y="175.50"></text></g><g><title>buildCells (11 samples, 0.60%)</title><rect x="96.4461%" y="229" width="0.6014%" height="15" fill="rgb(209,67,49)" fg:x="1764" fg:w="11"/><text x="96.6961%" y="239.50"></text></g><g><title>std::map&lt;unsigned long, int, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::find (5 samples, 0.27%)</title><rect x="96.7742%" y="213" width="0.2734%" height="15" fill="rgb(213,87,29)" fg:x="1770" fg:w="5"/><text x="97.0242%" y="223.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::find (5 samples, 0.27%)</title><rect x="96.7742%" y="197" width="0.2734%" height="15" fill="rgb(205,151,52)" fg:x="1770" fg:w="5"/><text x="97.0242%" y="207.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_lower_bound (5 samples, 0.27%)</title><rect x="96.7742%" y="181" width="0.2734%" height="15" fill="rgb(253,215,39)" fg:x="1770" fg:w="5"/><text x="97.0242%" y="191.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_S_left (2 samples, 0.11%)</title><rect x="96.9382%" y="165" width="0.1093%" height="15" fill="rgb(221,220,41)" fg:x="1773" fg:w="2"/><text x="97.1882%" y="175.50"></text></g><g><title>std::_Rb_tree_const_iterator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt;::operator++ (2 samples, 0.11%)</title><rect x="97.0476%" y="229" width="0.1093%" height="15" fill="rgb(218,133,21)" fg:x="1775" fg:w="2"/><text x="97.2976%" y="239.50"></text></g><g><title>std::_Rb_tree_increment (2 samples, 0.11%)</title><rect x="97.0476%" y="213" width="0.1093%" height="15" fill="rgb(221,193,43)" fg:x="1775" fg:w="2"/><text x="97.2976%" y="223.50"></text></g><g><title>MC_Mesh_Domain::MC_Mesh_Domain (27 samples, 1.48%)</title><rect x="95.7354%" y="245" width="1.4762%" height="15" fill="rgb(240,128,52)" fg:x="1751" fg:w="27"/><text x="95.9854%" y="255.50"></text></g><g><title>std::map&lt;unsigned long, int, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::~map (1 samples, 0.05%)</title><rect x="97.1569%" y="229" width="0.0547%" height="15" fill="rgb(253,114,12)" fg:x="1777" fg:w="1"/><text x="97.4069%" y="239.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::~_Rb_tree (1 samples, 0.05%)</title><rect x="97.1569%" y="213" width="0.0547%" height="15" fill="rgb(215,223,47)" fg:x="1777" fg:w="1"/><text x="97.4069%" y="223.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_erase (1 samples, 0.05%)</title><rect x="97.1569%" y="197" width="0.0547%" height="15" fill="rgb(248,225,23)" fg:x="1777" fg:w="1"/><text x="97.4069%" y="207.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_erase (1 samples, 0.05%)</title><rect x="97.1569%" y="181" width="0.0547%" height="15" fill="rgb(250,108,0)" fg:x="1777" fg:w="1"/><text x="97.4069%" y="191.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_erase (1 samples, 0.05%)</title><rect x="97.1569%" y="165" width="0.0547%" height="15" fill="rgb(228,208,7)" fg:x="1777" fg:w="1"/><text x="97.4069%" y="175.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_erase (1 samples, 0.05%)</title><rect x="97.1569%" y="149" width="0.0547%" height="15" fill="rgb(244,45,10)" fg:x="1777" fg:w="1"/><text x="97.4069%" y="159.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_erase (1 samples, 0.05%)</title><rect x="97.1569%" y="133" width="0.0547%" height="15" fill="rgb(207,125,25)" fg:x="1777" fg:w="1"/><text x="97.4069%" y="143.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_drop_node (1 samples, 0.05%)</title><rect x="97.1569%" y="117" width="0.0547%" height="15" fill="rgb(210,195,18)" fg:x="1777" fg:w="1"/><text x="97.4069%" y="127.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, int&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, int&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::_M_put_node (1 samples, 0.05%)</title><rect x="97.1569%" y="101" width="0.0547%" height="15" fill="rgb(249,80,12)" fg:x="1777" fg:w="1"/><text x="97.4069%" y="111.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt; &gt;::deallocate (1 samples, 0.05%)</title><rect x="97.1569%" y="85" width="0.0547%" height="15" fill="rgb(221,65,9)" fg:x="1777" fg:w="1"/><text x="97.4069%" y="95.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;std::_Rb_tree_node&lt;std::pair&lt;unsigned long const, int&gt; &gt; &gt;::deallocate (1 samples, 0.05%)</title><rect x="97.1569%" y="69" width="0.0547%" height="15" fill="rgb(235,49,36)" fg:x="1777" fg:w="1"/><text x="97.4069%" y="79.50"></text></g><g><title>__GI___libc_free (1 samples, 0.05%)</title><rect x="97.1569%" y="53" width="0.0547%" height="15" fill="rgb(225,32,20)" fg:x="1777" fg:w="1"/><text x="97.4069%" y="63.50"></text></g><g><title>_int_free (1 samples, 0.05%)</title><rect x="97.1569%" y="37" width="0.0547%" height="15" fill="rgb(215,141,46)" fg:x="1777" fg:w="1"/><text x="97.4069%" y="47.50"></text></g><g><title>MC_Vector::Dot (1 samples, 0.05%)</title><rect x="97.2116%" y="229" width="0.0547%" height="15" fill="rgb(250,160,47)" fg:x="1778" fg:w="1"/><text x="97.4616%" y="239.50"></text></g><g><title>cellVolume (2 samples, 0.11%)</title><rect x="97.2116%" y="245" width="0.1093%" height="15" fill="rgb(216,222,40)" fg:x="1778" fg:w="2"/><text x="97.4616%" y="255.50"></text></g><g><title>MC_Vector::operator- (1 samples, 0.05%)</title><rect x="97.2663%" y="229" width="0.0547%" height="15" fill="rgb(234,217,39)" fg:x="1779" fg:w="1"/><text x="97.5163%" y="239.50"></text></g><g><title>MC_Domain::MC_Domain (30 samples, 1.64%)</title><rect x="95.7354%" y="261" width="1.6402%" height="15" fill="rgb(207,178,40)" fg:x="1751" fg:w="30"/><text x="95.9854%" y="271.50"></text></g><g><title>qs_vector&lt;MC_Cell_State&gt;::resize (1 samples, 0.05%)</title><rect x="97.3209%" y="245" width="0.0547%" height="15" fill="rgb(221,136,13)" fg:x="1780" fg:w="1"/><text x="97.5709%" y="255.50"></text></g><g><title>MemoryControl::allocate&lt;MC_Cell_State&gt; (1 samples, 0.05%)</title><rect x="97.3209%" y="229" width="0.0547%" height="15" fill="rgb(249,199,10)" fg:x="1780" fg:w="1"/><text x="97.5709%" y="239.50"></text></g><g><title>operator new (1 samples, 0.05%)</title><rect x="97.3209%" y="213" width="0.0547%" height="15" fill="rgb(249,222,13)" fg:x="1780" fg:w="1"/><text x="97.5709%" y="223.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.05%)</title><rect x="97.3209%" y="197" width="0.0547%" height="15" fill="rgb(244,185,38)" fg:x="1780" fg:w="1"/><text x="97.5709%" y="207.50"></text></g><g><title>_int_malloc (1 samples, 0.05%)</title><rect x="97.3209%" y="181" width="0.0547%" height="15" fill="rgb(236,202,9)" fg:x="1780" fg:w="1"/><text x="97.5709%" y="191.50"></text></g><g><title>malloc_consolidate (1 samples, 0.05%)</title><rect x="97.3209%" y="165" width="0.0547%" height="15" fill="rgb(250,229,37)" fg:x="1780" fg:w="1"/><text x="97.5709%" y="175.50"></text></g><g><title>GlobalFccGrid::cellCenter (1 samples, 0.05%)</title><rect x="97.4850%" y="245" width="0.0547%" height="15" fill="rgb(206,174,23)" fg:x="1783" fg:w="1"/><text x="97.7350%" y="255.50"></text></g><g><title>GlobalFccGrid::nodeCoord (1 samples, 0.05%)</title><rect x="97.4850%" y="229" width="0.0547%" height="15" fill="rgb(211,33,43)" fg:x="1783" fg:w="1"/><text x="97.7350%" y="239.50"></text></g><g><title>std::vector&lt;MC_Vector, std::allocator&lt;MC_Vector&gt; &gt;::push_back (1 samples, 0.05%)</title><rect x="97.4850%" y="213" width="0.0547%" height="15" fill="rgb(245,58,50)" fg:x="1783" fg:w="1"/><text x="97.7350%" y="223.50"></text></g><g><title>std::vector&lt;MC_Vector, std::allocator&lt;MC_Vector&gt; &gt;::emplace_back&lt;MC_Vector&gt; (1 samples, 0.05%)</title><rect x="97.4850%" y="197" width="0.0547%" height="15" fill="rgb(244,68,36)" fg:x="1783" fg:w="1"/><text x="97.7350%" y="207.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;MC_Vector&gt; &gt;::construct&lt;MC_Vector, MC_Vector&gt; (1 samples, 0.05%)</title><rect x="97.4850%" y="181" width="0.0547%" height="15" fill="rgb(232,229,15)" fg:x="1783" fg:w="1"/><text x="97.7350%" y="191.50"></text></g><g><title>__gnu_cxx::new_allocator&lt;MC_Vector&gt;::construct&lt;MC_Vector, MC_Vector&gt; (1 samples, 0.05%)</title><rect x="97.4850%" y="165" width="0.0547%" height="15" fill="rgb(254,30,23)" fg:x="1783" fg:w="1"/><text x="97.7350%" y="175.50"></text></g><g><title>MeshPartition::buildMeshPartition (1 samples, 0.05%)</title><rect x="97.5396%" y="245" width="0.0547%" height="15" fill="rgb(235,160,14)" fg:x="1784" fg:w="1"/><text x="97.7896%" y="255.50"></text></g><g><title>SharedMemoryCommObject::exchange (1 samples, 0.05%)</title><rect x="97.5396%" y="229" width="0.0547%" height="15" fill="rgb(212,155,44)" fg:x="1784" fg:w="1"/><text x="97.7896%" y="239.50"></text></g><g><title>MeshPartition::addCell (1 samples, 0.05%)</title><rect x="97.5396%" y="213" width="0.0547%" height="15" fill="rgb(226,2,50)" fg:x="1784" fg:w="1"/><text x="97.7896%" y="223.50"></text></g><g><title>std::map&lt;unsigned long, CellInfo, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::operator[] (1 samples, 0.05%)</title><rect x="97.5396%" y="197" width="0.0547%" height="15" fill="rgb(234,177,6)" fg:x="1784" fg:w="1"/><text x="97.7896%" y="207.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, CellInfo&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;unsigned long const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.05%)</title><rect x="97.5396%" y="181" width="0.0547%" height="15" fill="rgb(217,24,9)" fg:x="1784" fg:w="1"/><text x="97.7896%" y="191.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, CellInfo&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::_M_insert_node (1 samples, 0.05%)</title><rect x="97.5396%" y="165" width="0.0547%" height="15" fill="rgb(220,13,46)" fg:x="1784" fg:w="1"/><text x="97.7896%" y="175.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.05%)</title><rect x="97.5396%" y="149" width="0.0547%" height="15" fill="rgb(239,221,27)" fg:x="1784" fg:w="1"/><text x="97.7896%" y="159.50"></text></g><g><title>addNbrsToFlood (6 samples, 0.33%)</title><rect x="97.5943%" y="245" width="0.3280%" height="15" fill="rgb(222,198,25)" fg:x="1785" fg:w="6"/><text x="97.8443%" y="255.50"></text></g><g><title>std::set&lt;unsigned long, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::find (6 samples, 0.33%)</title><rect x="97.5943%" y="229" width="0.3280%" height="15" fill="rgb(211,99,13)" fg:x="1785" fg:w="6"/><text x="97.8443%" y="239.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::find (6 samples, 0.33%)</title><rect x="97.5943%" y="213" width="0.3280%" height="15" fill="rgb(232,111,31)" fg:x="1785" fg:w="6"/><text x="97.8443%" y="223.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::_M_lower_bound (6 samples, 0.33%)</title><rect x="97.5943%" y="197" width="0.3280%" height="15" fill="rgb(245,82,37)" fg:x="1785" fg:w="6"/><text x="97.8443%" y="207.50"></text></g><g><title>GlobalFccGrid::getFaceNbrGids (1 samples, 0.05%)</title><rect x="97.9224%" y="229" width="0.0547%" height="15" fill="rgb(227,149,46)" fg:x="1791" fg:w="1"/><text x="98.1724%" y="239.50"></text></g><g><title>GlobalFccGrid::snapTuple (1 samples, 0.05%)</title><rect x="97.9224%" y="213" width="0.0547%" height="15" fill="rgb(218,36,50)" fg:x="1791" fg:w="1"/><text x="98.1724%" y="223.50"></text></g><g><title>buildCellIndexMap (2 samples, 0.11%)</title><rect x="97.9224%" y="245" width="0.1093%" height="15" fill="rgb(226,80,48)" fg:x="1791" fg:w="2"/><text x="98.1724%" y="255.50"></text></g><g><title>std::map&lt;unsigned long, CellInfo, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::find (1 samples, 0.05%)</title><rect x="97.9770%" y="229" width="0.0547%" height="15" fill="rgb(238,224,15)" fg:x="1792" fg:w="1"/><text x="98.2270%" y="239.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, CellInfo&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::find (1 samples, 0.05%)</title><rect x="97.9770%" y="213" width="0.0547%" height="15" fill="rgb(241,136,10)" fg:x="1792" fg:w="1"/><text x="98.2270%" y="223.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, CellInfo&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::_M_lower_bound (1 samples, 0.05%)</title><rect x="97.9770%" y="197" width="0.0547%" height="15" fill="rgb(208,32,45)" fg:x="1792" fg:w="1"/><text x="98.2270%" y="207.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, CellInfo&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::_S_left (1 samples, 0.05%)</title><rect x="97.9770%" y="181" width="0.0547%" height="15" fill="rgb(207,135,9)" fg:x="1792" fg:w="1"/><text x="98.2270%" y="191.50"></text></g><g><title>std::map&lt;unsigned long, CellInfo, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::insert&lt;std::pair&lt;unsigned long, CellInfo&gt; &gt; (1 samples, 0.05%)</title><rect x="98.0317%" y="245" width="0.0547%" height="15" fill="rgb(206,86,44)" fg:x="1793" fg:w="1"/><text x="98.2817%" y="255.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, CellInfo&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::_M_emplace_unique&lt;std::pair&lt;unsigned long, CellInfo&gt; &gt; (1 samples, 0.05%)</title><rect x="98.0317%" y="229" width="0.0547%" height="15" fill="rgb(245,177,15)" fg:x="1793" fg:w="1"/><text x="98.2817%" y="239.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, std::pair&lt;unsigned long const, CellInfo&gt;, std::_Select1st&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;std::pair&lt;unsigned long const, CellInfo&gt; &gt; &gt;::_M_get_insert_unique_pos (1 samples, 0.05%)</title><rect x="98.0317%" y="213" width="0.0547%" height="15" fill="rgb(206,64,50)" fg:x="1793" fg:w="1"/><text x="98.2817%" y="223.50"></text></g><g><title>std::set&lt;unsigned long, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::find (3 samples, 0.16%)</title><rect x="98.0864%" y="245" width="0.1640%" height="15" fill="rgb(234,36,40)" fg:x="1794" fg:w="3"/><text x="98.3364%" y="255.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::find (3 samples, 0.16%)</title><rect x="98.0864%" y="229" width="0.1640%" height="15" fill="rgb(213,64,8)" fg:x="1794" fg:w="3"/><text x="98.3364%" y="239.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::_M_lower_bound (3 samples, 0.16%)</title><rect x="98.0864%" y="213" width="0.1640%" height="15" fill="rgb(210,75,36)" fg:x="1794" fg:w="3"/><text x="98.3364%" y="223.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::_S_left (2 samples, 0.11%)</title><rect x="98.1411%" y="197" width="0.1093%" height="15" fill="rgb(229,88,21)" fg:x="1795" fg:w="2"/><text x="98.3911%" y="207.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::_M_get_insert_unique_pos (1 samples, 0.05%)</title><rect x="98.2504%" y="213" width="0.0547%" height="15" fill="rgb(252,204,47)" fg:x="1797" fg:w="1"/><text x="98.5004%" y="223.50"></text></g><g><title>MeshPartition::buildMeshPartition (18 samples, 0.98%)</title><rect x="97.3756%" y="261" width="0.9841%" height="15" fill="rgb(208,77,27)" fg:x="1781" fg:w="18"/><text x="97.6256%" y="271.50"></text></g><g><title>std::set&lt;unsigned long, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::insert (2 samples, 0.11%)</title><rect x="98.2504%" y="245" width="0.1093%" height="15" fill="rgb(221,76,26)" fg:x="1797" fg:w="2"/><text x="98.5004%" y="255.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::_M_insert_unique&lt;unsigned long const&amp;&gt; (2 samples, 0.11%)</title><rect x="98.2504%" y="229" width="0.1093%" height="15" fill="rgb(225,139,18)" fg:x="1797" fg:w="2"/><text x="98.5004%" y="239.50"></text></g><g><title>std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::_M_insert_&lt;unsigned long const&amp;, std::_Rb_tree&lt;unsigned long, unsigned long, std::_Identity&lt;unsigned long&gt;, std::less&lt;unsigned long&gt;, std::allocator&lt;unsigned long&gt; &gt;::_Alloc_node&gt; (1 samples, 0.05%)</title><rect x="98.3051%" y="213" width="0.0547%" height="15" fill="rgb(230,137,11)" fg:x="1798" fg:w="1"/><text x="98.5551%" y="223.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance (1 samples, 0.05%)</title><rect x="98.3051%" y="197" width="0.0547%" height="15" fill="rgb(212,28,1)" fg:x="1798" fg:w="1"/><text x="98.5551%" y="207.50"></text></g><g><title>MonteCarlo::MonteCarlo (4 samples, 0.22%)</title><rect x="98.3598%" y="261" width="0.2187%" height="15" fill="rgb(248,164,17)" fg:x="1799" fg:w="4"/><text x="98.6098%" y="271.50"></text></g><g><title>ParticleVaultContainer::ParticleVaultContainer (4 samples, 0.22%)</title><rect x="98.3598%" y="245" width="0.2187%" height="15" fill="rgb(222,171,42)" fg:x="1799" fg:w="4"/><text x="98.6098%" y="255.50"></text></g><g><title>ParticleVault::reserve (4 samples, 0.22%)</title><rect x="98.3598%" y="229" width="0.2187%" height="15" fill="rgb(243,84,45)" fg:x="1799" fg:w="4"/><text x="98.6098%" y="239.50"></text></g><g><title>qs_vector&lt;MC_Base_Particle&gt;::reserve (4 samples, 0.22%)</title><rect x="98.3598%" y="213" width="0.2187%" height="15" fill="rgb(252,49,23)" fg:x="1799" fg:w="4"/><text x="98.6098%" y="223.50"></text></g><g><title>MemoryControl::allocate&lt;MC_Base_Particle&gt; (4 samples, 0.22%)</title><rect x="98.3598%" y="197" width="0.2187%" height="15" fill="rgb(215,19,7)" fg:x="1799" fg:w="4"/><text x="98.6098%" y="207.50"></text></g><g><title>MC_Base_Particle::MC_Base_Particle (4 samples, 0.22%)</title><rect x="98.3598%" y="181" width="0.2187%" height="15" fill="rgb(238,81,41)" fg:x="1799" fg:w="4"/><text x="98.6098%" y="191.50"></text></g><g><title>MC_Vector::MC_Vector (1 samples, 0.05%)</title><rect x="98.5238%" y="165" width="0.0547%" height="15" fill="rgb(210,199,37)" fg:x="1802" fg:w="1"/><text x="98.7738%" y="175.50"></text></g><g><title>checkCrossSections (2 samples, 0.11%)</title><rect x="98.5785%" y="261" width="0.1093%" height="15" fill="rgb(244,192,49)" fg:x="1803" fg:w="2"/><text x="98.8285%" y="271.50"></text></g><g><title>initMC (2 samples, 0.11%)</title><rect x="98.5785%" y="245" width="0.1093%" height="15" fill="rgb(226,211,11)" fg:x="1803" fg:w="2"/><text x="98.8285%" y="255.50"></text></g><g><title>___fprintf_chk (2 samples, 0.11%)</title><rect x="98.5785%" y="229" width="0.1093%" height="15" fill="rgb(236,162,54)" fg:x="1803" fg:w="2"/><text x="98.8285%" y="239.50"></text></g><g><title>__vfprintf_internal (2 samples, 0.11%)</title><rect x="98.5785%" y="213" width="0.1093%" height="15" fill="rgb(220,229,9)" fg:x="1803" fg:w="2"/><text x="98.8285%" y="223.50"></text></g><g><title>__printf_fp_spec (2 samples, 0.11%)</title><rect x="98.5785%" y="197" width="0.1093%" height="15" fill="rgb(250,87,22)" fg:x="1803" fg:w="2"/><text x="98.8285%" y="207.50"></text></g><g><title>__GI___printf_fp_l (2 samples, 0.11%)</title><rect x="98.5785%" y="181" width="0.1093%" height="15" fill="rgb(239,43,17)" fg:x="1803" fg:w="2"/><text x="98.8285%" y="191.50"></text></g><g><title>hack_digit (1 samples, 0.05%)</title><rect x="98.6331%" y="165" width="0.0547%" height="15" fill="rgb(231,177,25)" fg:x="1804" fg:w="1"/><text x="98.8831%" y="175.50"></text></g><g><title>__mpn_mul_1 (1 samples, 0.05%)</title><rect x="98.6331%" y="149" width="0.0547%" height="15" fill="rgb(219,179,1)" fg:x="1804" fg:w="1"/><text x="98.8831%" y="159.50"></text></g><g><title>consistencyCheck (1 samples, 0.05%)</title><rect x="98.6878%" y="261" width="0.0547%" height="15" fill="rgb(238,219,53)" fg:x="1805" fg:w="1"/><text x="98.9378%" y="271.50"></text></g><g><title>Polynomial::operator (4 samples, 0.22%)</title><rect x="98.7972%" y="197" width="0.2187%" height="15" fill="rgb(232,167,36)" fg:x="1807" fg:w="4"/><text x="99.0472%" y="207.50"></text></g><g><title>[qs] (1 samples, 0.05%)</title><rect x="99.0159%" y="197" width="0.0547%" height="15" fill="rgb(244,19,51)" fg:x="1811" fg:w="1"/><text x="99.2659%" y="207.50"></text></g><g><title>[qs] (1 samples, 0.05%)</title><rect x="99.0705%" y="181" width="0.0547%" height="15" fill="rgb(224,6,22)" fg:x="1812" fg:w="1"/><text x="99.3205%" y="191.50"></text></g><g><title>exp_inline (1 samples, 0.05%)</title><rect x="99.1799%" y="149" width="0.0547%" height="15" fill="rgb(224,145,5)" fg:x="1814" fg:w="1"/><text x="99.4299%" y="159.50"></text></g><g><title>NuclearData::addIsotope (10 samples, 0.55%)</title><rect x="98.7425%" y="245" width="0.5467%" height="15" fill="rgb(234,130,49)" fg:x="1806" fg:w="10"/><text x="98.9925%" y="255.50"></text></g><g><title>NuclearDataSpecies::addReaction (10 samples, 0.55%)</title><rect x="98.7425%" y="229" width="0.5467%" height="15" fill="rgb(254,6,2)" fg:x="1806" fg:w="10"/><text x="98.9925%" y="239.50"></text></g><g><title>NuclearDataReaction::NuclearDataReaction (10 samples, 0.55%)</title><rect x="98.7425%" y="213" width="0.5467%" height="15" fill="rgb(208,96,46)" fg:x="1806" fg:w="10"/><text x="98.9925%" y="223.50"></text></g><g><title>std::pow&lt;int, double&gt; (4 samples, 0.22%)</title><rect x="99.0705%" y="197" width="0.2187%" height="15" fill="rgb(239,3,39)" fg:x="1812" fg:w="4"/><text x="99.3205%" y="207.50"></text></g><g><title>__pow (3 samples, 0.16%)</title><rect x="99.1252%" y="181" width="0.1640%" height="15" fill="rgb(233,210,1)" fg:x="1813" fg:w="3"/><text x="99.3752%" y="191.50"></text></g><g><title>__ieee754_pow_fma (2 samples, 0.11%)</title><rect x="99.1799%" y="165" width="0.1093%" height="15" fill="rgb(244,137,37)" fg:x="1814" fg:w="2"/><text x="99.4299%" y="175.50"></text></g><g><title>log_inline (1 samples, 0.05%)</title><rect x="99.2346%" y="149" width="0.0547%" height="15" fill="rgb(240,136,2)" fg:x="1815" fg:w="1"/><text x="99.4846%" y="159.50"></text></g><g><title>NuclearDataReaction::getCrossSection (1 samples, 0.05%)</title><rect x="99.2892%" y="245" width="0.0547%" height="15" fill="rgb(239,18,37)" fg:x="1816" fg:w="1"/><text x="99.5392%" y="255.50"></text></g><g><title>CellTallyDomain::CellTallyDomain (1 samples, 0.05%)</title><rect x="99.3439%" y="229" width="0.0547%" height="15" fill="rgb(218,185,22)" fg:x="1817" fg:w="1"/><text x="99.5939%" y="239.50"></text></g><g><title>CellTallyTask::CellTallyTask (1 samples, 0.05%)</title><rect x="99.3439%" y="213" width="0.0547%" height="15" fill="rgb(225,218,4)" fg:x="1817" fg:w="1"/><text x="99.5939%" y="223.50"></text></g><g><title>qs_vector&lt;double&gt;::reserve (1 samples, 0.05%)</title><rect x="99.3439%" y="197" width="0.0547%" height="15" fill="rgb(230,182,32)" fg:x="1817" fg:w="1"/><text x="99.5939%" y="207.50"></text></g><g><title>MemoryControl::allocate&lt;double&gt; (1 samples, 0.05%)</title><rect x="99.3439%" y="181" width="0.0547%" height="15" fill="rgb(242,56,43)" fg:x="1817" fg:w="1"/><text x="99.5939%" y="191.50"></text></g><g><title>operator new (1 samples, 0.05%)</title><rect x="99.3439%" y="165" width="0.0547%" height="15" fill="rgb(233,99,24)" fg:x="1817" fg:w="1"/><text x="99.5939%" y="175.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.05%)</title><rect x="99.3439%" y="149" width="0.0547%" height="15" fill="rgb(234,209,42)" fg:x="1817" fg:w="1"/><text x="99.5939%" y="159.50"></text></g><g><title>_int_malloc (1 samples, 0.05%)</title><rect x="99.3439%" y="133" width="0.0547%" height="15" fill="rgb(227,7,12)" fg:x="1817" fg:w="1"/><text x="99.5939%" y="143.50"></text></g><g><title>malloc_consolidate (1 samples, 0.05%)</title><rect x="99.3439%" y="117" width="0.0547%" height="15" fill="rgb(245,203,43)" fg:x="1817" fg:w="1"/><text x="99.5939%" y="127.50"></text></g><g><title>initMC (13 samples, 0.71%)</title><rect x="98.7425%" y="261" width="0.7108%" height="15" fill="rgb(238,205,33)" fg:x="1806" fg:w="13"/><text x="98.9925%" y="271.50"></text></g><g><title>Tallies::InitializeTallies (2 samples, 0.11%)</title><rect x="99.3439%" y="245" width="0.1093%" height="15" fill="rgb(231,56,7)" fg:x="1817" fg:w="2"/><text x="99.5939%" y="255.50"></text></g><g><title>ScalarFluxDomain::ScalarFluxDomain (1 samples, 0.05%)</title><rect x="99.3986%" y="229" width="0.0547%" height="15" fill="rgb(244,186,29)" fg:x="1818" fg:w="1"/><text x="99.6486%" y="239.50"></text></g><g><title>ScalarFluxTask::ScalarFluxTask (1 samples, 0.05%)</title><rect x="99.3986%" y="213" width="0.0547%" height="15" fill="rgb(234,111,31)" fg:x="1818" fg:w="1"/><text x="99.6486%" y="223.50"></text></g><g><title>BulkStorage&lt;double&gt;::setCapacity (1 samples, 0.05%)</title><rect x="99.3986%" y="197" width="0.0547%" height="15" fill="rgb(241,149,10)" fg:x="1818" fg:w="1"/><text x="99.6486%" y="207.50"></text></g><g><title>MemoryControl::allocate&lt;double&gt; (1 samples, 0.05%)</title><rect x="99.3986%" y="181" width="0.0547%" height="15" fill="rgb(249,206,44)" fg:x="1818" fg:w="1"/><text x="99.6486%" y="191.50"></text></g><g><title>__libc_start_main_impl (1,663 samples, 90.92%)</title><rect x="8.5839%" y="325" width="90.9240%" height="15" fill="rgb(251,153,30)" fg:x="157" fg:w="1663"/><text x="8.8339%" y="335.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (1,663 samples, 90.92%)</title><rect x="8.5839%" y="309" width="90.9240%" height="15" fill="rgb(239,152,38)" fg:x="157" fg:w="1663"/><text x="8.8339%" y="319.50">__libc_start_call_main</text></g><g><title>main (1,662 samples, 90.87%)</title><rect x="8.6386%" y="293" width="90.8693%" height="15" fill="rgb(249,139,47)" fg:x="158" fg:w="1662"/><text x="8.8886%" y="303.50">main</text></g><g><title>initMC (70 samples, 3.83%)</title><rect x="95.6807%" y="277" width="3.8272%" height="15" fill="rgb(244,64,35)" fg:x="1750" fg:w="70"/><text x="95.9307%" y="287.50">init..</text></g><g><title>std::ostream::operator&lt;&lt; (1 samples, 0.05%)</title><rect x="99.4533%" y="261" width="0.0547%" height="15" fill="rgb(216,46,15)" fg:x="1819" fg:w="1"/><text x="99.7033%" y="271.50"></text></g><g><title>std::ostream::_M_insert&lt;unsigned long&gt; (1 samples, 0.05%)</title><rect x="99.4533%" y="245" width="0.0547%" height="15" fill="rgb(250,74,19)" fg:x="1819" fg:w="1"/><text x="99.7033%" y="255.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.05%)</title><rect x="99.5079%" y="277" width="0.0547%" height="15" fill="rgb(249,42,33)" fg:x="1820" fg:w="1"/><text x="99.7579%" y="287.50"></text></g><g><title>tunable_is_name (1 samples, 0.05%)</title><rect x="99.5079%" y="261" width="0.0547%" height="15" fill="rgb(242,149,17)" fg:x="1820" fg:w="1"/><text x="99.7579%" y="271.50"></text></g><g><title>elf_machine_rela (5 samples, 0.27%)</title><rect x="99.5626%" y="229" width="0.2734%" height="15" fill="rgb(244,29,21)" fg:x="1821" fg:w="5"/><text x="99.8126%" y="239.50"></text></g><g><title>_dl_lookup_symbol_x (3 samples, 0.16%)</title><rect x="99.6720%" y="213" width="0.1640%" height="15" fill="rgb(220,130,37)" fg:x="1823" fg:w="3"/><text x="99.9220%" y="223.50"></text></g><g><title>do_lookup_x (3 samples, 0.16%)</title><rect x="99.6720%" y="197" width="0.1640%" height="15" fill="rgb(211,67,2)" fg:x="1823" fg:w="3"/><text x="99.9220%" y="207.50"></text></g><g><title>check_match (1 samples, 0.05%)</title><rect x="99.7813%" y="181" width="0.0547%" height="15" fill="rgb(235,68,52)" fg:x="1825" fg:w="1"/><text x="100.0313%" y="191.50"></text></g><g><title>strcmp (1 samples, 0.05%)</title><rect x="99.7813%" y="165" width="0.0547%" height="15" fill="rgb(246,142,3)" fg:x="1825" fg:w="1"/><text x="100.0313%" y="175.50"></text></g><g><title>_dl_relocate_object (6 samples, 0.33%)</title><rect x="99.5626%" y="261" width="0.3280%" height="15" fill="rgb(241,25,7)" fg:x="1821" fg:w="6"/><text x="99.8126%" y="271.50"></text></g><g><title>elf_dynamic_do_Rela (6 samples, 0.33%)</title><rect x="99.5626%" y="245" width="0.3280%" height="15" fill="rgb(242,119,39)" fg:x="1821" fg:w="6"/><text x="99.8126%" y="255.50"></text></g><g><title>elf_machine_rela_relative (1 samples, 0.05%)</title><rect x="99.8360%" y="229" width="0.0547%" height="15" fill="rgb(241,98,45)" fg:x="1826" fg:w="1"/><text x="100.0860%" y="239.50"></text></g><g><title>_dl_start_final (8 samples, 0.44%)</title><rect x="99.5079%" y="309" width="0.4374%" height="15" fill="rgb(254,28,30)" fg:x="1820" fg:w="8"/><text x="99.7579%" y="319.50"></text></g><g><title>_dl_sysdep_start (8 samples, 0.44%)</title><rect x="99.5079%" y="293" width="0.4374%" height="15" fill="rgb(241,142,54)" fg:x="1820" fg:w="8"/><text x="99.7579%" y="303.50"></text></g><g><title>dl_main (7 samples, 0.38%)</title><rect x="99.5626%" y="277" width="0.3827%" height="15" fill="rgb(222,85,15)" fg:x="1821" fg:w="7"/><text x="99.8126%" y="287.50"></text></g><g><title>setup_vdso (1 samples, 0.05%)</title><rect x="99.8907%" y="261" width="0.0547%" height="15" fill="rgb(210,85,47)" fg:x="1827" fg:w="1"/><text x="100.1407%" y="271.50"></text></g><g><title>elf_get_dynamic_info (1 samples, 0.05%)</title><rect x="99.8907%" y="245" width="0.0547%" height="15" fill="rgb(224,206,25)" fg:x="1827" fg:w="1"/><text x="100.1407%" y="255.50"></text></g><g><title>all (1,829 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(243,201,19)" fg:x="0" fg:w="1829"/><text x="0.2500%" y="383.50"></text></g><g><title>qs (1,829 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(236,59,4)" fg:x="0" fg:w="1829"/><text x="0.2500%" y="367.50">qs</text></g><g><title>_start (1,678 samples, 91.74%)</title><rect x="8.2559%" y="341" width="91.7441%" height="15" fill="rgb(254,179,45)" fg:x="151" fg:w="1678"/><text x="8.5059%" y="351.50">_start</text></g><g><title>_dl_start (9 samples, 0.49%)</title><rect x="99.5079%" y="325" width="0.4921%" height="15" fill="rgb(226,14,10)" fg:x="1820" fg:w="9"/><text x="99.7579%" y="335.50"></text></g><g><title>elf_get_dynamic_info (1 samples, 0.05%)</title><rect x="99.9453%" y="309" width="0.0547%" height="15" fill="rgb(244,27,41)" fg:x="1828" fg:w="1"/><text x="100.1953%" y="319.50"></text></g></svg></svg>